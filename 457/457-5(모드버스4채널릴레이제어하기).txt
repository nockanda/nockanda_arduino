esphome:
  name: nockanda

esp8266:
  board: esp01_1m

# Enable logging
logger:

uart:
  id: mod_bus
  tx_pin: 4
  rx_pin: 5
  baud_rate: 9600
  stop_bits: 1

modbus:
  flow_control_pin: 14
  id: modbus1

modbus_controller:
  - id: epever
    ## the Modbus device addr
    address: 0x2
    modbus_id: modbus1
    setup_priority: -10

switch:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: relay1
    register_type: coil
    address: 2
    name: "CH1 ON"
    #02 05 00 00 FF 00
    write_lambda: |-
      //ESP_LOGD("main","Modbus Switch incoming state = %f",x);
      // return false ; // use this to just change the value
      if(id(relay1).state == false){
        //켜는 명령
        payload.push_back(0x2);  // device address
        payload.push_back(0x5);  // force single coil
        payload.push_back(0x0); // high byte address of the coil
        payload.push_back(0x0);  // low byte address of the coil
        payload.push_back(0xFF); // ON = 0xFF00 OFF=0000
        payload.push_back(0x00);
        return true;  
      }else{
        //끄는 명령
        payload.push_back(0x2);  // device address
        payload.push_back(0x5);  // force single coil
        payload.push_back(0x0); // high byte address of the coil
        payload.push_back(0x0);  // low byte address of the coil
        payload.push_back(0x0); // ON = 0xFF00 OFF=0000
        payload.push_back(0x0);
        return false;  
      }
  - platform: modbus_controller
    modbus_controller_id: epever
    id: relay2
    register_type: coil
    address: 2
    name: "CH2 ON"
    #02 05 00 00 FF 00
    write_lambda: |-
      //ESP_LOGD("main","Modbus Switch incoming state = %f",x);
      // return false ; // use this to just change the value
      if(id(relay2).state == false){
        //켜는 명령
        payload.push_back(0x2);  // device address
        payload.push_back(0x5);  // force single coil
        payload.push_back(0x0); // high byte address of the coil
        payload.push_back(0x1);  // low byte address of the coil
        payload.push_back(0xFF); // ON = 0xFF00 OFF=0000
        payload.push_back(0x00);
        return true;  
      }else{
        //끄는 명령
        payload.push_back(0x2);  // device address
        payload.push_back(0x5);  // force single coil
        payload.push_back(0x0); // high byte address of the coil
        payload.push_back(0x1);  // low byte address of the coil
        payload.push_back(0x0); // ON = 0xFF00 OFF=0000
        payload.push_back(0x0);
        return false;  
      }  
  - platform: modbus_controller
    modbus_controller_id: epever
    id: relay3
    register_type: coil
    address: 2
    name: "CH3 ON"
    #02 05 00 00 FF 00
    write_lambda: |-
      //ESP_LOGD("main","Modbus Switch incoming state = %f",x);
      // return false ; // use this to just change the value
      if(id(relay3).state == false){
        //켜는 명령
        payload.push_back(0x2);  // device address
        payload.push_back(0x5);  // force single coil
        payload.push_back(0x0); // high byte address of the coil
        payload.push_back(0x2);  // low byte address of the coil
        payload.push_back(0xFF); // ON = 0xFF00 OFF=0000
        payload.push_back(0x00);
        return true;  
      }else{
        //끄는 명령
        payload.push_back(0x2);  // device address
        payload.push_back(0x5);  // force single coil
        payload.push_back(0x0); // high byte address of the coil
        payload.push_back(0x2);  // low byte address of the coil
        payload.push_back(0x0); // ON = 0xFF00 OFF=0000
        payload.push_back(0x0);
        return false;  
      }  
  - platform: modbus_controller
    modbus_controller_id: epever
    id: relay4
    register_type: coil
    address: 2
    name: "CH4 ON"
    #02 05 00 00 FF 00
    write_lambda: |-
      //ESP_LOGD("main","Modbus Switch incoming state = %f",x);
      // return false ; // use this to just change the value
      if(id(relay4).state == false){
        //켜는 명령
        payload.push_back(0x2);  // device address
        payload.push_back(0x5);  // force single coil
        payload.push_back(0x0); // high byte address of the coil
        payload.push_back(0x3);  // low byte address of the coil
        payload.push_back(0xFF); // ON = 0xFF00 OFF=0000
        payload.push_back(0x00);
        return true;  
      }else{
        //끄는 명령
        payload.push_back(0x2);  // device address
        payload.push_back(0x5);  // force single coil
        payload.push_back(0x0); // high byte address of the coil
        payload.push_back(0x3);  // low byte address of the coil
        payload.push_back(0x0); // ON = 0xFF00 OFF=0000
        payload.push_back(0x0);
        return false;  
      } 
# Enable Home Assistant API
api:

ota:
  password: "4de48bf22b324332a2421c7a316ecad8"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Nockanda Fallback Hotspot"
    password: "fVTDpvCSyniQ"

captive_portal:
    

