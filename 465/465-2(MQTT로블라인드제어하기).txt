#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#define ch1 D6 //릴레이Ch1 연결핀?
#define ch2 D7
#define btn1 D3 //무조건 0으로 가는 버튼
#define btn2 D4 //0일때 멈추는 버튼

int direction = 0; //0이면 멈춤, 1이면 정방향, 2면 역방향

unsigned long open_t = 25000; //완전닫힘에서 완전열림까지 걸리는 시간? 25초
unsigned long close_t = 20000; //완전열림에서 완전닫힘까지 걸리는 시간? 20초

float my_pos = 0;
bool is_auto_mode = false;
bool is_manual_mode = false;
unsigned long time_span = 0; //열리고 닫히는데 걸리는 시간을 계산한다
unsigned long time_span_control = 0; //아두이노 내부의 시간값을 컨트롤
unsigned long loop_time = 0;

// Update these with values suitable for your network.

const char* ssid = "nockanda";
const char* password = "11213144";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");

  String data = "";
  for (int i = 0; i < length; i++) {
    data += (char)payload[i];
    Serial.print((char)payload[i]);
  }
  Serial.println();

  //data 
  //블라인드 제어함수~!
  cover_control(data.toInt());

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/room/blind");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(ch1,OUTPUT);
  pinMode(ch2,OUTPUT);
  pinMode(btn1,INPUT_PULLUP); //버튼을 안누르면 HIGH, 버튼을 누르면 LOW
  pinMode(btn2,INPUT_PULLUP);
  digitalWrite(ch1, HIGH); //채널1 off
  digitalWrite(ch2, HIGH); //채널2 off
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if(digitalRead(btn1) == LOW){
    //임의의 위치에서 무조건 0으로 향한다!
    //역방향으로 회전하면 0으로 간다!
    digitalWrite(ch1,HIGH);
    digitalWrite(ch2,LOW);
  }
  if(digitalRead(btn2) == LOW){

    //모터를 멈추고~~
    digitalWrite(ch1,HIGH);
    digitalWrite(ch2,HIGH);
    //그위치가 0이다!
    my_pos = 0;
  }

  //자동으로 위치를 보정하는 부분
  if(direction != 0 && is_auto_mode){
    //모터가 정회전/ 역회전 들중 하나를 수행하고 있음!
    if(direction == 1){
      //열리고 있는중
      //time_span
      if(millis() - time_span_control > time_span){
        //유저가 입력한 시간이 경과한 상황
        Serial.println("열기 작업완료");
        digitalWrite(ch1, HIGH);
        digitalWrite(ch2, HIGH);
        is_auto_mode = false;
      }else{
        //열리고 있는 중
        //현재 위치를 계산해야하는 지점!
        //루프의 회전시간을 측정한다
        unsigned long t = millis();
        if(t - loop_time > 100){
          //t - loop_time
          my_pos = my_pos + ((t - loop_time)/(float)open_t)*100;
          Serial.println(my_pos);
          client.publish("nockanda/room/blind_pos", String(my_pos).c_str());
          
          loop_time = t;
        }
      }
    }else if(direction == 2){
      //닫히고있는중
      //time_span
      if(millis() - time_span_control > time_span){
        //유저가 입력한 시간이 경과한 상황
        Serial.println("닫기 작업완료");
        digitalWrite(ch1, HIGH);
        digitalWrite(ch2, HIGH);
        is_auto_mode = false;
      }else{
        //닫히고 있는 중
        //현재 위치를 계산해야하는 지점!
        //루프의 회전시간을 측정한다
        unsigned long t = millis();
        if(t - loop_time > 100){
          //t - loop_time
          my_pos = my_pos - ((t - loop_time)/(float)close_t)*100;
          Serial.println(my_pos);
          client.publish("nockanda/room/blind_pos", String(my_pos).c_str());
          
          loop_time = t;
        }
      }
    }
  }

/*
  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("outTopic", msg);
  }
  */
}

void cover_control(int input_pos){
  //자동으로 작동해라~
    is_manual_mode = false;

    //my_pos ??  input_pos ??
    if(my_pos == input_pos){
      //아무것도 할필요가 없는 상황
    }else if(my_pos > input_pos){
      //셔터가 아래쪽으로 내려가야함을 의미한다
      //모터가 역회전해야하는 상황
      //모터를 회전시키는 작업만 여기서 진행
      digitalWrite(ch1, HIGH);
      digitalWrite(ch2, LOW);
      direction = 2;
      is_auto_mode = true;
      //닫히는 속도를 기준으로 시간을 계산한다!
      int dist = my_pos - input_pos; //30
      //close_t
      time_span = close_t*(dist/100.0);
      Serial.println(time_span);
      time_span_control = millis();
      loop_time = millis();
    }else if(my_pos < input_pos){
      //셔텨가 위쪽으로 올라가야함을 의미한다!
      //모터가 정회전하는 상황
      //모터를 회전시키는 작업만 여기서 진행
      digitalWrite(ch1, LOW);
      digitalWrite(ch2, HIGH);
      direction = 1;
      is_auto_mode = true;
      //열리는 속도를 기준으로 시간을 계산한다!
      int dist = input_pos - my_pos; //30
      //close_t
      time_span = open_t*(dist/100.0);
      Serial.println(time_span);
      time_span_control = millis();
      loop_time = millis();
    }
}