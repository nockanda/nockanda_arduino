
#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WebSocketsServer.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Hash.h>

#define ch1 D6 //릴레이Ch1 연결핀?
#define ch2 D7
#define btn1 D3 //무조건 0으로 가는 버튼
#define btn2 D4 //0일때 멈추는 버튼

int direction = 0; //0이면 멈춤, 1이면 정방향, 2면 역방향

unsigned long open_t = 25000; //완전닫힘에서 완전열림까지 걸리는 시간? 25초
unsigned long close_t = 20000; //완전열림에서 완전닫힘까지 걸리는 시간? 20초

float my_pos = 0;
bool is_auto_mode = false;
bool is_manual_mode = false;
unsigned long time_span = 0; //열리고 닫히는데 걸리는 시간을 계산한다
unsigned long time_span_control = 0; //아두이노 내부의 시간값을 컨트롤
unsigned long loop_time = 0;

#define USE_SERIAL Serial

ESP8266WiFiMulti WiFiMulti;

//웹서버의 포트는 기본 포트인 80번을 사용한다!
ESP8266WebServer server(80);
//웹서버와 웹클라이언트가 뒷구멍으로 주고받는 데이터는 웹소켓에서 81번을 쓴다!
WebSocketsServer webSocket = WebSocketsServer(81);

String response = "\
<html>\
<head>\
<meta name=\"viewport\" content=\"width=device-width\">\
<meta charset=\"utf-8\">\
<script>\
  var connection = new WebSocket('ws://'+location.hostname+':81/', ['arduino']);\
  connection.onopen = function () {\
  };\
  connection.onerror = function (error) {\
     console.log('WebSocket Error ', error);\
  };\
  connection.onmessage = function (e) {\
     console.log('Server: ', e.data);\
     document.getElementById('now_pos').innerText =  e.data;\
     document.getElementById('range1').value = e.data;\
  };\
  function send_msg(){\
     connection.send('녹칸다 포에버!!!');\
  }\
  function set_target(){\
   var my_range = document.getElementById('range2').value;\
   connection.send(my_range);\
  }\
  function set_label(){\
    var my_range = document.getElementById('range2').value;\
    document.getElementById('target_pos').innerText =  my_range;\
  }\
</script>\
</head>\
<body>\
<table border=1 width=500>\
<tr><th>녹칸다의 블라인드 컨트롤러</th></tr>\
<tr><td align=center>현재위치</td></tr>\
<tr><td align=center><p id=now_pos>0</p><input min=0 max=100 value=0 id=range1 type=range style='width:100%;'></td></tr>\
<tr><td align=center>목표위치</td></tr>\
<tr><td align=center><p id=target_pos>0</p><input min=0 max=100 value=0 id=range2 type=range style='width:100%;' onchange=set_target() oninput=set_label()></td></tr>\
</table>\
</body>\
</html>";


//클라이언트에서 서버쪽으로 값이 전송되었을때 뭘할거냐?
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            USE_SERIAL.printf("[%u] Disconnected!\n", num);
            break;
        case WStype_CONNECTED: {
            IPAddress ip = webSocket.remoteIP(num);
            USE_SERIAL.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);

            //num = 소켓번호(클라이언트번호)
            //webSocket.sendTXT(num, "Connected");
        }
            break;
        case WStype_TEXT:
        //메시지 수신부
            USE_SERIAL.printf("[%u] get Text: %s\n", num, payload);
            //값을 받아서 블라인드 컨트롤을 한다!
            String data = "";
            for(int i = 0;i<length;i++){
              data += (char)payload[i];
            }
            //data.toInt();
            cover_control(data.toInt());
            break;
    }

}

void setup() {
    //USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);

    pinMode(ch1,OUTPUT);
    pinMode(ch2,OUTPUT);
    pinMode(btn1,INPUT_PULLUP); //버튼을 안누르면 HIGH, 버튼을 누르면 LOW
    pinMode(btn2,INPUT_PULLUP);
    digitalWrite(ch1, HIGH); //채널1 off
    digitalWrite(ch2, HIGH); //채널2 off

    //USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

    for(uint8_t t = 4; t > 0; t--) {
        USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
        USE_SERIAL.flush();
        delay(1000);
    }

    //자기자신의 IP공유기 ID비밀번호 집어넣는곳!
    WiFiMulti.addAP("nockanda", "11213144");

    while(WiFiMulti.run() != WL_CONNECTED) {
        delay(100);
    }

    //IP공유기로부터 할당받은 IP주소를 여기서 출력한다!
    USE_SERIAL.println("IP address: ");
    USE_SERIAL.println(WiFi.localIP());
  
    //웹소켓 서버를 연다
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);

    //윈도우10, 안드로이드 안됨..의미없는 기능
    if(MDNS.begin("esp8266")) {
        USE_SERIAL.println("MDNS responder started");
    }

    //웹서버의 index.html
    //웹서버가 클라이언트에게 response해주는 부분!

    server.on("/", []() {
        server.send(200, "text/html", response);
    });

    server.begin();

    // Add service to MDNS
    MDNS.addService("http", "tcp", 80);
    MDNS.addService("ws", "tcp", 81);
}

unsigned long last_10sec = 0;
unsigned int counter = 0;

void loop() {
    unsigned long t = millis();
    webSocket.loop(); //이거 있어야한다!
    server.handleClient(); //이거도 있어야한다!


    if(digitalRead(btn1) == LOW){
    //임의의 위치에서 무조건 0으로 향한다!
    //역방향으로 회전하면 0으로 간다!
    digitalWrite(ch1,HIGH);
    digitalWrite(ch2,LOW);
  }
  if(digitalRead(btn2) == LOW){

    //모터를 멈추고~~
    digitalWrite(ch1,HIGH);
    digitalWrite(ch2,HIGH);
    //그위치가 0이다!
    my_pos = 0;
  }

  //자동으로 위치를 보정하는 부분
  if(direction != 0 && is_auto_mode){
    //모터가 정회전/ 역회전 들중 하나를 수행하고 있음!
    if(direction == 1){
      //열리고 있는중
      //time_span
      if(millis() - time_span_control > time_span){
        //유저가 입력한 시간이 경과한 상황
        Serial.println("열기 작업완료");
        digitalWrite(ch1, HIGH);
        digitalWrite(ch2, HIGH);
        is_auto_mode = false;
      }else{
        //열리고 있는 중
        //현재 위치를 계산해야하는 지점!
        //루프의 회전시간을 측정한다
        unsigned long t = millis();
        if(t - loop_time > 100){
          //t - loop_time
          my_pos = my_pos + ((t - loop_time)/(float)open_t)*100;
          Serial.println(my_pos);
          webSocket.broadcastTXT(String(my_pos).c_str());
          
          loop_time = t;
        }
      }
    }else if(direction == 2){
      //닫히고있는중
      //time_span
      if(millis() - time_span_control > time_span){
        //유저가 입력한 시간이 경과한 상황
        Serial.println("닫기 작업완료");
        digitalWrite(ch1, HIGH);
        digitalWrite(ch2, HIGH);
        is_auto_mode = false;
      }else{
        //닫히고 있는 중
        //현재 위치를 계산해야하는 지점!
        //루프의 회전시간을 측정한다
        unsigned long t = millis();
        if(t - loop_time > 100){
          //t - loop_time
          my_pos = my_pos - ((t - loop_time)/(float)close_t)*100;
          Serial.println(my_pos);
          webSocket.broadcastTXT(String(my_pos).c_str());
          
          loop_time = t;
        }
      }
    }
  }

    //delay(~~~~) 절때 쓰면 안됨!

    /*
    //10초간격으로 뭔가 하겠다~
    if((t - last_10sec) > 1000) {
      last_10sec = millis();
      String msg = "현재 사물인터넷보드의 시간="+String(millis());
      webSocket.broadcastTXT(msg); //모든클라이언트에게 메시지 전송!
        
    }
    */
}

void cover_control(int input_pos){
  //자동으로 작동해라~
    is_manual_mode = false;

    //my_pos ??  input_pos ??
    if(my_pos == input_pos){
      //아무것도 할필요가 없는 상황
    }else if(my_pos > input_pos){
      //셔터가 아래쪽으로 내려가야함을 의미한다
      //모터가 역회전해야하는 상황
      //모터를 회전시키는 작업만 여기서 진행
      digitalWrite(ch1, HIGH);
      digitalWrite(ch2, LOW);
      direction = 2;
      is_auto_mode = true;
      //닫히는 속도를 기준으로 시간을 계산한다!
      int dist = my_pos - input_pos; //30
      //close_t
      time_span = close_t*(dist/100.0);
      Serial.println(time_span);
      time_span_control = millis();
      loop_time = millis();
    }else if(my_pos < input_pos){
      //셔텨가 위쪽으로 올라가야함을 의미한다!
      //모터가 정회전하는 상황
      //모터를 회전시키는 작업만 여기서 진행
      digitalWrite(ch1, LOW);
      digitalWrite(ch2, HIGH);
      direction = 1;
      is_auto_mode = true;
      //열리는 속도를 기준으로 시간을 계산한다!
      int dist = input_pos - my_pos; //30
      //close_t
      time_span = open_t*(dist/100.0);
      Serial.println(time_span);
      time_span_control = millis();
      loop_time = millis();
    }
}