#include <SoftwareSerial.h>
#include "CRC16.h"
#include "CRC.h"

#define slaveid 0x01

#define RTU_OK 0
#define RTU_TIMEOUT 1
#define RTU_DATA_ERROR 2
#define RTU_CRC_ERROR 3

/*
Relay No. 0 is on: 01 05 00 00 FF 00 8C 3A
Relay No. 0 is clo 01 05 00 00 00 00 CD CA
//--------------------------------------------
Relay No. 1 is on: 01 05 00 01 FF 00 DD FA
Relay No. 1 is closed: 01 05 00 01 00 00 9C 0A
//-------------------------------------------
Relay No. 2 is on: 01 05 00 02 FF 00 2D FA
Relay No. 2 is closed: 01 05 00 02 00 00 6C 0A
//-------------------------------------------
Relay No. 3 is open: 01 05 00 03 FF 00 7C 3A
Relay No. 3 is closed: 01 05 00 03 00 00 3D CA
*/
CRC16 crc;

#define mode 13 //데이터 입출력핀! //LOW(0):수신모드 HIGH(1):송신모드

byte buff[50];

                   //rx, tx
SoftwareSerial modbus(2, 3); //모듈tx, rx @아두이노 입장 rx, tx

void setup() {
  // put your setup code here, to run once:  
  Serial.begin(9600); //아두이노-PC 통신라인(결과출력용)
  modbus.begin(9600); //사용하는 제품마다 숫자가 다름!
  //데이터 입출력핀을 출력모드로 설정한다!
  pinMode(mode,OUTPUT);
  //시작은 수신모드이다!
  recv_mode();

  //만약에 버퍼에 뭔가 있으면 클리어한다!
  while(modbus.available()){
    modbus.read();
  }
  Serial.println("녹칸다의 modbus 시작!");

}

void loop() {
  // put your main code here, to run repeatedly:
  //01 05 00 00 FF 00 8C 3A
  for(int i = 0;i<4;i++){
    set_relay(0x01,i,true);
    delay(1000);
  }
  for(int i = 0;i<4;i++){
    set_relay(0x01,i,false);
    delay(1000);
  }
}
//각채널별로 제어하기!(on/off, 채널번호??)
void set_relay(byte slave_id, byte channel, bool sw){
 
  byte state = sw?0xFF:0x00;
  byte request[] = {slave_id,0x05,0x00,channel,state,0x00};
  if(nockanda_modbus_rtu(request,6,buff,8) == RTU_OK){
    //request가 성공적으로 수행된 상황!
    for(int i = 0;i<8;i++){
      Serial.print(buff[i],HEX);
      Serial.print(",");
    }
    Serial.println();
  }
}

int nockanda_modbus_rtu(byte req[],int req_len,byte res[],int res_len){
  //sht20에게 보내줘야할 데이터이다!
  //byte request[] = {slaveid, 0x04, 0x00, 0x01, 0x00, 0x01};
  int response_length = res_len;

  uint16_t request_crc = crc16(req, req_len, 0x8005, 0xFFFF, 0, true, true);

  //2바이트로 표현된 result값을 1byte씩 쪼개서 2byte로 나눠담는 과정~!
  byte request_crc_high = request_crc >> 8;
  byte request_crc_low = request_crc & 0xFF;

 
  //송신모드로 전환!
  send_mode();
  //request 송신!
  modbus.write(req, req_len);
  modbus.write(request_crc_low);
  modbus.write(request_crc_high);
  //request가 완료됨을 확인할 필요가 있다!
  modbus.flush();
  recv_mode();

  Serial.println("전송완료!");

  //두목이 쫄병한데 물어봤으면 대답할 여유를 줘야한다!
  //(기존코드)
  //while(!modbus.available());
  //(스트리밍후 개선 코드) 수신할 데이터 길이만큼 기다린다
  unsigned long t = millis();
  bool is_timeout = false;
  while(!(modbus.available()==response_length)){
    if(millis() - t > 1000){
      //while루프 시작후 1초가 경과된 상황!
      is_timeout = true;
      break;
    }
  }

  if(is_timeout){
    //타임아웃 상황이다!
    Serial.println("타임아웃입니다!");
    return RTU_TIMEOUT;
  }
  
  //받아야 한다!
  //byte response[50];
  int len = 0;
  while(modbus.available()){
    res[len] = modbus.read();
    len++;
  }

  //수신완료지점
  if(len != response_length){
    Serial.println("데이터가 잘못 왔다!");
    return RTU_DATA_ERROR;
  }

  //response안에 들어있는 값을 길이 맞는 byte array에 담는 과정!
  byte data[len-2];
  for(int i = 0;i<len-2;i++){
    data[i] = res[i];
  }

  //CRC체크
  uint16_t result = crc16(data, len-2, 0x8005, 0xFFFF, 0, true, true);

  //2바이트로 표현된 result값을 1byte씩 쪼개서 2byte로 나눠담는 과정~!
  byte crc_high = result >> 8;
  byte crc_low = result & 0xFF;

  if(crc_low != res[len-2] || crc_high != res[len-1]){
    //에러의조건
    Serial.println("CRC가 안맞다..!");
    return RTU_CRC_ERROR;
  }

  return RTU_OK;
  
/*
  Serial.print("수신된 CRC=");
  Serial.print(response[len-2],HEX);
  Serial.println(response[len-1],HEX);

  Serial.print("계산된 CRC=");
  Serial.print(crc_low, HEX);
  Serial.println(crc_high, HEX);
*/
/*
  //출력을 해보자!
  for(int i = 0;i<len;i++){
    Serial.print(response[i],HEX);
    Serial.print(",");
  }
  Serial.println();
  */
}

void send_mode(){
  digitalWrite(mode,HIGH);
}
void recv_mode(){
  digitalWrite(mode,LOW);
}
