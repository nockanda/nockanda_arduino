#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

#define led1 D3
#define led2 D4
#define led3 D5
#define led4 D6

//사물인터넷보드가 와이파이공유가와 연결하기 위한 id, pw를 입력해야한다!
#ifndef STASSID
#define STASSID "popcorn"
#define STAPSK  "11213144"
#endif

//IoT보드에서 사용할 포트번호가 무엇인가?
unsigned int localPort = 60000;      // local port to listen on

//송수신데이터의 버퍼를 생성한다!
char packetBuffer[UDP_TX_PACKET_MAX_SIZE + 1]; //buffer to hold incoming packet,
char  ReplyBuffer[] = "나는 ESP8266보드이다!!\r\n";       // a string to send back

//UDP통신을 위한 클래스
WiFiUDP Udp;

unsigned long t = 0;

void setup() {
  //와이파이 공유기와 접속하기 위한 절차가 진행된다!
  Serial.begin(115200);
  pinMode(led1,OUTPUT);
  pinMode(led2,OUTPUT);
  pinMode(led3,OUTPUT);
  pinMode(led4,OUTPUT);
  
  WiFi.mode(WIFI_STA);
  WiFi.begin(STASSID, STAPSK);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(500);
  }
  Serial.print("Connected! IP address: ");
  Serial.println(WiFi.localIP());
  Serial.printf("UDP server on port %d\n", localPort);
  //상단에 지정된 포트를 UDP통신에 개구멍으로 쓴다!
  Udp.begin(localPort);
}

//사물인터넷보드가 전원이 연결되어있을때 해야할일!
void loop() {
  //수신된 데이터의 길이가~ 들어있겠구나!
  int packetSize = Udp.parsePacket();
  //받아온 패킷 사이즈가 1바이트 이상이라면 if문속으로 들어가겠다!
  if (packetSize) {
    /*
    Serial.printf("Received packet of size %d from %s:%d\n    (to %s:%d, free heap = %d B)\n",
                  packetSize,
                  Udp.remoteIP().toString().c_str(), Udp.remotePort(),
                  Udp.destinationIP().toString().c_str(), Udp.localPort(),
                  ESP.getFreeHeap());
    */
    
    //UDP통신으로 데이터를 수신한다!
    int n = Udp.read(packetBuffer, UDP_TX_PACKET_MAX_SIZE);
    packetBuffer[n] = 0;  // \0

    //받아온 데이터를 출력한다!
    //Serial.println("Contents:");
    Serial.println(packetBuffer);

    //(예시)
    //10 : 1번 LED를 OFF
    //11 : 1번 LED를 ON
    //20 : 2번 LED를 OFF
    //21 : 2번 LED를 ON

    char led_num = packetBuffer[0];
    char led_state = packetBuffer[1];

    if(led_num == '1'){
      if(led_state == '0'){
        digitalWrite(led1,LOW);
      }else if(led_state == '1'){
        digitalWrite(led1,HIGH);
      }
    }else if(led_num == '2'){
      if(led_state == '0'){
        digitalWrite(led2,LOW);
      }else if(led_state == '1'){
        digitalWrite(led2,HIGH);
      }
    }else if(led_num == '3'){
      if(led_state == '0'){
        digitalWrite(led3,LOW);
      }else if(led_state == '1'){
        digitalWrite(led3,HIGH);
      }
    }else if(led_num == '4'){
      if(led_state == '0'){
        digitalWrite(led4,LOW);
      }else if(led_state == '1'){
        digitalWrite(led4,HIGH);
      }
    }
  }

  //1초에한번마다 UDP통신으로 C# UDP클라이언트에 메시지를 전송한다!
  //UDP전송데이터의 시작(목적지의 주소가 필요하다)
  
  if(millis() - t > 1000){
    t = millis();
    Udp.beginPacket("192.168.0.7", 60001);

    //반환데이터의 규칙
    //0000 = >모든 LED가 꺼져있다
    //1111 => 모든 LED가 켜져있다!
    //1100 => 1,2번 LED는 켜져있고 3,4번 LED는 꺼져있다!
    //0011 => 1,2번 LED는 꺼져있고 3,4번 LED는 켜져있다!

    bool led1_state = digitalRead(led1);
    bool led2_state = digitalRead(led2);
    bool led3_state = digitalRead(led3);
    bool led4_state = digitalRead(led4);

    if(led1_state) Udp.write('1');
    else Udp.write('0');
    
    if(led2_state) Udp.write('1');
    else Udp.write('0');

    if(led3_state) Udp.write('1');
    else Udp.write('0');

    if(led4_state) Udp.write('1');
    else Udp.write('0');
    
    //UDP전송데이터의 끝
    Udp.endPacket();
  }
  
}

/*
  test (shell/netcat):
  --------------------
    nc -u 192.168.esp.address 8888
*/