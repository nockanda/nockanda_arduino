#include <MsTimer2.h>
#include <SPFD5408_Adafruit_GFX.h>    
#include <SPFD5408_Adafruit_TFTLCD.h> 
#include <SPFD5408_TouchScreen.h>
#define LCD_CS A3 
#define LCD_CD A2 
#define LCD_WR A1 
#define LCD_RD A0 

#define LCD_RESET A4 
#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);


//엔코더1
#define NOCK_CLK1 10
#define NOCK_DT1 11
//엔코더2
#define NOCK_CLK2 12
#define NOCK_DT2 13

//엔코더1번의 CLK핀의 N-1의 상태를 저장하기 위한 변수
bool pre_sensorA1 = HIGH;
//엔코더2번의 CLK핀의 N-1의 상태를 저장하기 위한 변수
bool pre_sensorA2 = HIGH;

volatile char direct1 = '='; //엔코더1번꺼
volatile char direct2 = '='; //엔코더2번꺼
int number1=160;
int number2=120;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600); //나 결과를 PC로 볼꺼야~
  pinMode(NOCK_CLK1, INPUT);
  pinMode(NOCK_DT1, INPUT);
  pinMode(NOCK_CLK2, INPUT);
  pinMode(NOCK_DT2, INPUT);

  tft.reset();
  tft.begin(0x9341);
  tft.setRotation(3);
  tft.fillScreen(BLACK); //clear()
  tft.fillCircle(160, 120, 10, RED);
  
  //타이머 인터럽트를 실행하겠다!
  MsTimer2::set(1, rotary_encoder); //시간, 함수
  MsTimer2::start();
}
void loop() {
  // put your main code here, to run repeatedly:
  if(direct1 != '='){
    //로터리 엔코더가 돌아갔다
    //원래있던 원을 없앤다
    //number1,number2,10
    tft.fillCircle(number1, number2, 10, BLACK);
    if(direct1 == '+'){
      Serial.println("엔코더1번 시계방향으로 돌아감!");
      number1+=10;
      if(number1 > 319) number1 = 319;
    }else if(direct1 == '-'){
      Serial.println("엔코더1번 반시계방향으로 돌아감!");
      number1-=10;
      if(number1 < 0) number1 = 0;
    }
    Serial.println(number1);
    tft.fillCircle(number1, number2, 10, RED);
    direct1 = '=';
  }
  if(direct2 != '='){
    //로터리 엔코더가 돌아갔다
    tft.fillCircle(number1, number2, 10, BLACK);
    if(direct2 == '+'){
      Serial.println("엔코더2번 시계방향으로 돌아감!");
      number2+=10;
      if(number2 > 239) number2 = 239;
    }else if(direct2 == '-'){
      Serial.println("엔코더2번 반시계방향으로 돌아감!");
      number2-=10;
      if(number2 < 0) number2 = 0;
    }
    Serial.println(number2);
    tft.fillCircle(number1, number2, 10, RED);
    direct2 = '=';
  }
}

//로터리엔코더 2개의 입력값을 판정
void rotary_encoder(){
  //1.지금 센서값을 확인해야하는 타이밍인가?
  //(=CLK핀에 상승에지가 발생했는가?)
  bool sensorA1 = digitalRead(NOCK_CLK1);//N
  
  //여기서 할거하고~~
  if(pre_sensorA1 == HIGH && sensorA1 == LOW){
    //센서A의 Falling edge!
    //2.센서B의 상태를 가지고 와서 비교를 해본다!
    bool sensorB = digitalRead(NOCK_DT1);
    if(sensorA1 != sensorB){
      //시계방향으로 회전하고 있구나~
      Serial.println("[엔코더1번] 시계방향");
      direct1 = '+';
    }else{
      //반시계방향으로 회전하고 있구나~
      Serial.println("[엔코더1번] 반시계방향");
      direct1 = '-';
    }
  }
  pre_sensorA1 = sensorA1;


  bool sensorA2 = digitalRead(NOCK_CLK2);//N
  
  //여기서 할거하고~~
  if(pre_sensorA2 == HIGH && sensorA2 == LOW){
    //센서A의 Falling edge!
    //2.센서B의 상태를 가지고 와서 비교를 해본다!
    bool sensorB = digitalRead(NOCK_DT2);
    if(sensorA2 != sensorB){
      //시계방향으로 회전하고 있구나~
      Serial.println("[엔코더2번] 시계방향");
      direct2 = '+';
    }else{
      //반시계방향으로 회전하고 있구나~
      Serial.println("[엔코더2번] 반시계방향");
      direct2 = '-';
    }
  }
  pre_sensorA2 = sensorA2;
}

