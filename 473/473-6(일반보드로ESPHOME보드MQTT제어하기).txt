
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#define led1 D3
#define led2 D4

int sw = 0;

// Update these with values suitable for your network.

//인터넷공유기의 ID 비밀번호
const char* ssid = "nockanda";
const char* password = "11213144";
const char* mqtt_server = "192.168.0.11"; //각자 다르겠지요~~!

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str(),"mqtt","123123")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      //client.subscribe("nockanda/sw1");
      //client.subscribe("nockanda/sw2");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(led1,OUTPUT);
  pinMode(led2,OUTPUT);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  //서버와 클라이언트가 접속을 유지하기 위해서 체크하는 부분!
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  //

  int interval = 1000;
  unsigned long now = millis();
  if (now - lastMsg > interval) {
    lastMsg = now;

    //1,2,3,4를 번갈아가면서 전송한다!

    if(sw == 0){
      sw++;
      client.publish("nockanda/textsensor", "1");
    }else if(sw == 1){
      sw++;
      client.publish("nockanda/textsensor", "2");
    }else if(sw == 2){
      sw++;
      client.publish("nockanda/textsensor", "3");
    }else{
      sw = 0;
      client.publish("nockanda/textsensor", "4");
    }
  }
}