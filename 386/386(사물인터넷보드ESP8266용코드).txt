#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

#define DS D5 //데이터핀
#define LATCH D6 //래치핀
#define CLK D7 //클락핀

byte data1 = 0xFF; //릴레이 모두다 OFF
byte data2 = 0xFF; //릴레이 모두다 OFF

// Update these with values suitable for your network.

String device_num = "0001";

const char* ssid = "popcorn";
const char* password = "11213144";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;



void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {

  String msg = "";
  for(int i = 0;i<length;i++){
    msg += (char)payload[i];
  }
  
  Serial.print("Message arrived!!");
  //JSON파싱작업!
  StaticJsonDocument<200> doc;
  deserializeJson(doc, (char *)payload);
  int ch = doc["ch"];
  int state = doc["state"];
  Serial.print("채널번호=");
  Serial.print(ch);
  Serial.print(", State=");
  Serial.println(state?"켜짐":"꺼짐");

  //16채널 릴레이를 제어한다
  set_relay(ch,state);

  //노드레드쪽으로 잘 받았다고 응답을 해야한다!
  //nockanda/node-red
  client.publish("nockanda/node-red", msg.c_str());
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      String mytopic = "nockanda/"+device_num;
      client.subscribe(mytopic.c_str());
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);

  pinMode(DS,OUTPUT);
  pinMode(LATCH,OUTPUT);
  pinMode(CLK,OUTPUT);

  //초기설정 모든 릴레이를 OFF한다
  digitalWrite(LATCH,LOW);
  shiftOut(DS,CLK,MSBFIRST,data2);
  shiftOut(DS,CLK,MSBFIRST,data1);
  digitalWrite(LATCH,HIGH);
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

/*
  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("outTopic", msg);
  }
  */
}

void set_relay(int index,int state){
    //16채널은 구간이 2개가 된다 0~7 8~15
    if(index < 8){
      //0~7
      if(state){
        //릴레이OFF
        //->ON(1->0)
        bitClear(data1,index);
      }else{
        //릴레이ON
        //->OFF(0->1)
        bitSet(data1,index);
      }
    }else{
      //8~15
      if(state){
        //릴레이OFF
        //->ON(1->0)
        bitClear(data2,index-8);
      }else{
        //릴레이ON
        //->OFF(0->1)
        bitSet(data2,index-8);
      }
    }
    

    //갱신한다
    digitalWrite(LATCH,LOW);
    shiftOut(DS,CLK,MSBFIRST,data2);
    shiftOut(DS,CLK,MSBFIRST,data1);
    digitalWrite(LATCH,HIGH);
}