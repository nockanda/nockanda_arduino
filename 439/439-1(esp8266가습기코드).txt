#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"

#define DHTPIN D6
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

#define mosfet D5
#define btn_on D3
#define btn_off D4

unsigned long t = 0;

bool auto_mode = false;
int auto_min = 30;
int auto_max = 40;

// Update these with values suitable for your network.

const char* ssid = "popcorn";
const char* password = "11213144";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}


void callback(char* topic, byte* payload, unsigned int length) {
  //데이터 수신부
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String mypayload = "";
  for (int i = 0; i < length; i++) {
    mypayload += (char)payload[i];
    Serial.print((char)payload[i]);
  }
  Serial.println();
  //topic
  //payload
  String mytopic = topic;

  if(mytopic == "nockanda/control"){
    if(mypayload == "on"){
      //가습기를 켠다
      digitalWrite(mosfet,HIGH);
    }else if(mypayload == "off"){
      //가습기를 끈다
      digitalWrite(mosfet,LOW);
    }
    auto_mode = false;
  }if(mytopic == "nockanda/auto"){
    //자동모드 설정하는 부분!
    //min, max

    int comma = mypayload.indexOf(",");
    String data1 = mypayload.substring(0,comma);
    String data2 = mypayload.substring(comma+1,mypayload.length());

    auto_min = data1.toInt();
    auto_max = data2.toInt();
    auto_mode = true;
    Serial.println(mypayload);
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/control");
      client.subscribe("nockanda/auto");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  dht.begin();
  pinMode(mosfet,OUTPUT); //모스펫핀을 출력으로 설정!
  pinMode(btn_on,INPUT_PULLUP); //아두이노에 내장된 저항을 이용해서 버튼을 활용하겠다!
  pinMode(btn_off,INPUT_PULLUP); //아두이노에 내장된 저항을 이용해서 버튼을 활용하겠다!
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  //서버와 접속을 유지하고자 애쓰는 부분
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  //서버와 접속을 유지하고자 애쓰는 부분

  if(digitalRead(btn_on) == LOW){
    //버튼이 눌려진것!
    digitalWrite(mosfet,HIGH);
  }
  if(digitalRead(btn_off) == LOW){
    //버튼이 눌려진것!
    digitalWrite(mosfet,LOW);
  }
  
  unsigned long now = millis();
  if (now - lastMsg > 1000) {
    lastMsg = now;

    float h = dht.readHumidity();
    float t = dht.readTemperature();

    if(auto_mode){
      if(h>auto_max){
        digitalWrite(mosfet,LOW);
      }else if(h < auto_min){
        digitalWrite(mosfet,HIGH);
      }
    }
    
    ++value;
    String text = String(digitalRead(mosfet))+","+String(auto_mode) + ","+ String(h) + "," + String(t);
    Serial.print("Publish message: ");
    Serial.println(text);
    client.publish("nockanda/data", text.c_str());
  }
}