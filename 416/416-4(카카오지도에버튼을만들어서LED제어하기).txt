#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Arduino.h>
#include <WebSocketsServer.h>
#include <ESP8266WebServer.h>
#include <Hash.h>
#include <ArduinoJson.h>
const char* ssid = "popcorn";
const char* password = "11213144";
const char* mqtt_server = "broker.mqtt-dashboard.com"; //MQTT서버주소

//웹서버의 포트는 기본 포트인 80번을 사용한다!
ESP8266WebServer server(80);
//웹서버와 웹클라이언트가 뒷구멍으로 주고받는 데이터는 웹소켓에서 81번을 쓴다!
WebSocketsServer webSocket = WebSocketsServer(81);

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

//MQTT메시지가 수집이 되는 지점(단 TOPIC을 구독등록을 해놓아야한다)
void callback(char* topic, byte* payload, unsigned int length) {
  String mytopic = String(topic);
  /*
  Serial.print("Message arrived [");
  Serial.print(mytopic);
  Serial.print("] ");
  */
  String mypayload="";
  for (int i = 0; i < length; i++) {
    mypayload+=(char)payload[i];
  }
  //Serial.println(mypayload);
  webSocket.broadcastTXT(mypayload);
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/device1/pub");
      client.subscribe("nockanda/device2/pub");
      client.subscribe("nockanda/device3/pub");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

String your_key = "카카오키!!";
//웹서버가 웹클라이언트에게 전송하는 홈페이지!
//홈페이지에는 웹소켓클라이언트코드가 함께 첨부되서 전송된다!
//웹클라이언트가 이 코드를 받게된다면 자바스크립트로 구현된 웹소켓 클라이언트가 서버와 접속한다!
String response = "\
<html>\
<head>\
<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey="+your_key+"\"></script>\
<meta name=\"viewport\" content=\"width=device-width\">\
<meta charset=\"utf-8\">\
<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.bundle.min.js\"></script>\
<script type=\"text/javascript\" charset=\"utf-8\" src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js\"></script>\
<script>\
  var connection = new WebSocket('ws://'+location.hostname+':81/', ['arduino']);\
  connection.onopen = function () {\
     connection.send('Connect ' + new Date());\
  };\
  connection.onerror = function (error) {\
     console.log('WebSocket Error ', error);\
  };\
  connection.onmessage = function (e) {\
     console.log('Server: ', e.data);\
     var data = JSON.parse(e.data);\
     if(data.id == 1){\
        if(document.getElementById('node1') != null) document.getElementById('node1').value = '습도:'+data.h+',온도:' + data.t;\
     }else if(data.id == 2){\\
        if(document.getElementById('node2') != null) document.getElementById('node2').value = '습도:'+data.h+',온도:' + data.t;\
     }else if(data.id == 3){\
        if(document.getElementById('node3') != null) document.getElementById('node3').value = '습도:'+data.h+',온도:' + data.t;\
     }\
  };\
  function send_msg(){\
     connection.send('녹칸다 포에버!!!');\
  }\
  function led_control(id,color,state){\
    var data = {\
          d:id,\
          l:color,\
          s:state\
    };\
    connection.send(JSON.stringify(data));\
  }\
</script>\
</head>\
<body>\
<div id=\"map\" style=\"width:100%;height:700px;\"></div>\
<script>\
  var mapContainer = document.getElementById('map'),\
      mapOption = {\
          center: new kakao.maps.LatLng(33.376308527221866, 126.54271069567315),\
          level: 11,\
          mapTypeId : kakao.maps.MapTypeId.ROADMAP\
      }; \
    var map = new kakao.maps.Map(mapContainer, mapOption); \
    var marker1_pos  = new kakao.maps.LatLng(33.30669595644093, 126.16631467602055); \
    var marker2_pos  = new kakao.maps.LatLng(33.26921223248217, 126.66021810810655); \
    var marker3_pos  = new kakao.maps.LatLng(33.47263202328874, 126.93337405872047); \
    var marker1 = new kakao.maps.Marker({\
       position:marker1_pos,\
         clickable: true\
    });\
    var marker2 = new kakao.maps.Marker({\
        position: marker2_pos,\
         clickable: true\
    });\
    var marker3 = new kakao.maps.Marker({\
        position: marker3_pos,\
         clickable: true\
    });\
    marker1.setMap(map);\
    marker2.setMap(map);\
    marker3.setMap(map);\
    var infowindow1 = new kakao.maps.InfoWindow({\
        content : '<div style=\"padding:5px;width:200px;height:100;\"><input id=node1 type=text><BR><button onclick=\"led_control(1,0,0)\">녹색LED끄기</button><button onclick=\"led_control(1,0,1)\">녹색LED켜기</button><BR><button onclick=\"led_control(1,1,0)\">적색LED끄기</button><button onclick=\"led_control(1,1,1)\">적색LED켜기</button></div>',\
        removable : true\
    });\
    var infowindow2 = new kakao.maps.InfoWindow({\
        content : '<div style=\"padding:5px;width:200px;height:100;\"><input id=node2 type=text><BR><button onclick=\"led_control(2,0,0)\">녹색LED끄기</button><button onclick=\"led_control(2,0,1)\">녹색LED켜기</button><BR><button onclick=\"led_control(2,1,0)\">적색LED끄기</button><button onclick=\"led_control(2,1,1)\">적색LED켜기</button></div>',\
        removable : true\
    });\
    var infowindow3 = new kakao.maps.InfoWindow({\
        content : '<div style=\"padding:5px;width:200px;height:100;\"><input id=node3 type=text><BR><button onclick=\"led_control(3,0,0)\">녹색LED끄기</button><button onclick=\"led_control(3,0,1)\">녹색LED켜기</button><BR><button onclick=\"led_control(3,1,0)\">적색LED끄기</button><button onclick=\"led_control(3,1,1)\">적색LED켜기</button></div>',\
        removable : true\
    });\
    kakao.maps.event.addListener(marker1, 'click', function() {\
          infowindow1.open(map, marker1);  \
    });\
    kakao.maps.event.addListener(marker2, 'click', function() {\
          infowindow2.open(map, marker2);  \
    });\
    kakao.maps.event.addListener(marker3, 'click', function() {\
          infowindow3.open(map, marker3);  \
    });\
</script>\
</body>\
</html>";


//클라이언트에서 서버쪽으로 값이 전송되었을때 뭘할거냐?
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            Serial.printf("[%u] Disconnected!\n", num);
            break;
        case WStype_CONNECTED: {
            IPAddress ip = webSocket.remoteIP(num);
            Serial.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);

            //num = 소켓번호(클라이언트번호)
            //webSocket.sendTXT(num, "Connected");
        }
            break;
        case WStype_TEXT:
        //메시지 수신부
            //Serial.printf("[%u] get Text: %s\n", num, payload);
            //MQTT로 메시지를 보낸다!

            String data = "";
            for(int i = 0;i<length;i++){
              data += (char)payload[i];
            }
            //JSON을 parse한다!
            StaticJsonDocument<64> doc;
            deserializeJson(doc, data);
            int d = doc["d"]; //디바이스ID
            if(d == 1){
              client.publish("nockanda/devce1/sub", data.c_str());  
            }else if(d == 2){
              client.publish("nockanda/devce2/sub", data.c_str());
            }else if(d == 3){
              client.publish("nockanda/devce3/sub", data.c_str());
            }
            break;
    }
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  //인터넷공유기와 연결하는 작업
  setup_wifi();
  //MQTT클라이언트로 작동!
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  
  //웹소켓 서버를 연다
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);

  //웹서버
  server.on("/", []() {
      server.send(200, "text/html", response);
  });

  server.begin();
}

void loop() {
  // put your main code here, to run repeatedly:
  webSocket.loop(); //이거 있어야한다!
  server.handleClient(); //이거도 있어야한다!
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}