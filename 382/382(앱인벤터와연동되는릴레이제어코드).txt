#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <EEPROM.h>

//EEPROM에 데이터를 저장하거나 읽을때
union{
  long input;
  byte output[4];
}byte4;
// Update these with values suitable for your network.

#define DS D5
#define LATCH D6
#define CLK D7
//구조체를 정의할것이다!
//하나의 채널에 대해서 스케쥴링하기위한 구조체이다!
struct Nockanda{
  bool is_run = false; //현재 채널이 활성화중인가?
  long ontime = 1; //켜져있는 상태가 유지되는 시간(초)
  long offtime = 1; //꺼져있는 상태가 유지되는 시간(초)
  long nowtime = 0; //현재 채널이 보유하고 있는 타이머(초)
  bool state = false; //TRUE: 현재 켜져있는중, FALSE: 현재 꺼져있는중
  int total_count = 1; //전체 반복해야하는 카운트//무한히반복할때는 -1
  int now_count = 1; //현재카운트
};

Nockanda Relay[16]; //릴레이가 16채널이니까 16개가 필요하다!
unsigned long t = 0;

byte data1 = 0b11111111; //255
byte data2 = 0b11111111; //255
/////////////////////////////////////////

const char* ssid = "popcorn";
const char* password = "11213144";
//MQTT서버(브로커)의 주소
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

//메시지 수신 처리부분!
void callback(char* topic, byte* payload, unsigned int length) {
  //8가지 명령을 여기서 구분을 해야한다!
  String mytopic = topic;
  if(mytopic == "nockanda8266/setting"){
    //payload : JSON이 날라오고 16채널의 정보가 들어있다!
    
    StaticJsonDocument<500> doc;
    deserializeJson(doc, (char *)payload);

    int CH = doc["CH"]; // 0
    int ONTIME = doc["ONTIME"]; // 2
    int OFFTIME = doc["OFFTIME"]; // 2
    int COUNT = doc["COUNT"]; // -1
    set_nockanda(CH,ONTIME,OFFTIME,COUNT);
    Serial.print(CH);
    Serial.println("채널의 파라미터 설정이 되었습니다!");
    if(CH == 15){
      client.publish("nockanda8266/msg","성공적으로 설정되었습니다!");
    }
  }else if(mytopic == "nockanda8266/run"){
    //채널번호를 입력받아서 해당 채널을 활성화시킨다!
    String CH = "";
    for(int i = 0;i<length;i++){
      CH += (char)payload[i];
    }
    run_nockanda(CH.toInt());
    Serial.print(CH);
    Serial.println("채널이 활성화되었습니다!");
    client.publish("nockanda8266/onchannel",CH.c_str());
  }else if(mytopic == "nockanda8266/stop"){
    String CH = "";
    for(int i = 0;i<length;i++){
      CH += (char)payload[i];
    }
    stop_nockanda(CH.toInt());
    Serial.print(CH);
    Serial.println("채널이 비활성화되었습니다!");
    client.publish("nockanda8266/offchannel",CH.c_str());
  }else if(mytopic == "nockanda8266/allrun"){
    Serial.println("올런!");
    all_run();
    client.publish("nockanda8266/msg","모든채널이 활성화되었습니다!");
  }else if(mytopic == "nockanda8266/allstop"){
    all_stop();
    client.publish("nockanda8266/msg","모든채널이 비활성화되었습니다!");
  }else if(mytopic == "nockanda8266/save"){
    save_data();
    client.publish("nockanda8266/msg","성공적으로 기록했습니다!");
  }else if(mytopic == "nockanda8266/load"){
    load_data();
    client.publish("nockanda8266/msg","성공적으로 로드했습니다!");
  }else if(mytopic == "nockanda8266/print"){
    //현재 16채널의 정보를 C#쪽으로 보내줘야한다!
    Serial.println("파라미터출력");
    //nockanda/para
    //{"CH":0,"ONTIME":2,"OFFTIME":2,"COUNT":-1}
    for(int i = 0;i<16;i++){
      String para = "{\"CH\":"+String(i)+
      ",\"ONTIME\":"+String(Relay[i].ontime)+
      ",\"OFFTIME\":"+String(Relay[i].offtime)+
      ",\"COUNT\":"+String(Relay[i].total_count)+"}";
      //Serial.println(para);
      client.publish("nockanda8266/para",para.c_str());
    }
  }
  
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      //구독등록
      client.subscribe("nockanda8266/setting");
      client.subscribe("nockanda8266/run");
      client.subscribe("nockanda8266/stop");
      client.subscribe("nockanda8266/allrun");
      client.subscribe("nockanda8266/allstop");
      client.subscribe("nockanda8266/save");
      client.subscribe("nockanda8266/load");
      client.subscribe("nockanda8266/print");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(DS,OUTPUT);
  pinMode(LATCH,OUTPUT);
  pinMode(CLK,OUTPUT);
  //초기 릴레이의 상태를 지정하는데 모두OFF
  digitalWrite(LATCH,LOW);
  shiftOut(DS,CLK,MSBFIRST,data2);
  shiftOut(DS,CLK,MSBFIRST,data1);
  digitalWrite(LATCH,HIGH);
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  //is_run이 true인 상태에서 nowtime을 체크한다!(1초에 한번)
  if(millis() - t > 1000){
    t = millis();
    //1초에 한번마다 실행이 되는 부분이다!
    for(int i = 0;i<16;i++){
      if(Relay[i].is_run){
        //0번 채널이 작동중이면 계산을 시도하겠다!
        Relay[i].nowtime--;
        if(Relay[i].nowtime <= 0){
          //일단 타이머가 작동을 했다!
          //그때 현재 채널의 상태를 확인한다!
          if(Relay[i].state){
            //현재 켜져있음->꺼지는 쪽으로 변경
            //Serial.print(i);
            //Serial.print("채널 켜져있음->꺼져있음 ");
            //Serial.println(millis());
            Relay[i].nowtime = Relay[i].offtime;
            Relay[i].state = false;

            //0 -> 1
            if(i < 8){
              //data1(0~7)
              bitSet(data1,i);
            }else{
              //data2(8~15)
              bitSet(data2,i-8);
            }

            //1회 사이클이 회전하는 부분
            //여기서 카운트를 1회 뺸다
            if(Relay[i].total_count != -1){
              Relay[i].now_count--;
              if(Relay[i].now_count == 0){
                //Serial.print(i);
                //Serial.println("채널의 작동이 종료되었습니다!");
                stop_nockanda(i); //현재 채널의 작동을 멈추어라!
              }
            }
          }else{
            //현재 꺼져있음->켜지는 쪽으로 변경
            //Serial.print(i);
            //Serial.print("채널 꺼져있음->켜져있음 ");
            //Serial.println(millis());
            Relay[i].nowtime = Relay[i].ontime;
            Relay[i].state = true;

            //1 -> 0
            if(i < 8){
              //data1(0~7)
              bitClear(data1,i);
            }else{
              //data2(8~15)
              bitClear(data2,i-8);
            }
          }
        }
      }
    }//for
    //1초마다 업데이트된 릴레이의 정보를 갱신한다!
    digitalWrite(LATCH,LOW);
    shiftOut(DS,CLK,MSBFIRST,data2);
    shiftOut(DS,CLK,MSBFIRST,data1);
    digitalWrite(LATCH,HIGH);
  }
  
}

//1번 N채널 릴레이에 파라미터를 입력하는 함수
void set_nockanda(byte channel, long ontime, long offtime,int total_count){
  //Relay[channel]
  Relay[channel].ontime = ontime;
  Relay[channel].offtime = offtime;
  Relay[channel].total_count = total_count;
}
//2번 N채널 릴레이중 1개를 작동시키는 함수
void run_nockanda(byte channel){
  Relay[channel].is_run = true;
  Relay[channel].nowtime = 0;
  Relay[channel].state = false;
  Relay[channel].now_count = Relay[channel].total_count;

  
}
//3번 N채널 릴레이중 1개를 멈추는 함수
void stop_nockanda(byte channel){
  Relay[channel].is_run = false;

  //원래 작동되고 있던 내용과 관계없이 해당 채널의 릴레이를 OFF한다!
  if(channel < 8){
     bitSet(data1,channel);
  }else{
     bitSet(data2,channel-8);
  }
  digitalWrite(LATCH,LOW);
  shiftOut(DS,CLK,MSBFIRST,data2);
  shiftOut(DS,CLK,MSBFIRST,data1);
  digitalWrite(LATCH,HIGH);
}

void all_run(){
  for(int i = 0;i<16;i++){
    Relay[i].is_run = true;
    Relay[i].nowtime = 0;
    Relay[i].state = false;
    Relay[i].now_count = Relay[i].total_count;
  }
}
void all_stop(){
  for(int i = 0;i<16;i++){
    Relay[i].is_run = false;
  }
  data1 = 0b11111111;
  data2 = 0b11111111;
  
  digitalWrite(LATCH,LOW);
  shiftOut(DS,CLK,MSBFIRST,data2);
  shiftOut(DS,CLK,MSBFIRST,data1);
  digitalWrite(LATCH,HIGH);
}
void save_data(){
  EEPROM.begin(512);
  for(int i = 0;i<16;i++){
    //구조체 하나당 22bytes i*18
    //EEPROM.write(addr);
    //bool is_run = false;  1byte
    //long ontime = 1;  4bytes
    //long offtime = 1;  4bytes
    //long nowtime = 0; 4bytes
    //bool state = false; 1byte
    //int total_count = 1; 4bytes
    //int now_count = 1; 4bytes
    EEPROM.write(i*22,Relay[i].is_run);
    byte4.input = Relay[i].ontime;
    EEPROM.write(i*22+1,byte4.output[0]);
    EEPROM.write(i*22+2,byte4.output[1]);
    EEPROM.write(i*22+3,byte4.output[2]);
    EEPROM.write(i*22+4,byte4.output[3]);
    byte4.input = Relay[i].offtime;
    EEPROM.write(i*22+5,byte4.output[0]);
    EEPROM.write(i*22+6,byte4.output[1]);
    EEPROM.write(i*22+7,byte4.output[2]);
    EEPROM.write(i*22+8,byte4.output[3]);
    byte4.input = Relay[i].nowtime;
    EEPROM.write(i*22+9,byte4.output[0]);
    EEPROM.write(i*22+10,byte4.output[1]);
    EEPROM.write(i*22+11,byte4.output[2]);
    EEPROM.write(i*22+12,byte4.output[3]);

    EEPROM.write(i*22+13,Relay[i].state);
    byte4.input = Relay[i].total_count; //4
    EEPROM.write(i*22+14,byte4.output[0]);
    EEPROM.write(i*22+15,byte4.output[1]);
    EEPROM.write(i*22+16,byte4.output[2]);
    EEPROM.write(i*22+17,byte4.output[3]);
    byte4.input = Relay[i].now_count; //4
    EEPROM.write(i*22+18,byte4.output[0]);
    EEPROM.write(i*22+19,byte4.output[1]);
    EEPROM.write(i*22+20,byte4.output[2]);
    EEPROM.write(i*22+21,byte4.output[3]);
  }
  EEPROM.end();
  
  Serial.println(F("저장이 완료 되었습니다!"));
}
void load_data(){
  EEPROM.begin(512);
  for(int i = 0;i<16;i++){
    Relay[i].is_run = EEPROM.read(i*22);
    byte4.output[0] = EEPROM.read(i*22+1);
    byte4.output[1] = EEPROM.read(i*22+2);
    byte4.output[2] = EEPROM.read(i*22+3);
    byte4.output[3] = EEPROM.read(i*22+4);
    Relay[i].ontime = byte4.input;
    byte4.output[0] = EEPROM.read(i*22+5);
    byte4.output[1] = EEPROM.read(i*22+6);
    byte4.output[2] = EEPROM.read(i*22+7);
    byte4.output[3] = EEPROM.read(i*22+8);
    Relay[i].offtime = byte4.input;
    byte4.output[0] = EEPROM.read(i*22+9);
    byte4.output[1] = EEPROM.read(i*22+10);
    byte4.output[2] = EEPROM.read(i*22+11);
    byte4.output[3] = EEPROM.read(i*22+12);
    Relay[i].nowtime = byte4.input;
    Relay[i].state = EEPROM.read(i*22+13);
    byte4.output[0] = EEPROM.read(i*22+14);
    byte4.output[1] = EEPROM.read(i*22+15);
    byte4.output[2] = EEPROM.read(i*22+16);
    byte4.output[3] = EEPROM.read(i*22+17);
    Relay[i].total_count = byte4.input;
    byte4.output[0] = EEPROM.read(i*22+18);
    byte4.output[1] = EEPROM.read(i*22+19);
    byte4.output[2] = EEPROM.read(i*22+20);
    byte4.output[3] = EEPROM.read(i*22+21);
    Relay[i].now_count = byte4.input;

    Serial.print(i);
    Serial.print("\t");
    Serial.print(Relay[i].is_run);
    Serial.print("\t");
    Serial.print(Relay[i].ontime);
    Serial.print("\t");
    Serial.print(Relay[i].offtime);
    Serial.print("\t");
    Serial.print(Relay[i].nowtime);
    Serial.print("\t");
    Serial.print(Relay[i].state);
    Serial.print("\t");
    Serial.print(Relay[i].total_count);
    Serial.print("\t");
    Serial.println(Relay[i].now_count);
  }
  EEPROM.end();
}
void factory_reset(){
  EEPROM.begin(512);
  for(int i = 0;i<16;i++){
    EEPROM.write(i*22,0);
    byte4.input = 1;
    EEPROM.write(i*22+1,byte4.output[0]);
    EEPROM.write(i*22+2,byte4.output[1]);
    EEPROM.write(i*22+3,byte4.output[2]);
    EEPROM.write(i*22+4,byte4.output[3]);
    byte4.input = 1;
    EEPROM.write(i*22+5,byte4.output[0]);
    EEPROM.write(i*22+6,byte4.output[1]);
    EEPROM.write(i*22+7,byte4.output[2]);
    EEPROM.write(i*22+8,byte4.output[3]);
    byte4.input = 1;
    EEPROM.write(i*22+9,byte4.output[0]);
    EEPROM.write(i*22+10,byte4.output[1]);
    EEPROM.write(i*22+11,byte4.output[2]);
    EEPROM.write(i*22+12,byte4.output[3]);

    EEPROM.write(i*22+13,Relay[i].state);
    byte4.input = 1;
    EEPROM.write(i*22+14,byte4.output[0]);
    EEPROM.write(i*22+15,byte4.output[1]);
    EEPROM.write(i*22+16,byte4.output[2]);
    EEPROM.write(i*22+17,byte4.output[3]);
    byte4.input = 1;
    EEPROM.write(i*22+18,byte4.output[0]);
    EEPROM.write(i*22+19,byte4.output[1]);
    EEPROM.write(i*22+20,byte4.output[2]);
    EEPROM.write(i*22+21,byte4.output[3]);
  }
  EEPROM.end();
}