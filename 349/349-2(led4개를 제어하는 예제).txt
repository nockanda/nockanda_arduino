#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>

#define led1 D3
#define led2 D4
#define led3 D5
#define led4 D6

//와이파이 공유기의 id비밀번호가 들어가야 인터넷에 접속이 가능하겠죠?
#ifndef STASSID
#define STASSID "popcorn"
#define STAPSK  "11213144"
#endif

const char* ssid     = STASSID;
const char* password = STAPSK;

//클라이언트가 서버에 연결을 해야하는데.. 서버의 주소가 필요하다!
const char* host = "192.168.0.7";
//서버의 ip주소는 전체적인 주소의 일부분 상세주소인 포트번호가 필요하다!
const uint16_t port = 60000;

ESP8266WiFiMulti WiFiMulti;


//셋업함수는 아두이노가 부팅되면 딱 한번 실행되는부분!
//와이파이 공유기와 연결하는 작업을 진행한다!
void setup() {
  Serial.begin(115200);
  pinMode(led1,OUTPUT);
  pinMode(led2,OUTPUT);
  pinMode(led3,OUTPUT);
  pinMode(led4,OUTPUT);

  // We start by connecting to a WiFi network
  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP(ssid, password);

  Serial.println();
  Serial.println();
  Serial.print("Wait for WiFi... ");

  while (WiFiMulti.run() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  delay(500);
}


void loop() {
  //서버주소가 ~~인데 ~~에 연결할거다!
  Serial.print("connecting to ");
  Serial.print(host);
  Serial.print(':');
  Serial.println(port);

  // Use WiFiClient class to create TCP connections
  WiFiClient client;

  //클라이언트가 서버에 접속을 시도한다!(5초마다 한다!)
  if (!client.connect(host, port)) {
    Serial.println("connection failed");
    Serial.println("wait 5 sec...");
    delay(5000);
    return;
  }
  //서버와 접속이 성공적으로 진행이된 경우!

  unsigned long dt = millis();
  //서버와 클라이언트가 연결이 보장이된 경우에 while루프가 작동하고
  //연결이 끊어지면 while루프가 멈춘다!
  while(client.connected()){
    //여기안은 클라이언트와 서버가 접속중을때 활성화된다!
    //1초마다 서버에게 메시지를 전송한다!
    if(millis() - dt > 1000){
      dt = millis();
      client.println("연결!");
      
      //client.println("나는 ESP8266이다!!");
      //LED state를 전송하는 규칙
      // 0000 => 모든LED OFF
      // 1100 => 1번2번 LED ON , 3번4번 LED OFF
      // 0011 => 1번2번 LED OFF , 3번4번 LED ON
      String result;
      bool led1_state = digitalRead(led1);
      bool led2_state = digitalRead(led2);
      bool led3_state = digitalRead(led3);
      bool led4_state = digitalRead(led4);
      result += led1_state?'1':'0';
      result += led2_state?'1':'0';
      result += led3_state?'1':'0';
      result += led4_state?'1':'0';
      client.println(result);
    }
    
    //서버에서 전송한 메시지를 클라이언트도 받아야 한다!
    if(client.available()){
      //서버에서 전송한 메시지가 있다!
      String msg = client.readStringUntil('\n');
      //LED제어 규칙
      //10 = 1번 LED OFF
      //11 = 1번 LED ON
      //20 = 2번 LED OFF
      //21 = 2번 LED ON
      char led_num = msg[0];
      char led_state = msg[1];
      if(led_num == '1'){
        if(led_state == '0'){
          digitalWrite(led1,LOW);
          Serial.println("1번 LED를 꺼야겠다..");
        }else if(led_state == '1'){
          digitalWrite(led1,HIGH);
          Serial.println("1번 LED를 켜야겠다!!");
        }
      }else if(led_num == '2'){
        if(led_state == '0'){
          digitalWrite(led2,LOW);
          Serial.println("2번 LED를 꺼야겠다..");
        }else if(led_state == '1'){
          digitalWrite(led2,HIGH);
          Serial.println("2번 LED를 켜야겠다!!");
        }
      }else if(led_num == '3'){
        if(led_state == '0'){
          digitalWrite(led3,LOW);
          Serial.println("3번 LED를 꺼야겠다..");
        }else if(led_state == '1'){
          digitalWrite(led3,HIGH);
          Serial.println("3번 LED를 켜야겠다!!");
        }
      }else if(led_num == '4'){
        if(led_state == '0'){
          digitalWrite(led4,LOW);
          Serial.println("4번 LED를 꺼야겠다..");
        }else if(led_state == '1'){
          digitalWrite(led4,HIGH);
          Serial.println("4번 LED를 켜야겠다!!");
        }
      }
      
      Serial.println(msg);
    }
  }
  client.stop();

}
