/*
  예제 185-3 초음파센서와 서보모터를 함께 연결해서 양방향 MQTT를 테스트하는 예제!
  먼저 사물이터넷보드는 스마트폰쪽으로 초음파센서값을 publish하고,
  스마트폰은 사물인터넷보드 쪽으로 서보모터 각도값을 publish한다!
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Servo.h>

#define trig D3
#define echo D4
#define nservo D5
// Update these with values suitable for your network.

const char* ssid = "~~~~";
const char* password = "~~~~~~";
const char* mqtt_server = "broker.mqtt-dashboard.com";

Servo myservo;
WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  //byte array를 string으로 바꿨다!
  String data;
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    data+=(char)payload[i];
  }
  int degree = data.toInt();

  Serial.print("DEGREE=");
  Serial.println(degree);
  if(degree >= 0 && degree <= 180){
    myservo.write(degree);
  }
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/servo");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(trig,OUTPUT); //trig 발사
  pinMode(echo,INPUT); //echo 받기
  myservo.attach(nservo); //servo가 몇번핀에 연결되었냐?
  myservo.write(0); //0도로 돌아가라!
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 1000) {
    //1초에 한번 하겠다!
    lastMsg = now;
    
    float dist = get_distance();
    if(dist != -1){
       snprintf (msg, MSG_BUFFER_SIZE, "%fcm", dist);
       Serial.print("Publish message: ");
       Serial.println(msg);
       client.publish("nockanda/dist", msg); 
    }
    
  }
}

float get_distance(){
  float distance=0;
  digitalWrite(trig,LOW);
  delayMicroseconds(2);
  digitalWrite(trig,HIGH);
  delayMicroseconds(10);
  digitalWrite(trig,LOW);
  distance = (pulseIn(echo, HIGH, 10000)/29.0)/2; //cm
  //if(distance <= 0.5) return -1;
  //Serial.print(distance);
  //Serial.println("CM");
  return distance;
}
