#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>

#include <ArduinoJson.h>

#include <WebSocketsClient.h>
#include <SocketIOclient.h>

#include <Hash.h>

ESP8266WiFiMulti WiFiMulti;
SocketIOclient socketIO;

//여기부분 바꿔야한다
#define USE_SERIAL Serial

String device_id = "비닐하우스1동004번";
bool sw = false;
unsigned long t = 0;
float cds_ave = 0;
int cds_sample = 0;

void socketIOEvent(socketIOmessageType_t type, uint8_t * payload, size_t length) {
    switch(type) {
        case sIOtype_DISCONNECT:
            USE_SERIAL.printf("[IOc] Disconnected!\n");
            break;
        case sIOtype_CONNECT:
            USE_SERIAL.printf("[IOc] Connected to url: %s\n", payload);

            // join default namespace (no auto join in Socket.IO V3)
            socketIO.send(sIOtype_CONNECT, "/");
            break;
        case sIOtype_EVENT:
        {
            USE_SERIAL.printf("[IOc] get event: %s\n", payload);
            //서버에서 보낸 메시지가 여기 떨어지게된다!
            String request = (char *)payload;

            //request -> JSON -> 역직렬화!
            StaticJsonDocument<96> doc2;
            deserializeJson(doc2, request);
            String event = doc2[0]; // "server_msg"
            String msg = doc2[1]; // "비닐하우스1동001호"
            
            if(event == "server_msg"){
              Serial.println("서버에서 요청이왔다!");
              if(msg == device_id || msg == "전부다"){
                //광센서값을 측정한다!
                //여기서 sending이라는 이벤트가 발생하면 서버에서는 측정중으로 표시한다
                DynamicJsonDocument doc(1024);
                JsonArray array = doc.to<JsonArray>();
                array.add("sending");
                JsonObject param1 = array.createNestedObject();
                param1["device_id"] = device_id;
                String output;
                serializeJson(doc, output);
                socketIO.sendEVENT(output); //메시지가 전송되는 부분
  
                sw = true;
                t = millis(); //시간측정!
                cds_ave = 0;
                cds_sample = 0;
              }else{
                Serial.println("나한테 온게 아니네??");
              }
              
            }
            break;
        }
        case sIOtype_ACK:
            USE_SERIAL.printf("[IOc] get ack: %u\n", length);
            hexdump(payload, length);
            break;
        case sIOtype_ERROR:
            USE_SERIAL.printf("[IOc] get error: %u\n", length);
            hexdump(payload, length);
            break;
        case sIOtype_BINARY_EVENT:
            USE_SERIAL.printf("[IOc] get binary: %u\n", length);
            hexdump(payload, length);
            break;
        case sIOtype_BINARY_ACK:
            USE_SERIAL.printf("[IOc] get binary ack: %u\n", length);
            hexdump(payload, length);
            break;
    }
}

void setup() {
    // USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);

    //Serial.setDebugOutput(true);
    USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

      for(uint8_t t = 4; t > 0; t--) {
          USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
          USE_SERIAL.flush();
          delay(1000);
      }

    // disable AP
    if(WiFi.getMode() & WIFI_AP) {
        WiFi.softAPdisconnect(true);
    }

    //자기자신의 공유기 ID PW
    WiFiMulti.addAP("popcorn", "11213144");

    //WiFi.disconnect();
    while(WiFiMulti.run() != WL_CONNECTED) {
        delay(100);
    }

    String ip = WiFi.localIP().toString();
    USE_SERIAL.printf("[SETUP] WiFi Connected %s\n", ip.c_str());

    //소켓IO서버의 주소와 포트번호!
    socketIO.begin("192.168.0.8", 60000, "/socket.io/?EIO=4");

    // event handler
    socketIO.onEvent(socketIOEvent);
}

unsigned long messageTimestamp = 0;
void loop() {
    socketIO.loop();

    if(sw){
      //서버에서 측정을 하라고 했다!
      //5초간 측정한다!
      //cds_ave += analogRead(A0);
      //cds_sample++; //샘플의 갯수
      if(millis() - t > 5000){
        //시작시간이후 5초가 경과한 경우!
        cds_ave = analogRead(A0); //그냥 5초의 측정값을 대표한다..
        DynamicJsonDocument doc(1024);
        JsonArray array = doc.to<JsonArray>();

        // add evnet name
        // Hint: socket.on('event_name', ....
        array.add("upload");

        // add payload (parameters) for the event
        JsonObject param1 = array.createNestedObject();
        param1["device_id"] = device_id;
        param1["cds"] = cds_ave;

        // JSON to String (serializion)
        String output;
        serializeJson(doc, output);

        // Send event
        socketIO.sendEVENT(output);

        // Print JSON for debugging
        USE_SERIAL.println(output);
        
        
        sw = false;
      }
    }
    /*
    uint64_t now = millis();

    //2초에마다 한번씩 여기 조건문에 걸리게 하는 테크닉
    //2초마다 서버에 데이터를 업로드하는 내용이다!
    if(now - messageTimestamp > 2000) {
        messageTimestamp = now;

        // creat JSON message for Socket.IO (event)
        DynamicJsonDocument doc(1024);
        JsonArray array = doc.to<JsonArray>();

        // add evnet name
        // Hint: socket.on('event_name', ....
        array.add("upload");

        // add payload (parameters) for the event
        JsonObject param1 = array.createNestedObject();
        param1["device_id"] = device_id;
        param1["cds"] = analogRead(A0); //아날로그0번핀에 10bit 아날로그값을 읽어라!

        // JSON to String (serializion)
        String output;
        serializeJson(doc, output);

        // Send event
        socketIO.sendEVENT(output);

        // Print JSON for debugging
        USE_SERIAL.println(output);
    }*/
}