/*
    예제147-2 웹브라우저에서 링크버튼을 통해 날린 값을 LCD에 띄워보자!
*/

#include <ESP8266WiFi.h>
#include "SPI.h"
#include "Adafruit_GFX.h"
#include "Adafruit_ILI9341.h"

#ifndef STASSID
#define STASSID "your-ssid" //와이파이 검색했을때 뜨는 이름
#define STAPSK  "your-password" //패스워드
#endif
#define TFT_DC D9
#define TFT_CS D10

const char* ssid = STASSID;
const char* password = STAPSK;

// Create an instance of the server
// specify the port to listen on as an argument
WiFiServer server(80);
Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC);
void setup() {
  Serial.begin(115200);
  tft.begin();
  tft.setRotation(0);
  tft.setTextColor(ILI9341_YELLOW);
  tft.setTextSize(5);
  // Connect to WiFi network(그냥 한번 출력해보는거)
  Serial.println();
  Serial.println();
  Serial.print(F("Connecting to "));
  Serial.println(ssid);

  //와이파이 접속
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(F("."));
  }
  Serial.println();
  Serial.println(F("WiFi connected"));

  //-----------------여기까지는 와이파이 연결하는 부분....

  // Start the server
  server.begin();
  Serial.println(F("Server started"));

  // Print the IP address
  Serial.println(WiFi.localIP());
}

void loop() {
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  Serial.println(F("new client"));

  client.setTimeout(5000); // default is 1000

  // Read the first line of the request
  String req = client.readStringUntil('\n');
  Serial.println(F("request: "));
  Serial.println(req);

  //서버가 클라이언트로 받은 메시지 전문을 출력
  while (client.available()) {
    // byte by byte is not very efficient
    String text = client.readStringUntil('\n');
    Serial.println(text);
  }

  //  /nockanda/0 = hello world!
  //  /nockanda/1 = nockanda!
  // Match the request
  int val;
  if (req.indexOf(F("/nockanda/0")) != -1) {
    //req의 문자열 패턴에서 /gpio/0 패턴이 검색이 된다면~
    tft.fillScreen(ILI9341_BLACK); //clear
    tft.setCursor(0, 10);
    tft.println("Hello World!");
  } else if (req.indexOf(F("/nockanda/1")) != -1) {
    //req의 문자열 패턴에서 /gpio/1 패턴이 검색이 된다면~
    tft.fillScreen(ILI9341_BLACK); //clear
    tft.setCursor(0, 10);
    tft.println("NOCKANDA!!");
  }

  // read/ignore the rest of the request
  // do not client.flush(): it is for output only, see below
  /*while (client.available()) {
    // byte by byte is not very efficient
    //client.read();
  }*/

  // Send the response to the client
  // it is OK for multiple small client.print/write,
  // because nagle algorithm will group them into one single packet
  client.print(F("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\n"));
  client.print(F("<table border=1 width=400><tr><td colspan=2>Nockanda sample No1</td></tr><tr><td colspan=2>"));
  client.print((val) ? F("high") : F("low"));
  client.print(F("</td></tr><tr><td width=200>"));
  client.print(F("<a href='http://"));
  client.print(WiFi.localIP());
  client.print(F("/nockanda/1'>here</a>"));
  client.print(F("</td><td width=200>"));
  client.print(F("<a href='http://"));
  client.print(WiFi.localIP());
  client.print(F("/nockanda/0'>here</a>"));
  client.print(F("</td></tr></html>"));

  // The client will actually be *flushed* then disconnected
  // when the function returns and 'client' object is destroyed (out-of-scope)
  // flush = ensure written data are received by the other side
  Serial.println(F("Disconnecting from client"));
}