/*
 예제 233-1 사물인터넷보드(wemos d1r1)을 이용한 OPENAPI 예제!
 서울시 권역별 대기환경/미세먼지 데이터를 활용해서 25개 측정소에 대한 대기질 정보를
 시리얼모니터에 출력해보자!
 */
#include <ESP8266WiFi.h>
#include <ArduinoJson.h>

#ifndef STASSID
#define STASSID "~~~~~" //와이파이 검색했을때 뜨는 이름
#define STAPSK  "~~~~~" //패스워드
#endif

const char* ssid = STASSID;
const char* password = STAPSK;

const char* host = "openapi.seoul.go.kr";
const int httpsPort = 8088;

String yourkey = "~~~~~~~~~";

WiFiClient client;
void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.print("connecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  
  Serial.print("connecting to ");
  Serial.println(host);

  //클라이언트와 서버와 커넥트
  if (!client.connect(host, httpsPort)) {
    Serial.println("connection failed");
    return;
  }

  String url = "/"+yourkey+"/json/RealtimeCityAir/1/30/";

  //사물인터넷보드에서 RSS서버로 보내는 요청!
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n\r\n");

  //서버로부터 응답이 있을때까지 대기하겠다..
  //언제까지 기다려야하나요..?
  //timeout!
  unsigned long t = millis(); //생존시간
  while(1){
    if(client.available()) break;
    if(millis() - t > 10000) break;
  }


  //응답이 날라오는 부분!
  Serial.println("request sent");

  while(client.available()){
    String data = client.readStringUntil('\n'); //readline();
    if(data.indexOf("{\"Real") == -1) continue;
    //Serial.println(data);
    DynamicJsonDocument doc(12288);
    deserializeJson(doc, data);

    JsonObject RealtimeCityAir = doc["RealtimeCityAir"];
    int total_count = RealtimeCityAir["list_total_count"]; // 25

    
    for(int i =0;i<total_count;i++){
        JsonObject item = RealtimeCityAir["row"][i];
        String MSRDT = item["MSRDT"]; //측정일시
        String MSRRGN_NM = item["MSRRGN_NM"]; //권역명
        String MSRSTE_NM = item["MSRSTE_NM"]; //측정소명
        String PM10 = item["PM10"]; //미세먼지(㎍/㎥)
        String PM25 = item["PM25"]; //초미세먼지농도(㎍/㎥)
        String O3 = item["O3"]; //오존(ppm)
        String NO2 = item["NO2"]; //이산화질소농도(ppm)
        String CO = item["CO"]; //일산화탄소농도(ppm)
        String SO2 = item["SO2"]; //아황산가스농도(ppm)
        String IDEX_NM = item["IDEX_NM"]; //통합대기환경등급
        String IDEX_MVL = item["IDEX_MVL"]; //통합대기환경지수
        String ARPLT_MAIN = item["ARPLT_MAIN"]; //지수결정물질
        Serial.print(MSRDT);Serial.print("\t");
        Serial.print(MSRRGN_NM);Serial.print("\t");
        Serial.print(MSRSTE_NM);Serial.print("\t");
        Serial.print(PM10);Serial.print("\t");
        Serial.print(PM25);Serial.print("\t");
        Serial.print(O3);Serial.print("\t");
        Serial.print(NO2);Serial.print("\t");
        Serial.print(CO);Serial.print("\t");
        Serial.print(SO2);Serial.print("\t");
        Serial.print(IDEX_NM);Serial.print("\t");
        Serial.print(IDEX_MVL);Serial.print("\t");
        Serial.println(ARPLT_MAIN);
    }
    
  }
  Serial.println("DONE");
}

void loop() {
}