/*
    예제135-3 0.91인치 OLED 디스플레이(ssd1306)을 i2c핀에 연결하자!
    wemos d1r1 보드에 d3(SCL), d4(SDA)에 각각 맞는 핀을 연결하고
    +,-는 5v에 연결하자!
    라이브러리에있는 예제코드를 웹브라우저에서 활용가능하도록 해보자!
    포스트(post)방식으로 라이브러리 예제를 활용해보자!
    라디오버튼과 체크박스를 여러개 만들어서 그값을 OLED에 text로 뛰우기
*/

#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#ifndef STASSID
#define STASSID "your-ssid" //와이파이 검색했을때 뜨는 이름
#define STAPSK  "your-password" //패스워드
#endif

const char* ssid     = STASSID;
const char* password = STAPSK;

ESP8266WebServer server(80);
const int led = LED_BUILTIN;

const String postForms = "<html>\
  <head>\
    <title>ESP8266 Web Server POST handling(nockanda)</title>\
    <style>\
      body { background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; Color: #000088; }\
    </style>\
  </head>\
  <body>\
    <form method=\"post\" enctype=\"application/x-www-form-urlencoded\" action=\"/postform/\">\
      <table border=1 width=500>\
        <tr>\
          <td>\
             <h1>NOCKANDA SSD1306 EXAMPLE!</h1><br>\
          </td>\
        </tr>\
        <tr>\
          <td>\
             testdrawline<input type=\"radio\" name=\"contents\" value=\"0\" checked><br>\
             testdrawrect<input type=\"radio\" name=\"contents\" value=\"1\"><br>\
             testfillrect<input type=\"radio\" name=\"contents\" value=\"2\"><br>\
             testdrawcircle<input type=\"radio\" name=\"contents\" value=\"3\"><br>\
             testfillcircle<input type=\"radio\" name=\"contents\" value=\"4\"><br>\
             testdrawroundrect<input type=\"radio\" name=\"contents\" value=\"5\"><br>\
             testfillroundrect<input type=\"radio\" name=\"contents\" value=\"6\"><br>\
             estdrawtriangle<input type=\"radio\" name=\"contents\" value=\"7\"><br>\
             testfilltriangle<input type=\"radio\" name=\"contents\" value=\"8\"><br>\
             testdrawchar<input type=\"radio\" name=\"contents\" value=\"9\"><br>\
             testdrawstyles<input type=\"radio\" name=\"contents\" value=\"10\"><br>\
             testdrawbitmap<input type=\"radio\" name=\"contents\" value=\"11\"><br>\
          </td>\
        </tr>\
        <tr>\
          <td>\
             check0<input type=\"checkbox\" name=\"check0\" value=\"0\"><br>\
             check1<input type=\"checkbox\" name=\"check1\" value=\"1\"><br>\
             check2<input type=\"checkbox\" name=\"check2\" value=\"2\"><br>\
             check3<input type=\"checkbox\" name=\"check3\" value=\"3\"><br>\
             check4<input type=\"checkbox\" name=\"check4\" value=\"4\"><br>\
          </td>\
        </tr>\
        <tr>\
          <td>\
              <input type=\"text\" name=\"text\" value=\"\">\
          </td>\
        </tr>\
        <tr>\
          <td>\
              <input type=\"submit\" value=\"Submit\">\
          </td>\
        </tr>\
      </table>\  
    </form>\
  </body>\
</html>";

void handleRoot() {
  digitalWrite(led, 1);
  server.send(200, "text/html", postForms);
  digitalWrite(led, 0);
}


//두번째 form에서 처리하는부분
void handleForm() {
  if (server.method() != HTTP_POST) {
    digitalWrite(led, 1);
    server.send(405, "text/plain", "Method Not Allowed");
    digitalWrite(led, 0);
  } else {
    String message = "POST form was:\n";
 
    for (uint8_t i = 0; i < server.args(); i++) {

      message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
      display.clearDisplay();
      display.setTextSize(1);             // Normal 1:1 pixel scale
      display.setTextColor(SSD1306_WHITE);        // Draw white text
      display.setCursor(0,0);             // Start at top-left corner
      display.println(message);
      display.display();
  
    }
    server.send(200, "text/plain", message);
    
  }
}

void handleNotFound() {
  digitalWrite(led, 1);
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
  digitalWrite(led, 0);
}

void setup(void) {
  pinMode(led, OUTPUT);
  digitalWrite(led, 0);
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder started");
  }

  server.on("/", handleRoot);
  server.on("/postform/", handleForm);
  server.onNotFound(handleNotFound);

 if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();

  server.begin();
  Serial.println("HTTP server started");
}

void loop(void) {
  server.handleClient();
}