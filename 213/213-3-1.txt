/*
 예제 213-3-1 사물인터넷보드(wemos d1r1)에 가변저항을 A0에 연결하고
 버튼(택트스위치)을 D5와 D6에 연결했다!
 가변저항을 돌리게되면 아날로그값이 0~1023으로 측정이되는데,
 이값을 MQTT를 이용해서 다른편 클라이언트에게 publish해보라!
 D5를 누르면 정방향으로 회전할 수 있는 값을 publish하고,
 D5을 누르면 역방향으로 회전할 수 있는 값을 publish해보자!
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#define button1 D5 
#define button2 D6
// Update these with values suitable for your network.

const char* ssid = "~~~~~";
const char* password = "~~~~~";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      //client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(button1,INPUT_PULLUP);
  pinMode(button2,INPUT_PULLUP);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

bool pre_button1 = HIGH;
bool pre_button2 = HIGH;
void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  //버튼으로 방향전환하는 부분만 별도로 구현하자!
  bool now_button1 = digitalRead(button1);
  if(pre_button1 == HIGH && now_button1==LOW){
    //버튼1이 눌려진것! (풀업방식이기때문)
    //정방향
    client.publish("nockanda/direct", "+");
  }
  pre_button1 = now_button1;
  bool now_button2 = digitalRead(button2);
  if(pre_button2 == HIGH && now_button2==LOW){
    //버튼2가 눌려진것! (풀업방식이기때문)
    //역방향
    client.publish("nockanda/direct", "-");
  }
  pre_button2 = now_button2;
  
  unsigned long now = millis();
  if (now - lastMsg > 500) {
    lastMsg = now;
   
    int analog = analogRead(A0);
    //int형 analog값을 문자열로 변환해서 msg에 char array로 집어넣는다!
    snprintf (msg, MSG_BUFFER_SIZE, "%d", analog);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("nockanda/power", msg);
  }

}