
#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WebSocketsServer.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Hash.h>
#include <Stepper.h>
const int stepsPerRevolution = 2048;
                                 //{1,2,3,4}={6,5,4,3}
                                 //IN 4  2   3   1
Stepper myStepper(stepsPerRevolution, D3, D5, D4, D6);
#define USE_SERIAL Serial

ESP8266WiFiMulti WiFiMulti;

//웹서버의 포트는 기본 포트인 80번을 사용한다!
ESP8266WebServer server(80);
//웹서버와 웹클라이언트가 뒷구멍으로 주고받는 데이터는 웹소켓에서 81번을 쓴다!
WebSocketsServer webSocket = WebSocketsServer(81);

float degree = 0; //현재 스탭모터의 각도
float target_degree = 0;
bool pre_state = true;
bool now_state = true;

String response = "\
<html>\
<head>\
<meta name=\"viewport\" content=\"width=device-width\">\
<meta charset=\"utf-8\">\
<script>\
  var connection = new WebSocket('ws://'+location.hostname+':81/', ['arduino']);\
  connection.onopen = function () {\
  };\
  connection.onerror = function (error) {\
     console.log('WebSocket Error ', error);\
  };\
  connection.onmessage = function (e) {\
     console.log('Server: ', e.data);\
     var data = JSON.parse(e.data);\
     if(data.type == 'now'){\
       document.getElementById('now').innerText = data.degree;\
       document.getElementById('now').style.fontSize = 50;\ 
     }else if(data.type == 'target'){\
       document.getElementById('target').innerText = data.degree;\
       document.getElementById('target').style.fontSize = 50;\ 
     }else if(data.type == 'msg'){\
       document.getElementById('result').innerText = data.msg;\
       document.getElementById('result').style.fontSize = 50;\ 
     }\
  };\
  function send_msg(){\
     connection.send('녹칸다 포에버!!!');\
  }\
  function stepper_down(){\
     connection.send('D');\
  }\
  function stepper_up(){\
     connection.send('U');\
  }\
</script>\
</head>\
<body>\
<table border=1 width=500>\
  <tr>\
     <td colspan=2><h1>녹칸다의 스탭모터 제어해보기!!</h1></td>\
  </tr>\
  <tr>\
     <td width=50%>목표로 설정된 각도</td>\
     <td width=50% id=target align=center><font size=20>-</font></td>\
  </tr>\
  <tr>\
     <td>현재 진행중인 각도</td>\
     <td id=now align=center><font size=20>-</font></td>\
  </tr>\
    <tr>\
     <td id=result colspan=2>-</td>\
  </tr>\
  <tr align=center>\
     <td><input type=button value=감소 onclick='stepper_down()'></td>\
     <td><input type=button value=증가 onclick='stepper_up()'></td>\
  </tr>\
</table>\
</body>\
</html>";


//클라이언트에서 서버쪽으로 값이 전송되었을때 뭘할거냐?
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            USE_SERIAL.printf("[%u] Disconnected!\n", num);
            break;
        case WStype_CONNECTED: {
            IPAddress ip = webSocket.remoteIP(num);
            USE_SERIAL.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);

            //num = 소켓번호(클라이언트번호)
            String degree2 = "{\"type\":\"target\",\"degree\":"+String(target_degree)+"}";
            webSocket.broadcastTXT(degree2);
            degree2 = "{\"type\":\"now\",\"degree\":"+String(degree)+"}";
            webSocket.broadcastTXT(degree2);
        }
            break;
        case WStype_TEXT:
        //메시지 수신부
            USE_SERIAL.printf("[%u] get Text: %s\n", num, payload);
            //payload[0] 'U' 'D'
            if(payload[0] == 'U'){
              target_degree += 5.625;
              String degree2 = "{\"type\":\"target\",\"degree\":"+String(target_degree)+"}";
              webSocket.broadcastTXT(degree2);
              /*
              degree += 5.625;
              if(degree > 360) degree = degree - 360;
              myStepper.step(32);
              String degree2 = String(degree);
              webSocket.broadcastTXT(degree2);
              */
            }else if(payload[0] == 'D'){
              target_degree -= 5.625;
              String degree2 = "{\"type\":\"target\",\"degree\":"+String(target_degree)+"}";
              webSocket.broadcastTXT(degree2);
              /*
              degree -= 5.625;
              if(degree < 0) degree = degree+360;
              myStepper.step(-32);
              String degree2 = String(degree);
              webSocket.broadcastTXT(degree2);
              */
            }
            break;
    }

}

void setup() {
    //USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);
    myStepper.setSpeed(15);
    //USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

    for(uint8_t t = 4; t > 0; t--) {
        USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
        USE_SERIAL.flush();
        delay(1000);
    }

    //자기자신의 IP공유기 ID비밀번호 집어넣는곳!
    WiFiMulti.addAP("popcorn", "11213144");

    while(WiFiMulti.run() != WL_CONNECTED) {
        delay(100);
    }

    //IP공유기로부터 할당받은 IP주소를 여기서 출력한다!
    USE_SERIAL.println("IP address: ");
    USE_SERIAL.println(WiFi.localIP());
  
    //웹소켓 서버를 연다
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);

    //윈도우10, 안드로이드 안됨..의미없는 기능
    if(MDNS.begin("esp8266")) {
        USE_SERIAL.println("MDNS responder started");
    }

    //웹서버의 index.html
    //웹서버가 클라이언트에게 response해주는 부분!

    server.on("/", []() {
        server.send(200, "text/html", response);
    });

    server.begin();

    // Add service to MDNS
    MDNS.addService("http", "tcp", 80);
    MDNS.addService("ws", "tcp", 81);
}

unsigned long last_10sec = 0;
unsigned int counter = 0;

void loop() {
    unsigned long t = millis();
    webSocket.loop(); //이거 있어야한다!
    server.handleClient(); //이거도 있어야한다!

    if((t - last_10sec) > 100) {
      last_10sec = millis();
      //스탭모터의 현재각도를 목표각도가 되도록 한다
      if(target_degree != degree){
        //스탭모터가 움직여야 하는 상황
        if(target_degree > degree){
          //degree에서 양의방향으로 target으로 가야하고
          myStepper.step(32);
          degree +=5.625;
          String degree2 = "{\"type\":\"now\",\"degree\":"+String(degree)+"}";
          webSocket.broadcastTXT(degree2);
        }else{
          //degree에서 음의방향으로 target으로 향해야하는
          myStepper.step(-32);
          degree -=5.625;
          String degree2 = "{\"type\":\"now\",\"degree\":"+String(degree)+"}";
          webSocket.broadcastTXT(degree2);
        }
        now_state = false;
        if(pre_state == true && now_state == false){
          //이동중
          String msg = "{\"type\":\"msg\",\"msg\":\"이동중!\"}";
          webSocket.broadcastTXT(msg);
        }
      }else{
        now_state = true;
        if(pre_state == false && now_state == true){
          //이동완료!
          String msg = "{\"type\":\"msg\",\"msg\":\"이동완료!\"}";
          webSocket.broadcastTXT(msg);
        }
      }
      pre_state = now_state;
        
    }
    
    //delay(~~~~) 절때 쓰면 안됨!

    //10초간격으로 뭔가 하겠다~
    //if((t - last_10sec) > 1000) {
    //  last_10sec = millis();
    //  String msg = "현재 사물인터넷보드의 시간="+String(millis());
    //  webSocket.broadcastTXT(msg); //모든클라이언트에게 메시지 전송!
        
    //}
}

