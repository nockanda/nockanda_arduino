//11번보드의 코드

#include <ESP8266WiFi.h>
#include <espnow.h>

#define led D3

const byte total_peer = 1;

byte suffle[total_peer];

byte now_peer_index = 0;
byte board[][6] = {
  {0x40,0x91,0x51,0x4E,0x34,0x3F}
};

unsigned long t = 0;
unsigned long led_t = 0;

byte my_id = 11;

struct nockanda{
  int id;
  float temp;
  float humi;
  byte repeater[50];
  byte count;
};

nockanda sensor;

void setup() {
  // put your setup code here, to run once:

  Serial.begin(115200);
  pinMode(led,OUTPUT);
  WiFi.mode(WIFI_STA); //제일 처음 할일! 와이파이모드를 스테이션 모드로!

  //ESPNOW의 기능을 활성화한다!
  if (esp_now_init() != 0) {
    //ESP NOW 시작 실패!
    Serial.println("ESPNOW 실패!");
    return;
  }else{
     //ESP NOW 시작 성공!
     Serial.println("ESPNOW 성공!");
  }

  //지금 이보드의 역할은 주고 받는것을 다하겠다!
  esp_now_set_self_role(ESP_NOW_ROLE_COMBO);

  //나의 슬레이브를 등록해야겠다!
  for(int i = 0;i<total_peer;i++){
    esp_now_add_peer(board[i], ESP_NOW_ROLE_COMBO, 1, NULL, 0);//뒤에 2개는 ID, PW  
  }
  

  //송신완료 콜백함수 등록
  esp_now_register_send_cb(OnDataSent);

  //수신완료 콜백 함수 등록
  esp_now_register_recv_cb(OnDataRecv);

  //무작위 선정을 위한 배열만들기
  for(int i=0;i<total_peer;i++){
    suffle[i] = i;
  }
}

void loop() {
  // put your main code here, to run repeatedly:
  if(digitalRead(led) == HIGH){
    if(millis() - led_t > 1000){
      digitalWrite(led,LOW);
    }
  }
  /*
  if(millis() - t > 2000){
    t = millis();
    //2초마다 한번씩 하겠다!
    esp_now_send(board13, (uint8_t *) &data, sizeof(data));
  }
  */
  /*
  //나의 정보를 다음노드에게 전송해야겠다!
  int no_busy = random(0,4001) - 2000;
  if(millis() - t > (10000+no_busy)){
    t = millis();
    //2초마다 한번씩 하겠다!

    sensor.id = my_id;
    sensor.temp = 20.11;
    sensor.humi = 50.11;
    sensor.count = 0;

    now_peer_index = 0;
    esp_now_send(board[now_peer_index], (uint8_t *) &sensor, sizeof(sensor));
    
  }
  */
}

//송신콜백함수 원형:
void OnDataSent(uint8_t *mac, uint8_t status) {
   //status가 0일때 송신 완료!
   if(status == 0){
      Serial.println("성공적으로 송신했음!");

      digitalWrite(led,HIGH);
      led_t = millis();
   }else{
      Serial.println("송신 실패!!");

      now_peer_index++;
      if(now_peer_index >= total_peer){
        //아무것도 하지 않음!
      }else{
        //후보군에게 메시지를 전송한다!
        esp_now_send(board[suffle[now_peer_index]], (uint8_t *) &sensor, sizeof(sensor));
      }
   }
}


//수신콜백함수 원형:
void OnDataRecv(uint8_t * mac, uint8_t * data, uint8_t len) {
  memcpy(&sensor,data,sizeof(sensor));
  
  byte count = sensor.count;
  sensor.repeater[count] = my_id;
  sensor.count++;

  for(int i =0;i<total_peer;i++){
    int rand_num = random(0,total_peer); //0~n-1
    if(i != rand_num){
      byte temp = suffle[i];
      suffle[i] = suffle[rand_num];
      suffle[rand_num] = temp;
    }
  }
  
  now_peer_index = 0;
  esp_now_send(board[suffle[now_peer_index]], (uint8_t *) &sensor, sizeof(sensor));
}
