#include <SoftwareSerial.h>

SoftwareSerial lora(2,3);

#define data_length 8

#define mode 4

#define SET_ADDH 0x00
#define SET_ADDL 0x01
#define SET_CH 0x47
#define SET_MODE 0b01000011//(fixed transmission) //0b00000011(tranparent transmission)
#define SET_Txpower 0b00000011 //21dBm 0b00000000(30dbm)

byte now_addh = 0;
byte now_addl = 0;
byte now_ch = 0;
byte now_mode = 0;
byte now_txpower = 0;

byte send_buff[4];

byte n_buff[50];
byte n_index = 0;
unsigned long t = 0; //마지막으로 데이터를 수신한시간!

struct{
  int num1;
  float num2;
  char c;
}nockanda;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600); //PC하고 아두이노하고의 통신라인!
  lora.begin(9600); //아두이노하고 로라모듈하고의 통신라인!
  pinMode(mode,OUTPUT);

  digitalWrite(mode,HIGH); //설정모드!
  delay(100);

  Serial.println("E220-900T30D의 설정값입니다");

  Serial.print("ADDH=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x00;
  send_buff[2] = 0x01;
  now_addh = get_config(send_buff);
  Serial.println(now_addh,HEX);

  delay(100);
  Serial.print("ADDL=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x01;
  send_buff[2] = 0x01;
  now_addl = get_config(send_buff);
  Serial.println(now_addl,HEX);

  delay(100);
  Serial.print("CH=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x04;
  send_buff[2] = 0x01;
  now_ch = get_config(send_buff);
  Serial.print(850.125+ now_ch);
  Serial.println("Mhz");

  delay(100);
  Serial.print("mode=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x05;
  send_buff[2] = 0x01;
  now_mode = get_config(send_buff);
  Serial.println(bitRead(now_mode, 6)?"Fixed Transmission":"Transparent Transmission");

  delay(100);
  Serial.print("TXpower=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x03;
  send_buff[2] = 0x01;
  now_txpower = get_config(send_buff);

 
  if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 0){
    Serial.println("30dBm");
  }else if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 1){
    Serial.println("27dBm");
  }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 0){
    Serial.println("24dBm");
  }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 1){
    Serial.println("21dBm");
  }

  //유저가 희망하는(아두이노에 코드로 지정된) 설정값으로 update!
  if(SET_ADDH != now_addh){
    //주소값을 업데이트한다!
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x00;
    send_buff[2] = 0x01;
    send_buff[3] = SET_ADDH; //내가 설정할 값
    Serial.print("ADDH값 수정=");
    Serial.println(set_config(send_buff),HEX);
  }

  if(SET_ADDL != now_addl){
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x01;
    send_buff[2] = 0x01;
    send_buff[3] = SET_ADDL; //내가 설정할 값
    Serial.print("ADDL값 수정=");
    Serial.println(set_config(send_buff),HEX);
  }

  if(SET_CH != now_ch){
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x04;
    send_buff[2] = 0x01;
    send_buff[3] = SET_CH; //내가 설정할 값
    Serial.print("CH값 수정=");
    Serial.print(850.125+ set_config(send_buff));
    Serial.println("Mhz");
  }

  if(SET_MODE != now_mode){
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x05;
    send_buff[2] = 0x01;
    send_buff[3] = SET_MODE; //내가 설정할 값
    Serial.print("MODE값 수정=");
    Serial.println(bitRead(set_config(send_buff), 6)?"Fixed Transmission":"Transparent Transmission");
  }

  if(SET_Txpower != now_txpower){
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x03;
    send_buff[2] = 0x01;
    send_buff[3] = SET_Txpower; //내가 설정할 값
    Serial.print("TXPOWER값 수정=");
    now_txpower = set_config(send_buff);
    if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 0){
      Serial.println("30dBm");
    }else if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 1){
      Serial.println("27dBm");
    }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 0){
      Serial.println("24dBm");
    }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 1){
      Serial.println("21dBm");
    }
  }
  
  delay(1000);
  Serial.println("송수신모드로 전환합니다");
  digitalWrite(mode,LOW); //송수신모드!
  delay(100);
}

void loop() {
  // put your main code here, to run repeatedly:
  //마지막으로 데이터를 수신하고 일정시간 지나도록 추가 메시지가 없다면 버린다!
  if(millis() - t > 100 && n_index > 0){
    Serial.println("인내심이 다되었다!");
    n_index = 0;
  }
  
  if(lora.available()){
    //1.내가 수신해야할 데이터가 7bytes라고 하자!
    //2.제 3자의 디바이스가 전송한 데이터가 7bytes보다 큰경우 어떡할래?(엇박자가 발생한다)
    //3.제 3자의 디바이스가 전송한 데이터가 7bytes보다 작은경우?
    //4.제 3자의 디바이스는 종료문자의 개념이 없다!
    //5.시작문자는 일치하고 종료문자가 없으면서 길이가 짧은 경우!

    //송신기에서 전송한 종료문자는 \r\n이다!
    //하나씩 읽어서 \r\n 패턴이 나올떄까지 읽는다!
    //송신기에서 내의 데이터를 전송할때 시작하는 문자를 붙혀서 보낸다!(!@)
    n_buff[n_index] = lora.read();
    t = millis(); //현재 아두이노의 시간을 기록할 것!
    
    //!@abc\r 추가로 올 데이터가 더 있는가?

    if(data_length+3 < n_index){
      Serial.println("종료문자가 당연히 있어야할 위치에 있지 않은 경우");
     
      n_index=0;
      return;
    }

    if(n_index > 0){
      //시작문자를 확인해야한다!
      if(n_buff[0] != '!' || n_buff[1] != '@'){
        //내가 정한 시작 패턴이 아닌경우!
        Serial.println("시작패턴이 맞지 않습니다!");
        n_index = 0;
        return;
      }
      
      //현재 수신한데이터가 2개이상이다!
      if(n_buff[n_index-1] == '\r' && n_buff[n_index] == '\n'){
        //종료문자를 확인했습니다!
        Serial.println("종료문자를 확인했습니다!");

        //내가 수신한 데이터의 길이가 맞냐?
        if(data_length + 3 != n_index){
          Serial.println("데이터의 길이가 일치하지 않습니다!");
          n_index = 0;
          return;
        }

        message_recived(n_buff,n_index-1);
        /*
        //출력부분
        for(int i = 0;i<n_index;i++){
          Serial.print((char)n_buff[i]);
        }
        Serial.println();
        */
        n_index = 0;
        return;
      }
    }
    
    n_index++;
  }
}

void message_recived(byte* input,int len){
  //시작문자 !@가 포함되어있다!
  Serial.print("메시지 수신=");
  for(int i = 0;i<len;i++){
    Serial.print((char)input[i]);
  }
  Serial.println();
}

byte get_config(byte input[]){
  byte recv_buff[4];
  lora.write(input,3);
  lora.readBytes(recv_buff,4);

  if(recv_buff[0] == input[0] && recv_buff[1] == input[1] && recv_buff[2] == input[2]){
    //Serial.print("ADDH=");
    //Serial.println(recv_buff[3],HEX);
    return recv_buff[3];
  }else{
    return 0xFF;
  }
}

byte set_config(byte input[]){
  byte recv_buff[4];
  lora.write(input,4);
  lora.readBytes(recv_buff,4);

  if(recv_buff[0] == 0xC1 && recv_buff[1] == input[1] && recv_buff[2] == input[2] && recv_buff[3] == input[3]){
    //응답이 정상적으로온 경우
    return recv_buff[3];
  }else{
    //실패!
    return 0xFF;
  }
}
