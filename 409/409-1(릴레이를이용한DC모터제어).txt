
#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WebSocketsServer.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Hash.h>

#define relay D3
#define hallsensor D4

volatile int count = 0;

#define USE_SERIAL Serial

ESP8266WiFiMulti WiFiMulti;

//웹서버의 포트는 기본 포트인 80번을 사용한다!
ESP8266WebServer server(80);
//웹서버와 웹클라이언트가 뒷구멍으로 주고받는 데이터는 웹소켓에서 81번을 쓴다!
WebSocketsServer webSocket = WebSocketsServer(81);

String response = "\
<html>\
<head>\
<meta name=\"viewport\" content=\"width=device-width\">\
<meta charset=\"utf-8\">\
<script>\
  var connection = new WebSocket('ws://'+location.hostname+':81/', ['arduino']);\
  connection.onopen = function () {\
     connection.send('Connect ' + new Date());\
  };\
  connection.onerror = function (error) {\
     console.log('WebSocket Error ', error);\
  };\
  connection.onmessage = function (e) {\
     console.log('Server: ', e.data);\
     var data = JSON.parse(e.data);\
     if(data.type == 'relay'){\
        if(data.value == '0'){\
          document.getElementById('state').innerText = '꺼짐..';\
        }else if(data.value == '1'){\
          document.getElementById('state').innerText = '켜짐!!';\
        }\
     }else if(data.type == 'rpm'){\
        document.getElementById('rpm').innerText = data.value;\
     }\
  };\
  function send_msg(){\
     connection.send('녹칸다 포에버!!!');\
  }\
  function set1(){\
     connection.send('0');\
  }\
  function set2(){\
     connection.send('1');\
  }\
</script>\
</head>\
<body>\
<table border=1 width=500 height=300>\
  <tr align=center>\
     <td colspan=2 id=result>녹칸다의 DC모터 제어하기 예제!</td>\
  </tr>\
  <tr align=center>\
     <td width=50%>현재 릴레이의상태</td>\
     <td width=50% id=state>-</td>\
  </tr>\
  <tr align=center>\
     <td>현재RPM</td>\
     <td id=rpm>-</td>\
  </tr>\
  <tr align=center>\
     <td><input type=button value=끄기 onClick='set1()'></td>\
     <td><input type=button value=켜기 onClick='set2()'></td>\
  </tr>\
</table>\
</body>\
</html>";

//클라이언트에서 서버쪽으로 값이 전송되었을때 뭘할거냐?
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            USE_SERIAL.printf("[%u] Disconnected!\n", num);
            break;
        case WStype_CONNECTED: {
            IPAddress ip = webSocket.remoteIP(num);
            USE_SERIAL.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);

            //릴레이의 초기상태를 여기서 반환한다
            if(digitalRead(relay) == LOW){
              //꺼짐
              webSocket.sendTXT(num, "{\"type\":\"relay\", \"value\":0}");
            }else if(digitalRead(relay) == HIGH){
              //켜짐
              webSocket.sendTXT(num, "{\"type\":\"relay\", \"value\":1}");
            }
            
            //num = 소켓번호(클라이언트번호)
            //webSocket.sendTXT(num, "Connected");
        }
            break;
        case WStype_TEXT:
        //메시지 수신부
            USE_SERIAL.printf("[%u] get Text: %s\n", num, payload);
            //payload
            if(payload[0] == '0'){
              //끄기
              digitalWrite(relay,LOW);
              //릴레이를 껏음을 클라이언트(들)에게 알려준다
              webSocket.broadcastTXT("{\"type\":\"relay\", \"value\":0}");
            }else if(payload[0] == '1'){
              //켜기
              digitalWrite(relay,HIGH);
              //릴레이를 켰음을 클라이언트(들)에게 알려준다
              webSocket.broadcastTXT("{\"type\":\"relay\", \"value\":1}");
            }
            break;
    }

}

void setup() {
    //USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);
    pinMode(relay,OUTPUT);
    pinMode(hallsensor,INPUT);
    attachInterrupt(digitalPinToInterrupt(hallsensor), rpm, FALLING);
    //USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

    for(uint8_t t = 4; t > 0; t--) {
        USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
        USE_SERIAL.flush();
        delay(1000);
    }

    //자기자신의 IP공유기 ID비밀번호 집어넣는곳!
    WiFiMulti.addAP("popcorn", "11213144");

    while(WiFiMulti.run() != WL_CONNECTED) {
        delay(100);
    }

    //IP공유기로부터 할당받은 IP주소를 여기서 출력한다!
    USE_SERIAL.println("IP address: ");
    USE_SERIAL.println(WiFi.localIP());
  
    //웹소켓 서버를 연다
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);

    //윈도우10, 안드로이드 안됨..의미없는 기능
    if(MDNS.begin("esp8266")) {
        USE_SERIAL.println("MDNS responder started");
    }

    //웹서버의 index.html
    //웹서버가 클라이언트에게 response해주는 부분!

    server.on("/", []() {
        server.send(200, "text/html", response);
    });

    server.begin();

    // Add service to MDNS
    MDNS.addService("http", "tcp", 80);
    MDNS.addService("ws", "tcp", 81);
}

unsigned long last_10sec = 0;
unsigned int counter = 0;

void loop() {
    unsigned long t = millis();
    webSocket.loop(); //이거 있어야한다!
    server.handleClient(); //이거도 있어야한다!

    //delay(~~~~) 절때 쓰면 안됨!

    //10초간격으로 뭔가 하겠다~
    
    if((t - last_10sec) > 1000) {
      last_10sec = millis();

      //여기서 카운트를 점검하면 초당 몇번 회전했냐?
      int rpm = count * 60;
      count = 0;
      
      String msg = "{\"type\":\"rpm\", \"value\":"+String(rpm)+"}";
      webSocket.broadcastTXT(msg); //모든클라이언트에게 메시지 전송!
        
    }
    
}

ICACHE_RAM_ATTR void rpm() {
  count++;
}