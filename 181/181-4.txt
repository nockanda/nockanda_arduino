/*
 예제 181-4 온습도센서,미세먼지,이산화탄소센서를 모두 연결해서
 MQTT로 값을 publish해보라!
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
#include <MHZ19.h>
#include "DHT.h"
#define DHTPIN D5
#define DHTTYPE DHT11 
// Update these with values suitable for your network.
DHT dht(DHTPIN, DHTTYPE);

SoftwareSerial ss(D3,D4); //RX TX
MHZ19 mhz(&ss);

const char* ssid = "~~~~";
const char* password = "~~~";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

int measurePin = A0; //Connect dust sensor to Arduino A0 pin
int ledPower = D6;   //Connect 3 led driver pins of dust sensor to Arduino D2
int samplingTime = 280;
int deltaTime = 40;
int sleepTime = 9680;
float voMeasured = 0;
float calcVoltage = 0;
float dustDensity = 0;
void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      //client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(ledPower,OUTPUT);
  dht.begin();
  ss.begin(9600);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    //++value;
    //snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    //Serial.print("Publish message: ");
    //Serial.println(msg);

    float h = dht.readHumidity();
    // Read temperature as Celsius (the default)
    float t = dht.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
  
    Serial.print(F("Humidity: "));
    Serial.print(h);
    Serial.print(F("%  Temperature: "));
    Serial.println(t);
    snprintf (msg, MSG_BUFFER_SIZE, "%f", t);
    client.publish("nockanda/temp", msg);
    snprintf (msg, MSG_BUFFER_SIZE, "%f", h);
    client.publish("nockanda/humi", msg);

    digitalWrite(ledPower,LOW); // power on the LED
    delayMicroseconds(samplingTime);
    voMeasured = analogRead(measurePin); // read the dust value
    delayMicroseconds(deltaTime);
    digitalWrite(ledPower,HIGH); // turn the LED off
    delayMicroseconds(sleepTime);

    // 0 - 3.3V mapped to 0 - 1023 integer values
    // recover voltage
    calcVoltage = voMeasured * (3.3 / 1024.0);
    // linear eqaution taken from http://www.howmuchsnow.com/arduino/airquality/
    // Chris Nafis (c) 2012
    dustDensity = 0.17 * calcVoltage - 0.1;
    Serial.print("Raw Signal Value (0-1023): ");
    Serial.println(voMeasured); //nockanda/VM
    Serial.print(" - Voltage: ");
    Serial.println(calcVoltage); //CV
    Serial.print(" - Dust Density: ");
    if(dustDensity < 0) dustDensity=0;
    Serial.println(dustDensity); // unit: mg/m3 //DD

    snprintf (msg, MSG_BUFFER_SIZE, "%f", voMeasured);
    client.publish("nockanda/VM", msg);
    snprintf (msg, MSG_BUFFER_SIZE, "%f", calcVoltage);
    client.publish("nockanda/CV", msg);
    snprintf (msg, MSG_BUFFER_SIZE, "%f", dustDensity);
    client.publish("nockanda/DD", msg);
    
    MHZ19_RESULT response = mhz.retrieveData();
    if (response == MHZ19_RESULT_OK)
    {
      Serial.print(F("CO2: "));
      Serial.println(mhz.getCO2());
      Serial.print(F("Temperature: "));
      Serial.println(mhz.getTemperature());

      snprintf (msg, MSG_BUFFER_SIZE, "%d", mhz.getCO2());
      client.publish("nockanda/co2", msg);
      snprintf (msg, MSG_BUFFER_SIZE, "%d", mhz.getTemperature());
      client.publish("nockanda/temp2", msg);
    }
    else
    {
      Serial.print(F("Error, code: "));
      Serial.println(response);
    }
  }
}