/*
 예제 218-2-1 (LCD가 달려있는 제어용 사물인터넷(wemos d1r1) 전용 코드)
 릴레이를 ON시키는 버튼을 D5에 연결하고, OFF시키는 버튼을 D6에 연결하라!
 LCD는 I2C통신이 가능한 녀석으로 SDA를 D4에 SCL을 D3에 연결하라!
 버튼을 눌렀을때 릴레이를 작동시킬 수 있는 MQTT 메시지를 publish하고!
 RPM측정값을 subscribe해서 그 결과를 LCD화면에 출력시켜라!
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27,16,2);

#define button1 D5 //ON
#define button2 D6 //OFF
// Update these with values suitable for your network.

const char* ssid = "~~~~~";
const char* password = "~~~~~";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String data;
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    data += (char)payload[i];
  }
  Serial.println();

  String topic2 = topic;

  if(topic2 == "nockanda/relay2"){
    //릴레이작동정보
    String line1 = "RELAY=" + data;
    while(line1.length() < 16){
      line1 += ' ';
    }
    lcd.setCursor(0,0);
    lcd.print(line1);
  }else if(topic2 == "nockanda/rpm"){
    //RPM정보
    String line2 = "RPM=" + data;
    while(line2.length() < 16){
      line2 += ' ';
    }
    lcd.setCursor(0,1);
    lcd.print(line2);
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/relay2"); //두번째보드의 릴레이 작동정보
      client.subscribe("nockanda/rpm"); //세번째보드의 RPM정보
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(button1,INPUT_PULLUP);
  pinMode(button2,INPUT_PULLUP);
  lcd.init();
  lcd.backlight();
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if(digitalRead(button1) == LOW){
    //버튼이 눌려진것!
    client.publish("nockanda/relay", "1");
    Serial.println("ON");
    delay(100);
  }

  if(digitalRead(button2) == LOW){
    //버튼이 눌려진것!
    client.publish("nockanda/relay", "0");
    Serial.println("OFF");
    delay(100);
  }
}