//디바이스4
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ArduinoJson.h>

#define min_pin D3
#define max_pin D4

//와이파이 공유기의 id비밀번호가 들어가야 인터넷에 접속이 가능하겠죠?
#ifndef STASSID
#define STASSID "popcorn"
#define STAPSK  "11213144"
#endif


const char* ssid     = STASSID;
const char* password = STAPSK;

//클라이언트가 서버에 연결을 해야하는데.. 서버의 주소가 필요하다!
const char* host = "192.168.0.8";
//서버의 ip주소는 전체적인 주소의 일부분 상세주소인 포트번호가 필요하다!
const uint16_t port = 60000;

ESP8266WiFiMulti WiFiMulti;

String device_id = "#device4";

//셋업함수는 아두이노가 부팅되면 딱 한번 실행되는부분!
//와이파이 공유기와 연결하는 작업을 진행한다!
void setup() {
  Serial.begin(115200);
  pinMode(min_pin,INPUT);
  pinMode(max_pin,INPUT);
  // We start by connecting to a WiFi network
  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP(ssid, password);

  Serial.println();
  Serial.println();
  Serial.print("Wait for WiFi... ");

  while (WiFiMulti.run() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  delay(500);
}


void loop() {
  //서버주소가 ~~인데 ~~에 연결할거다!
  Serial.print("connecting to ");
  Serial.print(host);
  Serial.print(':');
  Serial.println(port);

  // Use WiFiClient class to create TCP connections
  WiFiClient client;

  //클라이언트가 서버에 접속을 시도한다!(5초마다 한다!)
  if (!client.connect(host, port)) {
    Serial.println("connection failed");
    Serial.println("wait 5 sec...");
    delay(5000);
    return;
  }
  //서버와 접속이 성공적으로 진행이된 경우!

  bool is_accepted = false;

  unsigned long dt = millis();//서버하고 소통하는 스레드
  unsigned long dt2 = millis(); //monitor1
  //서버와 클라이언트가 연결이 보장이된 경우에 while루프가 작동하고
  //연결이 끊어지면 while루프가 멈춘다!
  while(client.connected()){
    //여기안은 클라이언트와 서버가 접속중을때 활성화된다!
    //1초마다 서버에게 메시지를 전송한다!
    if(millis() - dt > 1000){
      dt = millis();
      if(!is_accepted){
        //서버하고 인사를 안한상태
        client.println(device_id);
      }else{
        //서버에게 나 접속하고 있어요~ 라는 데이터를 보낸다
        String output;
        StaticJsonDocument<200> doc;

        doc["from"] = device_id;
        doc["to"] = "#server";
        doc["msg"]["Rssi"] = WiFi.RSSI();
        serializeJson(doc, output);
        client.println(output);
        
      }
    }

    //실제로 원하는 메시지를 전송하는 부분
    if(millis() - dt2 > 1000){
      dt2 = millis();
      String output;
        StaticJsonDocument<600> doc;

        doc["from"] = device_id;
        doc["to"] = "#monitor1";
        doc["dong"] = "하우스1동";
        
        bool max_level = digitalRead(max_pin); //0 or 1
        bool min_level = digitalRead(min_pin);

      /*
        String tank_state = "";
        if(max_level == HIGH && min_level == HIGH){
          //최대수위를 벗어났구나!
          tank_state = "최대";
        }else if(max_level == HIGH && min_level == LOW){
          //존재하지 않는 경우
        }else if(max_level == LOW && min_level == HIGH){
          //물이 적당하게 있는것
          tank_state = "적정";
        }else if(max_level == LOW && min_level == LOW){
          //물이 최소 미만에 있는 경우
          tank_state = "최소";
        }*/

        JsonArray msg = doc.createNestedArray("msg");
        JsonObject object1 = msg.createNestedObject();
        object1["Type"] = "sensor";
        object1["Name"] = "최소수위";
        object1["Value"] = min_level?"감지":"미감지";
        JsonObject object2 = msg.createNestedObject();
        object2["Type"] = "sensor";
        object2["Name"] = "최대수위";
        object2["Value"] = max_level?"감지":"미감지";
        
        serializeJson(doc, output);
        client.println(output);
        //Serial.println(output);
    }
    
    //서버에서 전송한 메시지를 클라이언트도 받아야 한다!
    if(client.available()){
      //서버에서 전송한 메시지가 있다!
      Serial.println("메시지가 수신되었다");
      String msg = client.readStringUntil('\n');
      //서버에서 OK라는 응답을 하게 된다면~
      if(msg == "#OK"){
        Serial.println("서버하고 명함 주고 받는 절차를 마무리했다!");
        is_accepted = true;
      }else{
        //msg : JSON에서 object로 바꾸어줘야한다!
        /*
        StaticJsonDocument<200> doc;

        deserializeJson(doc, msg);
        
        String from = doc["from"]; // "#device2"
        int Led_num = doc["msg"]["Led_num"];
        int Led_state = doc["msg"]["State"];

        if(Led_num == 1){
          digitalWrite(led1,Led_state);
        }else if(Led_num == 2){
          digitalWrite(led2,Led_state);
        }else if(Led_num == 3){
          digitalWrite(led3,Led_state);
        }else if(Led_num == 4){
          digitalWrite(led4,Led_state);
        }
        */
      }
    }
  }
  client.stop();

}
