#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27,20,4);

#define NOCK_CLK 4
#define NOCK_DT 5
#define NOCK_SW 6

#define LCD_LINE 4

#define led1 7
#define led2 8
#define led3 9
#define led4 10

bool pre_CLK = HIGH;
char cmd = '=';

int my_menu_count = 8;

String my_menu[] = {
            "LED1 ON", //0
            "LED1 OFF", //1
            "LED2 ON", //2
            "LED2 OFF", //3
            "LED3 ON", //4
            "LED3 OFF", //5
            "LED4 ON", //6
            "LED4 OFF" //7
};

int index = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  pinMode(NOCK_CLK,INPUT);
  pinMode(NOCK_DT,INPUT);
  pinMode(NOCK_SW,INPUT_PULLUP);

  pinMode(led1,OUTPUT);
  pinMode(led2,OUTPUT);
  pinMode(led3,OUTPUT);
  pinMode(led4,OUTPUT);

  //초기 메뉴를 출력한다(LCD)
  if(my_menu_count >= LCD_LINE){
    lcd.setCursor(0,0); 
    lcd.print("*" + my_menu[0]);
    Serial.println("*" + my_menu[0]);
    for(int i = 1;i<4;i++){
      lcd.setCursor(0,i); 
      lcd.print(" " + my_menu[i]);
      Serial.println(" " + my_menu[i]);
    }
  }else{
    //메뉴에 출력될 갯수가 4보다 작다
    lcd.setCursor(0,0); 
    lcd.print("*" + my_menu[0]);
    Serial.println("*" + my_menu[0]);
    for(int i = 1;i<my_menu_count;i++){
      lcd.setCursor(0,i); 
      lcd.print(" " + my_menu[i]);
      Serial.println(" " + my_menu[i]);
    }
  }
}

void loop() {
  // put your main code here, to run repeatedly:
  check_rotary_encoder();

  if(cmd != '='){
    //어떤 방향이던지 유저가 레버를 돌렸다
    if(cmd == '+'){
      //Serial.println("시계방향으로 회전!");
      index++;
      if(index > my_menu_count-1) index = my_menu_count-1;
    }else if(cmd == '-'){
      //Serial.println("반시계방향으로 회전!");
      index--;
      if(index < 0) index = 0;
    }else if(cmd == '>'){
      //Serial.print("현재 선택된 메뉴는 [");
      //Serial.print(my_menu[index]);
      //Serial.println("] 입니다!");
      if(index == 0){
        digitalWrite(led1,HIGH);
      }else if(index == 1){
        digitalWrite(led1,LOW);
      }else if(index == 2){
        digitalWrite(led2,HIGH);
      }else if(index == 3){
        digitalWrite(led2,LOW);
      }else if(index == 4){
        digitalWrite(led3,HIGH);
      }else if(index == 5){
        digitalWrite(led3,LOW);
      }else if(index == 6){
        digitalWrite(led4,HIGH);
      }else if(index == 7){
        digitalWrite(led4,LOW);
      }
      delay(300);
    }

    //현재까지의 결과를 시리얼 모니터에 출력하는 부분!

    int pagenum = index/LCD_LINE;
    Serial.println("LCD화면 클리어!");
    if((pagenum+1)*LCD_LINE >= my_menu_count){
      //마지막페이지 처리부분
      lcd.clear();
      int lcd_count = 0;
      for(int i = pagenum*LCD_LINE;i<my_menu_count;i++){
        lcd.setCursor(0,lcd_count); //0,1,2,3
        lcd_count++;
        if(i == index){
          lcd.print("*");
          Serial.print("*");
        }else{
          lcd.print(" ");
          Serial.print(" ");
        }
        lcd.print(my_menu[i]);
        Serial.println(my_menu[i]);
      }
    }else{
      //마지막페이지를 제외한 모든 부분
      lcd.clear();
      int lcd_count = 0;
      for(int i = pagenum*LCD_LINE;i<pagenum*LCD_LINE+LCD_LINE;i++){
        //index : (가상으로)선택이 되어있는 번호
        lcd.setCursor(0,lcd_count);
        lcd_count++;
        if(i == index){
          lcd.print("*");
          Serial.print("*");
        }else{
          lcd.print(" ");
          Serial.print(" ");
        }
        lcd.print(my_menu[i]);
        Serial.println(my_menu[i]);
      }
    }
    cmd = '=';
  }

  delay(1);
}

void check_rotary_encoder(){
  if(digitalRead(NOCK_SW) == LOW){
    //로터리엔코더에 스위치가 풀업방식으로 연결!
    cmd = '>';
  }
  
  bool now_CLK = digitalRead(NOCK_CLK);
  if(pre_CLK == HIGH && now_CLK == LOW){
    //폴링엣지
    bool now_DT = digitalRead(NOCK_DT);
    if(now_CLK != now_DT){
      //시계방향
      cmd = '+';
    }else{
      //반시계방향
      cmd = '-';
    }
  }
  pre_CLK = now_CLK;
}
