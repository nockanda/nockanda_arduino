#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <MsTimer2.h>

LiquidCrystal_I2C lcd(0x27,20,4);

#define NOCK_CLK 4
#define NOCK_DT 5
#define NOCK_SW 6

#define LCD_LINE 4


byte leds[] = {7,8,9,10};

bool pre_CLK = HIGH;
char cmd = '=';

int my_menu_count = 5;
int my_menu_sub_count = 3;

String my_menu[] = {
            "LED1", //0
            "LED2", //1
            "LED3", //2
            "LED4", //3
            "ALL LEDS" //4
};
                 //4 //3
String my_menu_sub[][3] = {
  {"TURN OFF","TURN ON","BACK"},
  {"TURN OFF","TURN ON","BACK"},
  {"TURN OFF","TURN ON","BACK"},
  {"TURN OFF","TURN ON","BACK"},
  {"TURN OFF","TURN ON","BACK"}
};

int depth = 0;

int index = 0;
int sub_index = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();
  pinMode(NOCK_CLK,INPUT);
  pinMode(NOCK_DT,INPUT);
  pinMode(NOCK_SW,INPUT_PULLUP);

  for(int i = 0;i<4;i++){
    pinMode(leds[i],OUTPUT);
  }

  //초기 메뉴를 출력한다(LCD)
  if(my_menu_count >= LCD_LINE){
    lcd.setCursor(0,0); 
    lcd.print("*" + my_menu[0]);
    Serial.println("*" + my_menu[0]);
    for(int i = 1;i<4;i++){
      lcd.setCursor(0,i); 
      lcd.print(" " + my_menu[i]);
      Serial.println(" " + my_menu[i]);
    }
  }else{
    //메뉴에 출력될 갯수가 4보다 작다
    lcd.setCursor(0,0); 
    lcd.print("*" + my_menu[0]);
    Serial.println("*" + my_menu[0]);
    for(int i = 1;i<my_menu_count;i++){
      lcd.setCursor(0,i); 
      lcd.print(" " + my_menu[i]);
      Serial.println(" " + my_menu[i]);
    }
  }
}

void loop() {
  // put your main code here, to run repeatedly:
  check_rotary_encoder();

  if(cmd != '='){
    //어떤 방향이던지 유저가 레버를 돌렸다
    if(cmd == '+'){
      //Serial.println("시계방향으로 회전!");
      if(depth == 0){
        index++;
        if(index > my_menu_count-1) index = my_menu_count-1;
      }else if(depth == 1){
        sub_index++;
        if(sub_index > my_menu_sub_count-1) sub_index = my_menu_sub_count-1;
      }
    }else if(cmd == '-'){
      //Serial.println("반시계방향으로 회전!");
      if(depth == 0){
        index--;
        if(index < 0) index = 0;
      }else if(depth == 1){
        sub_index--;
        if(sub_index < 0) sub_index = 0;
      }
    }else if(cmd == '>'){
      if(depth == 0){
        Serial.println("하위메뉴가 선택되었다");
        sub_index = 0;
        depth=1;
      }else if(depth == 1){
        if(sub_index == 2){
          Serial.println("상위메뉴로 이동합니다!");
          depth = 0;
        }else{
          if(index == 0){
            //LED1
            //sub_index 0~1
            if(sub_index == 0){
              MsTimer2::stop();
            }else{
              MsTimer2::stop();
              MsTimer2::set(1000, []{Serial.println("1번메뉴");});
              MsTimer2::start();
            }
          }else if(index == 1){
            //LED2
            if(sub_index == 0){
              MsTimer2::stop();
            }else{
              MsTimer2::stop();
              MsTimer2::set(1000, []{Serial.println("2번메뉴");});
              MsTimer2::start();
            }
          }else if(index == 2){
            //LED3
            if(sub_index == 0){
              MsTimer2::stop();
            }else{
              MsTimer2::stop();
              MsTimer2::set(1000, []{Serial.println("3번메뉴");});
              MsTimer2::start();
            }
          }else if(index == 3){
            //LED4
            if(sub_index == 0){
              MsTimer2::stop();
            }else{
              MsTimer2::stop();
              MsTimer2::set(1000, []{Serial.println("4번메뉴");});
              MsTimer2::start();
            }
          }else if(index == 4){
            //ALL LED
            if(sub_index == 0){
              MsTimer2::stop();
            }else{
              MsTimer2::stop();
              MsTimer2::set(1000, []{Serial.println("5번메뉴");});
              MsTimer2::start();
            }
          }
        }
        
      }
      delay(300);
    }

    //depth라는 변수가 0일때하고 1일때하고 출력해야할 내용이 서로 다르다!
    if(depth == 0){
      //현재까지의 결과를 시리얼 모니터에 출력하는 부분!
      int pagenum = index/LCD_LINE;
      Serial.println("LCD화면 클리어!");
      if((pagenum+1)*LCD_LINE >= my_menu_count){
        //마지막페이지 처리부분
        lcd.clear();
        int lcd_count = 0;
        for(int i = pagenum*LCD_LINE;i<my_menu_count;i++){
          lcd.setCursor(0,lcd_count); //0,1,2,3
          lcd_count++;
          if(i == index){
            lcd.print("*");
            Serial.print("*");
          }else{
            lcd.print(" ");
            Serial.print(" ");
          }
          lcd.print(my_menu[i]);
          Serial.println(my_menu[i]);
        }
      }else{
        //마지막페이지를 제외한 모든 부분
        lcd.clear();
        int lcd_count = 0;
        for(int i = pagenum*LCD_LINE;i<pagenum*LCD_LINE+LCD_LINE;i++){
          //index : (가상으로)선택이 되어있는 번호
          lcd.setCursor(0,lcd_count);
          lcd_count++;
          if(i == index){
            lcd.print("*");
            Serial.print("*");
          }else{
            lcd.print(" ");
            Serial.print(" ");
          }
          lcd.print(my_menu[i]);
          Serial.println(my_menu[i]);
        }
      }//출력부분의 끝
    }else if(depth == 1){
      //현재까지의 결과를 시리얼 모니터에 출력하는 부분!
      int pagenum = sub_index/LCD_LINE;
      Serial.println("LCD화면 클리어!");
      if((pagenum+1)*LCD_LINE >= my_menu_sub_count){
        //마지막페이지 처리부분
        lcd.clear();
        int lcd_count = 0;
        for(int i = pagenum*LCD_LINE;i<my_menu_sub_count;i++){
          lcd.setCursor(0,lcd_count); //0,1,2,3
          lcd_count++;
          if(i == sub_index){
            lcd.print("*");
            Serial.print("*");
          }else{
            lcd.print(" ");
            Serial.print(" ");
          }
          //index 상위메뉴의 인덱스
          //sub_index 하위메뉴의 인덱스
          lcd.print(my_menu_sub[index][i]);
          Serial.println(my_menu_sub[index][i]);
        }
      }else{
        //마지막페이지를 제외한 모든 부분
        lcd.clear();
        int lcd_count = 0;
        for(int i = pagenum*LCD_LINE;i<pagenum*LCD_LINE+LCD_LINE;i++){
          //index : (가상으로)선택이 되어있는 번호
          lcd.setCursor(0,lcd_count);
          lcd_count++;
          if(i == sub_index){
            lcd.print("*");
            Serial.print("*");
          }else{
            lcd.print(" ");
            Serial.print(" ");
          }
          lcd.print(my_menu_sub[index][i]);
          Serial.println(my_menu_sub[index][i]);
        }
      }//출력부분의 끝
    }

    
    cmd = '=';
  }

  delay(1);
}

void check_rotary_encoder(){
  if(digitalRead(NOCK_SW) == LOW){
    //로터리엔코더에 스위치가 풀업방식으로 연결!
    cmd = '>';
  }
  
  bool now_CLK = digitalRead(NOCK_CLK);
  if(pre_CLK == HIGH && now_CLK == LOW){
    //폴링엣지
    bool now_DT = digitalRead(NOCK_DT);
    if(now_CLK != now_DT){
      //시계방향
      cmd = '+';
    }else{
      //반시계방향
      cmd = '-';
    }
  }
  pre_CLK = now_CLK;
}

