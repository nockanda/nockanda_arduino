#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#define IN3 D5 //디지털제어
#define IN4 D4 //디지털제어
#define ENB D3 //아날로그제어

// Update these with values suitable for your network.

const char* ssid = "popcorn";
const char* password = "11213144";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");

  String data;
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    data += (char)payload[i];
  }
  Serial.println();


  //1번 하나의 topic에서 방향과 속도를 동시에 제어한다
  //2번 2개의 topic에 방향과 속도를 각각 제어한다
  String mytopic = topic;
  if(mytopic == "nockanda/direct"){
    //방향(0:정방향 / 1:역방향)
    if((char)payload[0] == '0'){
       //정방향
       digitalWrite(IN3,HIGH);
       digitalWrite(IN4,LOW);
    }else{
      //역방향
      digitalWrite(IN3,LOW);
      digitalWrite(IN4,HIGH);
    }
  }else if(mytopic == "nockanda/power"){
    //속도(0~1023)
    analogWrite(ENB,data.toInt());
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/direct");
      client.subscribe("nockanda/power");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(IN3,OUTPUT);
  pinMode(IN4,OUTPUT);  
  analogWrite(ENB,0);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("nockanda/board1", msg);
  }
  
}