/*
 스테이션모드로 동작하는 코드이다!
 */

#include <ESP8266WiFi.h>

//1602LCD부분
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);  //1602LCD


//미세먼지센서부분
#include "PMS.h"
#include <SoftwareSerial.h>
SoftwareSerial nockanda(D6,D7); //tx=D6, rx=D7
PMS pms(nockanda);
PMS::DATA data;

int on_value = 30; //150 조정필요!
int off_value = 10; //30 조정필요!
int dust_value = 0;
int dust_values[7];
bool is_auto_run = false;
bool is_fan_run = false;

//버튼을 디지털 2번핀에 연결하라!
#define button D5

//모스펫을 3번핀에 연결하라!(아날로그제어)
#define mosfet D10

//모드가 총 4가지가있다
//off - 1단 - 2단 - 3단 - Auto
int mode = 0;

//미세먼지센서를 1초에한번 실행하려면 어떻게 해야하겠는가?
unsigned long t = 0;

//WIFI공유기의 ID비밀번호
#ifndef STASSID
#define STASSID "popcorn"
#define STAPSK  "11213144"
#endif

const char* ssid = STASSID;
const char* password = STAPSK;

// Create an instance of the server
// specify the port to listen on as an argument
WiFiServer server(80);

void setup() {
  Serial.begin(115200);

  pinMode(button,INPUT_PULLUP); //버튼을 연결했다

  //미세먼지센서부분
  nockanda.begin(9600);  //미세먼지-아두이노간
  pms.passiveMode(); 

  //lCD초기화
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0,0);
  lcd.print("DUST=0");
  lcd.setCursor(0,1);
  lcd.print("MOTOR=OFF");

  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print(F("Connecting to "));
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(F("."));
  }
  Serial.println();
  Serial.println(F("WiFi connected"));

  // Start the server
  server.begin();
  Serial.println(F("Server started"));

  // Print the IP address
  Serial.println(WiFi.localIP());
}

void loop() {
  // Check if a client has connected
  WiFiClient client = server.available();
  
  if(is_auto_run){
    //현재 오토모드를 유저가 선택한 상태다!
    if(dust_value > on_value){
      //미세먼지 농도가 상한값을 초과했다
      //공기청정기팬 작동!
      is_fan_run = true;
      analogWrite(mosfet,1023); //팬작동
    }else if(dust_value < off_value){
      //미세먼지 농도가 하한값 미만이다
      //공기청정기 팬 멈춤!
      is_fan_run = false;
      analogWrite(mosfet,0); //팬멈춤
    }
  }

  //버튼이 눌려지면 뭔가 하겠다~~
  if(digitalRead(button) == LOW){
    //버튼이 눌려졌다~
    mode++;
    if(mode > 4){
      mode = 0;
    }

    if(mode == 0){
      //끄면된다
      is_auto_run = false;
      analogWrite(mosfet,0); //0V
      Serial.println("공기청정기를 OFF합니다");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=OFF     ");
    }else if(mode == 1){
      analogWrite(mosfet,800);
      Serial.println("공기청정기를 1단으로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=1DAN    ");
    }else if(mode == 2){
      analogWrite(mosfet,900);
      Serial.println("공기청정기를 2단으로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=2DAN    ");
    }else if(mode == 3){
      analogWrite(mosfet,1023); //5V
      Serial.println("공기청정기를 3단으로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=3DAN    ");
    }else if(mode == 4){
      is_auto_run = true;
      analogWrite(mosfet,0); //일단 멈추고 조건을 본다!
      Serial.println("공기청정기를 Auto모드로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=AUTO    ");
    }
    delay(300); //버튼이 너무 많이 눌려지는것을 막기위해서
  }

  if(millis() - t > 1000){
    t = millis();
    pms.requestRead();
    if (pms.readUntil(data))
    {
      dust_value = data.PM_AE_UG_2_5;

      //7개의 변수를 기억해야한다
      for(int i = 1;i<7;i++){
        //1,2,3,4,5,6
        dust_values[i-1] = dust_values[i];
      }
      //배열에 제일마지막에 있던값이 n-1번째로 옮겨진다
      dust_values[6] = dust_value;
      
      //Serial.print("PM 2.5 (ug/m3): ");
      //Serial.println(dust_value);
      //LCD의 첫번째줄에 미세먼지 농도를 프린트할것
      lcd.setCursor(0,0);
      lcd.print("DUST=");
      lcd.print(dust_value);
      lcd.print("    ");
    }
    else
    {
      Serial.println("No data.");
    }
  }
  
  if (!client) {
    return;
  }

  //request
  Serial.println(F("new client"));

  client.setTimeout(5000); // default is 1000

  //서버에 수신버퍼에 데이터가 기록됨!
  //http 헤더만 여기서 가지고온다
  // "GET /state=off HTTP/1.1"
  String req = client.readStringUntil('\r');
  //Serial.println(F("request: "));
  //Serial.println(req);

  while (client.available()) {
    // byte by byte is not very efficient
    client.read();
  }

  //만약에 request가 아이콘요청이라면 무시해버린다
  if(req.indexOf("favicon.ico") != -1){
    Serial.println("너는 누구냐? 무시해야겠다!");
    return;
  }
  
  if(req.indexOf("/state=off") != -1){
    //OFF
    is_auto_run = false;
    mode=0;
    analogWrite(mosfet,0); //0V
    Serial.println("공기청정기를 OFF합니다");
    lcd.setCursor(0,1);
    lcd.print("MOTOR=OFF     ");
  }else if(req.indexOf("/state=1dan") != -1){
    //1단계작동
    mode=1;
    analogWrite(mosfet,800);
    Serial.println("공기청정기를 1단으로 작동합니다!");
    lcd.setCursor(0,1);
    lcd.print("MOTOR=1DAN    ");
  }else if(req.indexOf("/state=2dan") != -1){
    //2단계작동
    mode=2;
    Serial.println("공기청정기를 2단으로 작동합니다!");
    analogWrite(mosfet,900);
    lcd.setCursor(0,1);
    lcd.print("MOTOR=2DAN    ");
  }else if(req.indexOf("/state=3dan") != -1){
    //3단계작동
    mode=3;
    analogWrite(mosfet,1023); //5V
    Serial.println("공기청정기를 3단으로 작동합니다!");
    lcd.setCursor(0,1);
    lcd.print("MOTOR=3DAN    ");
  }else if(req.indexOf("/state=auto") != -1){
    //오토모드
    mode=4;
    is_auto_run = true;
    analogWrite(mosfet,0); //일단 멈추고 조건을 본다!
    Serial.println("공기청정기를 Auto모드로 작동합니다!");
    lcd.setCursor(0,1);
    lcd.print("MOTOR=AUTO    ");
  }

  //----------------리스폰스
  //7개의 값중에 최대값과 최소값을 측정한다
  int dust_max = dust_values[0];
  for(int i = 0;i<7;i++){
    if(dust_max < dust_values[i]){
      dust_max = dust_values[i];
    }
  }
  int dust_min = dust_max; 
  for(int i = 0;i<7;i++){
    if(dust_min > dust_values[i]){
      dust_min = dust_values[i];
    }
  }
  //현재 공기청정기의 상태를 확인한다
  String ac_state = "";
  if(mode == 0){
    ac_state = "꺼짐(OFF)";
  }else if(mode == 1){
    ac_state = "1단계(약함)";
  }else if(mode == 2){
    ac_state = "2단계(중간)";
  }else if(mode == 3){
    ac_state = "3단계(강함)";
  }else if(mode == 4){
    ac_state = "Auto";
    if(is_fan_run){
      //작동중
      ac_state += "(작동중)";
    }else{
      //멈춤
      ac_state += "(멈춤)";
    }
  }
  

  String response = "<!DOCTYPE html>\
<html>\
<head>\
<meta name=\"viewport\" content=\"width=device-width\">\
<meta charset=\"utf-8\">\
<title>녹칸다의 공기청정기!!</title>\
<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.bundle.min.js\"></script>\
<script type=\"text/javascript\" charset=\"utf-8\" src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js\"></script>\
<style>\
#btn{\
border: 1px solid blue;\
background-color: rgba(0,0,0,0);\
color: blue;\
padding: 5px;\
border-top-left-radius: 5px;\
border-bottom-left-radius: 5px;\
border-top-right-radius: 5px;\
border-bottom-right-radius: 5px;\
margin-right:-4px;\
height:40px;\
}\
table {\
border-collapse: collapse;\
width:500px;\
}\
table, td, th {\
border: solid 1px #cccccc;\
}\
tr {\
height:40px;\
text-align: center;\
}\
td, th {\
padding: 5px;\
}\
.set1 {\
background-color: red;\
color: white;\
text-decoration: underline;\
font-weight: bold;\
}\
#c_head {\
height:30px;\
background-color: #eeeeee;\
}\
#c_width{\
width: 500px;\
}\
</style>\
</head>\
<body>\
<h1>녹칸다의 공기청정기!!</h1>\
<table border=0>\
<tr id=\"c_head\"><th>미세먼지농도</th></tr>\
<tr><td><table border=0>\
<td bgcolor=\"blue\"><font color=white>아주좋음<BR>(0~30)</font></td>\
<td bgcolor=\"green\"><font color=white>좋음<BR>(31~80)</font></td>\
<td bgcolor=\"orange\"><font color=white>나쁨<BR>(81~150)</font></td>\
<td bgcolor=\"red\"><font color=white>아주나쁨<BR>(151~)</font></td></table></td></tr>\
<tr id=\"c_head\"><th>\
<div style=\"width:500px; height:300px;\">\
<canvas id=\"myChart\"></canvas>\
</div>\
</th></tr><tr><td>\
<div style=\"width:500px;\">\
<canvas id=\"myChart2\"></canvas>\
</div>\
</td></tr>\
<tr id=\"c_head\"><th>공기청정기 작동상태</th></tr>\
<tr><td>"\
+ac_state+
"</td></tr>\
<tr><td>\
    <table border=0>\
       <tr>\
           <td><button id=\"btn\" onclick=\"location.href='/state=off' \">끔(OFF)</button></td>\
           <td><button id=\"btn\" onclick=\"location.href='/state=1dan' \">풍량(1단)</button></td>\
           <td><button id=\"btn\" onclick=\"location.href='/state=2dan' \">풍량(2단)</button></td>\
           <td><button id=\"btn\" onclick=\"location.href='/state=3dan' \">풍량(3단)</button></td>\
           <td><button id=\"btn\" onclick=\"location.href='/state=auto' \">오토(AUTO)</button></td>\
       </tr>\
    </table>\
</td></tr>\
<tr><td align=center>\
<button id=\"btn\" onclick=\"location.href='/'\">REFRESH</button>\
</td></tr></table>\
<script>\
var input_value = " + String(dust_value) + ";\
var graph_value;\
if(input_value > 200) graph_value = 200;\
else graph_value = input_value;\
var num = graph_value/200; \
var color;\
if(input_value < 30) color = 'blue';\
else if(input_value < 80) color = 'green';\
else if(input_value < 150) color = 'orange';\
else if(input_value > 151) color ='red';\
var data = { labels: ['dust value'], datasets: [ { data: [num, 1-num], backgroundColor: [color], hoverBackgroundColor: [ color ] }] }; \
var ctx = document.getElementById('myChart').getContext('2d');\
var chart = new Chart(ctx, {\
type: 'doughnut',\
data: data,\
options: { \
   responsive: true, \
   legend: { display: false }, \
   elements: { center: { text: Math.round(num*100), fontStyle: 'Helvetica', sidePadding: 15 } }, \
   maintainAspectRatio : false, \
   cutoutPercentage:70, \
   animation: {\
      onComplete: function () {\
           ctx.textAlign = 'center';\
           ctx.textBaseline = 'middle';\
           ctx.font = '80px Arial';\
           ctx.fillStyle = color;\
           ctx.fillText(input_value, chart.width/2, chart.height-90);\
           ctx.font = '30px Arial';\
           ctx.fillText(\"(㎍/㎥)\", chart.width/2, chart.height-30);\
      }\
   }, \
   rotation: 1 * Math.PI, \
   circumference: 1 * Math.PI } \
});\
var ctx2 = document.getElementById('myChart2').getContext('2d');\
var chart2 = new Chart(ctx2, {\
type: 'line',\
data: {\
labels: ['N-6', 'N-5', 'N-4', 'N-3', 'N-2', 'N-1', 'N'],\
datasets: [\
{\
label: 'DUST',\
backgroundColor: 'transparent',\
borderColor: 'blue',\
data: ["+String(dust_values[0])+", "
+String(dust_values[1])
+", "+String(dust_values[2])
+", "+String(dust_values[3])
+", "+String(dust_values[4])
+", "+String(dust_values[5])
+", "+String(dust_values[6])+"]\
}\
]\
},\
options: {\
      scales: {\
        yAxes: [{\
          ticks: {\
            max: "+String(dust_max+5)+",\
            min: "+String(dust_min-5)+",\
            fontSize : 14,\
          }\
        }]\
      }\
    }\
});\
</script>\
</body>\
</html>";

  
  client.print(F("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n")); //우표
  client.print(response); //편지

  // The client will actually be *flushed* then disconnected
  // when the function returns and 'client' object is destroyed (out-of-scope)
  // flush = ensure written data are received by the other side
  Serial.println(F("Disconnecting from client"));
}