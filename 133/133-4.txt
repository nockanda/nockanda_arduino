/*
 * 133-4 LED 4개를 post방식으로 제어해보자!
    wemos 디지털 2번,3번,4번,5번 포트에 LED를 하나씩 연결한다!
    input text box에 아래와같이 입력하면 LED가 제어되도록 하라!
    (예시) 0000 모두꺼짐 1010 첫번째 세번째만 켜짐
    1111 모두켜짐 0001 마지막것만 켜짐
 */

#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>

#ifndef STASSID
#define STASSID "your-ssid"
#define STAPSK  "your-password"
#endif

const char* ssid     = STASSID;
const char* password = STAPSK;

ESP8266WebServer server(80);

const int led = LED_BUILTIN;
byte led_array[] = {D2,D3,D4,D5};

const String postForms = "<html>\
  <head>\
    <title>ESP8266 Web Server POST handling(nockanda)</title>\
    <style>\
      body { background-color: #cccccc; font-family: Arial, Helvetica, Sans-Serif; Color: #000088; }\
    </style>\
  </head>\
  <body>\
    <h1>POST form data to /postform/</h1><br>\
    <form method=\"post\" enctype=\"application/x-www-form-urlencoded\" action=\"/postform/\">\
      <br>0 = OFF, 1 = ON<br>\
      <input type=\"text\" name=\"led\" value=\"\"><br>\
      <input type=\"submit\" value=\"Submit\">\
    </form>\
  </body>\
</html>";

void handleRoot() {
  digitalWrite(led, 1);
  server.send(200, "text/html", postForms);
  digitalWrite(led, 0);
}


//두번째 form에서 처리하는부분
void handleForm() {
  if (server.method() != HTTP_POST) {
    digitalWrite(led, 1);
    server.send(405, "text/plain", "Method Not Allowed");
    digitalWrite(led, 0);
  } else {
    String message = "NOW LED STATE =";
    for (uint8_t i = 0; i < server.args(); i++) {
      if(server.argName(i) == "led"){
        //server.arg(i) = 0000 1010 1111....
        String number = server.arg(i);
        for(int j =0;j<4;j++){
          if(number[j] == '0'){
            //j번째 LED의 해당되는 코드가 0이면 꺼야지?
            digitalWrite(led_array[j],0);
          }else{
            //j번째 LED의 해당되는 코드가 1이면 켜야지?
            digitalWrite(led_array[j],1);
          }
        }
        message +=number;
      }
      //message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
    }
    server.send(200, "text/plain", message);
    
  }
}

void handleNotFound() {
  digitalWrite(led, 1);
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
  digitalWrite(led, 0);
}

void setup(void) {
  for(int i = 0;i<4;i++){
    pinMode(led_array[i],OUTPUT);
  }
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder started");
  }

  server.on("/", handleRoot);
  server.on("/postform/", handleForm);
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");
}

void loop(void) {
  server.handleClient();
}