/*
 * 86-1예제 IR리모트와 MP3예제를 잘 버무려보자!
 * 리모컨 버튼을 누르면 지정된 음성파일이 재생되도록하자
 * 음성파일은 별도로 압축해서 올려드림!
 */
/*
    FF30CF 1
    FF18E7 2
    FF7A85 3
    FF10EF 4
    FF38C7 5
    FF5AA5 6
    FF42BD 7
    FF4AB5 8
    FF52AD 9
    FF6897 0
    FF9867 100+
    FFB04F 200+
    FFE01F -
    FFA857 +
    FF906F EQ
    FF22DD |◀◀
    FF02FD ▶▶|
    FFC23D ▶||
    FFA25D CH-
    FF629D CH
    FFE21D CH+
    */

#include <IRremote.h>
#include <SoftwareSerial.h>
#include <DFMiniMp3.h>

class Mp3Notify
{
public:
  static void PrintlnSourceAction(DfMp3_PlaySources source, const char* action)
  {
    if (source & DfMp3_PlaySources_Sd) 
    {
        Serial.print("SD Card, ");
    }
    if (source & DfMp3_PlaySources_Usb) 
    {
        Serial.print("USB Disk, ");
    }
    if (source & DfMp3_PlaySources_Flash) 
    {
        Serial.print("Flash, ");
    }
    Serial.println(action);
  }
  static void OnError(uint16_t errorCode)
  {
    // see DfMp3_Error for code meaning
    Serial.println();
    Serial.print("Com Error ");
    Serial.println(errorCode);
  }
  static void OnPlayFinished(DfMp3_PlaySources source, uint16_t track)
  {
    Serial.print("Play finished for #");
    Serial.println(track);  
  }
  static void OnPlaySourceOnline(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "online");
  }
  static void OnPlaySourceInserted(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "inserted");
  }
  static void OnPlaySourceRemoved(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "removed");
  }
};

int RECV_PIN = 4;

IRrecv irrecv(RECV_PIN);

decode_results results;
SoftwareSerial secondarySerial(2, 3); // RX, TX
DFMiniMp3<SoftwareSerial, Mp3Notify> mp3(secondarySerial);

void waitMilliseconds(uint16_t msWait)
{
  uint32_t start = millis();
  
  while ((millis() - start) < msWait)
  {
    // calling mp3.loop() periodically allows for notifications 
    // to be handled without interrupts
    mp3.loop(); 
    delay(1);
  }
}

void setup()
{
  Serial.begin(9600);
  // In case the interrupt driver crashes on setup, give a clue
  // to the user what's going on.
  //Serial.println("Enabling IRin");
  irrecv.enableIRIn(); // Start the receiver
  //Serial.println("Enabled IRin");
  mp3.begin();
  mp3.setVolume(30);
  //0011.mp3
  mp3.playMp3FolderTrack(11);
  waitMilliseconds(2000);
}

void loop() {
  if (irrecv.decode(&results)) {
    //녹칸다가 가진리모컨은 3바이트로 ID가 입력이되는데
    //오류가 나면 3바이트보다 작거나 큰값이 입력이 된다.
    //그러므로 3바이트값만 취하면 나름대로 필터링이 된다고 보고 만든 코드이다.
    if(results.value <= 0xFFFFFF && results.value > 0xFFFFF){
      //실질적으로 윈폼으로 데이터를 보내야 할 블락
      //Serial.println(results.value,HEX);    
      if(results.value == 0xFF30CF){
        //1번
        mp3.playMp3FolderTrack(1);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF18E7){
        //2번
        mp3.playMp3FolderTrack(2);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF7A85){
        //3번
        mp3.playMp3FolderTrack(3);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF10EF){
        //4번
        mp3.playMp3FolderTrack(4);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF38C7){
        //5번
        mp3.playMp3FolderTrack(5);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF5AA5){
        //6번
        mp3.playMp3FolderTrack(6);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF42BD){
        //7번
        mp3.playMp3FolderTrack(7);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF4AB5){
        //8번
        mp3.playMp3FolderTrack(8);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF52AD){
        //9번
        mp3.playMp3FolderTrack(9);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF6897){
        //0번
        mp3.playMp3FolderTrack(10);
        waitMilliseconds(2000);
      }else if(results.value == 0xFF9867){
        //100번
        mp3.playMp3FolderTrack(11);
        waitMilliseconds(2000);
      }else if(results.value == 0xFFB04F){
        //200번
        mp3.playMp3FolderTrack(12);
        waitMilliseconds(2000);
      }
    }
    irrecv.resume(); // Receive the next value
  }
  delay(100);
}
