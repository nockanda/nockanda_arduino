#include <ESP8266WiFi.h>
#include <PubSubClient.h>

//1602LCD부분
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);  //1602LCD


//미세먼지센서부분
#include "PMS.h"
#include <SoftwareSerial.h>
SoftwareSerial nockanda(D6,D7); //tx=D6, rx=D7
PMS pms(nockanda);
PMS::DATA data;

int on_value = 30; //150 조정필요!
int off_value = 10; //30 조정필요!
int dust_value = 0;
bool is_auto_run = false;
bool is_fan_run = false;

//버튼을 디지털 2번핀에 연결하라!
#define button D5

//모스펫을 3번핀에 연결하라!(아날로그제어)
#define mosfet D10

//모드가 총 4가지가있다
//off - 1단 - 2단 - 3단 - Auto
int mode = 0;

//미세먼지센서를 1초에한번 실행하려면 어떻게 해야하겠는가?
unsigned long t = 0;

const char* ssid = "popcorn";
const char* password = "11213144";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}


//수신한 메시지 가지고 무엇을 할것인가?
void callback(char* topic, byte* payload, unsigned int length) {
  String mytopic = topic;
  String mypayload = "";
  for(int i = 0;i<length;i++){
    mypayload += (char)payload[i];
  }
  if(mytopic == "nockanda402/aircleaner/control"){
    //mypayload = {0,1,2,3,4}
    if(mypayload == "0"){
      mode = 0;
      is_auto_run = false;
      analogWrite(mosfet,0); //0V
      Serial.println("공기청정기를 OFF합니다");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=OFF     ");
    }else if(mypayload == "1"){
      mode = 1;
      analogWrite(mosfet,800);
      Serial.println("공기청정기를 1단으로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=1DAN    ");
    }else if(mypayload == "2"){
      mode = 2;
      analogWrite(mosfet,900);
      Serial.println("공기청정기를 2단으로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=2DAN    ");
    }else if(mypayload == "3"){
      mode = 3;
      analogWrite(mosfet,1023); //5V
      Serial.println("공기청정기를 3단으로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=3DAN    ");
    }else if(mypayload == "4"){
      mode = 4;
      is_auto_run = true;
      analogWrite(mosfet,0); //일단 멈추고 조건을 본다!
      Serial.println("공기청정기를 Auto모드로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=AUTO    ");
    }
  }else if(mytopic == "nockanda402/aircleaner/setting"){
    //세팅하는 토픽!
    //Serial.print("설정값지정!=");
    //Serial.println(mypayload);
    int comma_pos = mypayload.indexOf(',');
    String value1 = mypayload.substring(0,comma_pos);
    String value2 = mypayload.substring(comma_pos+1,mypayload.length());
    Serial.println(value1);
    Serial.println(value2);
    off_value = value1.toInt();
    on_value = value2.toInt();
    
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      //내가 수신하고자 하는 TOPIC을 등록한다!
      client.subscribe("nockanda402/aircleaner/control");
      client.subscribe("nockanda402/aircleaner/setting");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(button,INPUT_PULLUP); //버튼을 연결했다

  //미세먼지센서부분
  nockanda.begin(9600);  //미세먼지-아두이노간
  pms.passiveMode(); 

  //lCD초기화
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0,0);
  lcd.print("DUST=0");
  lcd.setCursor(0,1);
  lcd.print("MOTOR=OFF");
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  //혹시~~ MQTT서버하고 연결이 끊어지면 다시 연결한다!
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if(is_auto_run){
    //현재 오토모드를 유저가 선택한 상태다!
    if(dust_value > on_value){
      //미세먼지 농도가 상한값을 초과했다
      //공기청정기팬 작동!
      is_fan_run = true;
      analogWrite(mosfet,1023); //팬작동
    }else if(dust_value < off_value){
      //미세먼지 농도가 하한값 미만이다
      //공기청정기 팬 멈춤!
      is_fan_run = false;
      analogWrite(mosfet,0); //팬멈춤
    }
  }

  //버튼이 눌려지면 뭔가 하겠다~~
  if(digitalRead(button) == LOW){
    //버튼이 눌려졌다~
    mode++;
    if(mode > 4){
      mode = 0;
    }

    if(mode == 0){
      //끄면된다
      is_auto_run = false;
      analogWrite(mosfet,0); //0V
      Serial.println("공기청정기를 OFF합니다");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=OFF     ");
    }else if(mode == 1){
      analogWrite(mosfet,800);
      Serial.println("공기청정기를 1단으로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=1DAN    ");
    }else if(mode == 2){
      analogWrite(mosfet,900);
      Serial.println("공기청정기를 2단으로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=2DAN    ");
    }else if(mode == 3){
      analogWrite(mosfet,1023); //5V
      Serial.println("공기청정기를 3단으로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=3DAN    ");
    }else if(mode == 4){
      is_auto_run = true;
      analogWrite(mosfet,0); //일단 멈추고 조건을 본다!
      Serial.println("공기청정기를 Auto모드로 작동합니다!");
      lcd.setCursor(0,1);
      lcd.print("MOTOR=AUTO    ");
    }
    delay(300); //버튼이 너무 많이 눌려지는것을 막기위해서
  }

  //1초에한번 미세먼지 농도를 측정하는 부분!
  if(millis() - t > 1000){
    t = millis();
    pms.requestRead();
    if (pms.readUntil(data))
    {
      //미세먼지갑1, 미세먼지값2, 미세먼지값3, 모드, 팬상태, 하한값, 상한값
      dust_value = data.PM_AE_UG_2_5; //PM2.5
      int pm10 = data.PM_AE_UG_1_0;
      int pm100 = data.PM_AE_UG_10_0;
      String mode_string = "";
      if(mode == 0) mode_string = "꺼짐(OFF)";
      else if(mode == 1) mode_string = "1단(약함)";
      else if(mode == 2) mode_string = "2단(중간)";
      else if(mode == 3) mode_string = "3단(강함)";
      else if(mode == 4) mode_string = "Auto모드";

      String fan_string = "";
      if(is_fan_run) fan_string ="켜짐";
      else fan_string ="꺼짐";
 
      //mode
      //is_fan_run
      //on_value(상한값)
      //off_value(하한값)
      String rawdata = String(pm10) + "," 
      + String(dust_value) + ","
      + String(pm100) + ","
      + mode_string + ","
      + fan_string + ","
      + String(off_value) + ","
      + String(on_value);
      client.publish("nockanda402/aircleaner/rawdata", rawdata.c_str());
      
      //LCD의 첫번째줄에 미세먼지 농도를 프린트할것
      lcd.setCursor(0,0);
      lcd.print("DUST=");
      lcd.print(dust_value);
      lcd.print("    ");
    }
    else
    {
      Serial.println("No data.");
    }
  }
}