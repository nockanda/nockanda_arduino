/*
 * 131-2 플스2 조이스틱가지고 하는 녹칸다의 호작질
 * 조이스틱의 방향키를 이용해서 스탭모터를 제어해보자
 * IN4(7) IN2(5) IN3(6) IN1(4)
 *   ↑
 * ←  →   
 *   ↓
 * 방향키가지고 컨트롤해보자!
 * 좌우는 스탭모터의 회전방향을 결정한다
 * 위아래는 한스탭의 양을 조절한다(위는 증가, 아래는 감소)
 */
#include <PS2X_lib.h>
#include <Stepper.h>
#define STEPS 2048

#define PS2_DAT        13  //14    
#define PS2_CMD        11  //15
#define PS2_SEL        10  //16
#define PS2_CLK        12  //17
#define pressures   false
#define rumble      false
             //IN4(7) IN2(5) IN3(6) IN1(4)
Stepper stepper(STEPS, 7, 5, 6, 4);

PS2X ps2x;
int error = 0;
byte vibrate = 0;

int mystep = 32; 

void setup() {
  // put your setup code here, to run once:
  Serial.begin(57600);
  delay(300);
  stepper.setSpeed(10);
  error = ps2x.config_gamepad(PS2_CLK, PS2_CMD, PS2_SEL, PS2_DAT, pressures, rumble);
}

void loop() {
  if(error == 1) //skip loop if no controller found
    return;
  // put your main code here, to run repeatedly:
  ps2x.read_gamepad(false, vibrate); //read controller and set large motor to spin at 'vibrate' speed
    
    if(ps2x.Button(PSB_START))         //will be TRUE as long as button is pressed
      Serial.println("Start is being held");
    if(ps2x.Button(PSB_SELECT))
      Serial.println("Select is being held");      

    if(ps2x.Button(PSB_PAD_UP)) {      //will be TRUE as long as button is pressed
      Serial.println("Up held this hard: ");
      mystep += 32;
      if(mystep > 128){
        mystep = 128;
      }
      //Serial.println(ps2x.Analog(PSAB_PAD_UP), DEC);
    }
    if(ps2x.Button(PSB_PAD_RIGHT)){
      Serial.println("Right held this hard: ");
      stepper.step(mystep);
      //Serial.println(ps2x.Analog(PSAB_PAD_RIGHT), DEC);
    }
    if(ps2x.Button(PSB_PAD_LEFT)){
      Serial.println("LEFT held this hard: ");
      stepper.step(-mystep);
      //Serial.println(ps2x.Analog(PSAB_PAD_LEFT), DEC);
    }
    if(ps2x.Button(PSB_PAD_DOWN)){
      Serial.println("DOWN held this hard: ");
      mystep -= 32;
      if(mystep < 32){
        mystep = 32;
      }
      //Serial.println(ps2x.Analog(PSAB_PAD_DOWN), DEC);
    }   

    vibrate = ps2x.Analog(PSAB_CROSS);  //this will set the large motor vibrate speed based on how hard you press the blue (X) button
    if (ps2x.NewButtonState()) {        //will be TRUE if any button changes state (on to off, or off to on)
      if(ps2x.Button(PSB_L3))
        Serial.println("L3 pressed");
      if(ps2x.Button(PSB_R3))
        Serial.println("R3 pressed");
      if(ps2x.Button(PSB_L2))
        Serial.println("L2 pressed");
      if(ps2x.Button(PSB_R2))
        Serial.println("R2 pressed");
      if(ps2x.Button(PSB_TRIANGLE))
        Serial.println("Triangle pressed");        
    }

    if(ps2x.ButtonPressed(PSB_CIRCLE))               //will be TRUE if button was JUST pressed
      Serial.println("Circle just pressed");
    if(ps2x.NewButtonState(PSB_CROSS))               //will be TRUE if button was JUST pressed OR released
      Serial.println("X just changed");
    if(ps2x.ButtonReleased(PSB_SQUARE))              //will be TRUE if button was JUST released
      Serial.println("Square just released");     

    if(ps2x.Button(PSB_L1) || ps2x.Button(PSB_R1)) { //print stick values if either is TRUE
      Serial.print("Stick Values:");
      Serial.print(ps2x.Analog(PSS_LY), DEC); //Left stick, Y axis. Other options: LX, RY, RX  
      Serial.print(",");
      Serial.print(ps2x.Analog(PSS_LX), DEC); 
      Serial.print(",");
      Serial.print(ps2x.Analog(PSS_RY), DEC); 
      Serial.print(",");
      Serial.println(ps2x.Analog(PSS_RX), DEC); 
    }  

  delay(50); 
}