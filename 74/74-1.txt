/*
 * ----------------------------------------------------------------------------
 * This is a MFRC522 library example; see https://github.com/miguelbalboa/rfid
 * for further details and other examples.
 * 
 * NOTE: The library file MFRC522.h has a lot of useful info. Please read it.
 * 
 * Released into the public domain.
 * ----------------------------------------------------------------------------
 * Example sketch/program which will try the most used default keys listed in 
 * https://code.google.com/p/mfcuk/wiki/MifareClassicDefaultKeys to dump the
 * block 0 of a MIFARE RFID card using a RFID-RC522 reader.
 * 
 * Typical pin layout used:
 * -----------------------------------------------------------------------------------------
 *             MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino
 *             Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro
 * Signal      Pin          Pin           Pin       Pin        Pin              Pin
 * -----------------------------------------------------------------------------------------
 * RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST
 * SPI SS      SDA(SS)      10            53        D10        10               10
 * SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16
 * SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14
 * SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15
 *
 */
/*
 * 예제74-1(62-1코드와 69-1코드를를 기반으로 함)
 * 삼단인증 시스템에 MP3모듈을 추가해서 음성으로 결과를 안내해보자!
 * RFID모듈(3.3V)은 상단에 있는 주석부분을 참고해서 연결하시오
 * 4x4키패드는 정면을 기준으로 좌측부터 우측방향으로
 * R1 R2 R3 R4 C1 C2 C3 C4이고 연결핀은 아래와 같다
 * A0 A1 A2 A3 A4 A5 D7 D8
 * 지문인식모듈(3.3V)의 경우 소프트웨어 시리얼을 사용하고
 * 지문인식모듈자체의 RX핀을 D3에 RX핀을 D2에 연결했다.
 * MP3모듈(5V)은 하드웨어 시리얼을 사용하고
 * 모듈자체의 RX핀을 D1에 연결하고 TX핀을 D0에 연결했다.
 * 그리고 MP3모듈의 RX, TX핀과 아두이노의 D1과 D0사이에
 * 각각 1k옴 저항을 연결했다.
 * 비밀번호 입력과정을 출력하기 위한 FND모듈은 TM1637모듈을 사용했다.
 * 5V에 연결하면되고 CLK핀을 D4에 DIO핀을 D5에 연결했다.
 * 5개의 모듈이 합체를 해서 소규모 프로젝트가 완성되었다!
 * 음성 MP3파일은 별도로 블로그에 업로드할 예정!
 */
#include <SPI.h>
#include <MFRC522.h>
#include <Keypad.h>
#include <Adafruit_Fingerprint.h>
#include <Arduino.h>
#include <TM1637Display.h>
#include <DFMiniMp3.h>

#define CLK 4
#define DIO 5
#define RST_PIN         9           // Configurable, see typical pin layout above
#define SS_PIN          10          // Configurable, see typical pin layout above
#define SystemPW 1234
String tag1 = " a7 3c bb 7a"; //열쇠고리
String tag2 = " d4 6d a2 2a"; //1
String tag3 = " 4d 94 a0 3d"; //2
String tag4 = " 1c 75 84 3d"; //3
String tag5 = " bf 5f a0 3d"; //4
String tag6 = " 17 83 a0 3d"; //5
String tag7 = " 6b 08 a0 3d"; //6
String RFIDTAGS[7] = {tag1,tag2,tag3,tag4,tag5,tag6,tag7};
int FINGERS[7] = {1,2,3,4,5,6,7}; //실등록지문은 1(엄지),2(검지)

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
//define the cymbols on the buttons of the keypads
char hexaKeys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {A0, A1, A2, A3}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {A4, A5, 7, 8}; //connect to the column pinouts of the keypad

class Mp3Notify
{
public:
  static void PrintlnSourceAction(DfMp3_PlaySources source, const char* action)
  {
    if (source & DfMp3_PlaySources_Sd) 
    {
        Serial.print("SD Card, ");
    }
    if (source & DfMp3_PlaySources_Usb) 
    {
        Serial.print("USB Disk, ");
    }
    if (source & DfMp3_PlaySources_Flash) 
    {
        Serial.print("Flash, ");
    }
    Serial.println(action);
  }
  static void OnError(uint16_t errorCode)
  {
    // see DfMp3_Error for code meaning
    Serial.println();
    Serial.print("Com Error ");
    Serial.println(errorCode);
  }
  static void OnPlayFinished(DfMp3_PlaySources source, uint16_t track)
  {
    Serial.print("Play finished for #");
    Serial.println(track);  
  }
  static void OnPlaySourceOnline(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "online");
  }
  static void OnPlaySourceInserted(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "inserted");
  }
  static void OnPlaySourceRemoved(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "removed");
  }
};

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 
SoftwareSerial mySerial(2, 3); //rx tx
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
TM1637Display display(CLK, DIO);
DFMiniMp3<HardwareSerial, Mp3Notify> mp3(Serial);
/*
 * Initialize.
 */
void setup() {
    //Serial.begin(9600);         // Initialize serial communications with the PC
    //while (!Serial);            // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
    SPI.begin(); 
    
    mfrc522.PCD_Init();         // Init MFRC522 card
    finger.begin(57600);
    delay(5);
    display.setBrightness(0x0f);
    mp3.begin();
    mp3.setVolume(30);
    mp3.playMp3FolderTrack(1);
  waitMilliseconds(5000);
}
void waitMilliseconds(uint16_t msWait)
{
  uint32_t start = millis();
  
  while ((millis() - start) < msWait)
  {
    // calling mp3.loop() periodically allows for notifications 
    // to be handled without interrupts
    mp3.loop(); 
    delay(1);
  }
}
/*
 * Helper routine to dump a byte array as hex values to Serial.
 */
String dump_byte_array(byte *buffer, byte bufferSize) {
  String output = "";
    for (byte i = 0; i < bufferSize; i++) {
        //Serial.print(buffer[i] < 0x10 ? " 0" : " ");
        //Serial.print(buffer[i], HEX);
        output += buffer[i] < 0x10 ? " 0" : " ";
        output += String(buffer[i], HEX);
    }
    return output;
}

//전체 tags에서 태깅한 태그를 검색하는 함수
//단 등록이 안된 카드를 태깅하는 경우는 없다고 가정함
int search_tag(String input_tag){
  int i=0; 
  for(i = 0;i<7;i++){
    if(RFIDTAGS[i]==input_tag){
      break;
    }
  }
  return i;
}
int search_finger(int fingerid){
  int i=0; 
  for(i = 0;i<7;i++){
    if(FINGERS[i]==fingerid){
      break;
    }
  }
  return i;
}

byte state = 0; //기본상태는 0
unsigned long passwd = 0;
unsigned long stopwatch = 0;
byte rfidindex = 0;
void loop() {
    // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
   if(state == 0){
     //아무것도 인증안되서 놀고있는 상태
     char customKey = customKeypad.getKey();
     display.showNumberDec(passwd, false);
     if (customKey >= '0' && customKey <= '9'){
        //customKey - '0'  
        passwd = passwd*10 + (customKey-'0');
        if(passwd > 9999) passwd = passwd % 10000;

         
        //Serial.println(passwd);
     }else if(customKey == '#'){
        if(passwd == SystemPW){
          //비번OK
          //Serial.println("비번인증성공!");
          mp3.playMp3FolderTrack(4);
          waitMilliseconds(2000);
          state = 1;
          stopwatch = millis();
        }else{
          //비번NO
          //Serial.println("비번인증실패!");
          mp3.playMp3FolderTrack(6);
          waitMilliseconds(2000);
        }
        passwd = 0; //PW초기화
     }
   }else if(state ==1){
     //비번이 인증된 직후(RFID 인식모드)
     unsigned long rfidtime = millis()-stopwatch;
     if(rfidtime > 10000){
        //Serial.println("인식시간초과");
        mp3.playMp3FolderTrack(6);
        waitMilliseconds(2000);
        state = 0;
        return;
     }
    if ( ! mfrc522.PICC_IsNewCardPresent())
        return;

    if ( ! mfrc522.PICC_ReadCardSerial())
        return;

    //RFID 리딩이 성공한경우
      //Serial.print(F("Card UID:"));
      String uid = dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
      //Serial.println(search_obj(uid));
      //Serial.println("RFID인증이 되었다");
      mp3.playMp3FolderTrack(3);
      waitMilliseconds(2000);
      rfidindex = search_tag(uid);
      state=2;
      stopwatch = millis();
   }else if(state ==2){
     //RFID가 인증된 직후(지문인식모드)
     unsigned long fingertime = millis()-stopwatch;
     if(fingertime > 10000){
        //Serial.println("인식시간초과");
        mp3.playMp3FolderTrack(6);
        waitMilliseconds(2000);
        state = 0;
        return;
     }
     uint8_t p = finger.getImage();
     if (p != FINGERPRINT_OK)  return;

     p = finger.image2Tz();
     if (p != FINGERPRINT_OK)  return;

     p = finger.fingerFastSearch();
     if (p != FINGERPRINT_OK){
        //Serial.println("미등록 지문입니다");
        mp3.playMp3FolderTrack(6);
        waitMilliseconds(2000);
         return;
     }
     int fingerid = search_finger(finger.fingerID);
     //Serial.print("지문인덱스=");
     //Serial.println(fingerid);
     //Serial.print("rfid인덱스=");
     //Serial.println(rfidindex);
     if(fingerid == rfidindex){
       //인증완료
       //Serial.println("모든인증이 완료되었다!");
       mp3.playMp3FolderTrack(5);
        waitMilliseconds(2000);
       state=3;
     }else{
       //카드와 지문이 서로 다른경우
       //Serial.println("카드와 지문이 서로 다릅니다!");
       mp3.playMp3FolderTrack(6);
        waitMilliseconds(2000);
       return;
     }
     //Serial.print("Found ID #"); Serial.print(finger.fingerID); 
     //Serial.print(" with confidence of "); Serial.println(finger.confidence);
     
   }else if(state ==3){
     //지문인식 직후(3단 인증이 완료된 경우
     if ( ! mfrc522.PICC_IsNewCardPresent())
        return;

    if ( ! mfrc522.PICC_ReadCardSerial())
        return;

    //RFID 리딩이 성공한경우
      //Serial.print(F("Card UID:"));
      String uid = dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
      //Serial.println(search_obj(uid));
      //Serial.println("RFID인증이 되었다");
      int local_index = search_tag(uid);
      if(rfidindex == local_index){
        //인증에 사용된 RFID카드를 다시 태깅한경우
        //Serial.println("초기모드로 진입합니다!");
        mp3.playMp3FolderTrack(1);
        waitMilliseconds(5000);
        state=0;
        return;
      }else{
        //Serial.println("인증에 사용된 카드가 아닙니다");
        mp3.playMp3FolderTrack(6);
        waitMilliseconds(2000);
      }
   }

}