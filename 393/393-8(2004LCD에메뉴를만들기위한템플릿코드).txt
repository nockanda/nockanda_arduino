#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27,20,4);

#define NOCK_CLK 4
#define NOCK_DT 5
#define NOCK_SW 6

#define lcd_line 4

class Nockanda{
  public:
  char* title; //메뉴의이름
  Nockanda* parent; //아빠노드
  Nockanda* next; //자식노드(=child)
  int count; //자식노드의 갯수
  bool is_root = false; //루트노드이냐?
  int type = 0; //1=밸류노드,2=함수노드,3=밸류-함수노드
  int max_value = 0;
  int min_value = 0;
  int* my_value;
  typedef void (*voidFuncPtr)(void);
  voidFuncPtr  CallBackFuncitonPointer;
};

Nockanda* cwd; //current working directory
int menu_index = 0; //현재 선택되어있는 메뉴의 번호

char cmd = '=';
bool pre_CLK = HIGH;


//노드를 구성한다
Nockanda root[3]; //루트노드
int root_count = 3; //루트노드의 갯수는 3개이다!

Nockanda A[2];
Nockanda B[3];
//...C아저씨는 자손이 없다..

Nockanda AA[2];
Nockanda BC[3];
//노드를 구성한다


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);

  lcd.init();
  lcd.backlight();
  
  pinMode(NOCK_CLK,INPUT);
  pinMode(NOCK_DT,INPUT);
  pinMode(NOCK_SW,INPUT_PULLUP);
  
  //노드안의 들어가는 값과 가계도를 연결한다
  root[0].title = "menu1";
  root[0].count = 2;
  root[0].next = A;
  root[0].is_root = true;
  root[1].title = "menu2";
  root[1].count = 3;
  root[1].next = B;
  root[1].is_root = true;
  root[2].title = "menu3";
  root[2].is_root = true;

  A[0].title = "menu1-1";
  A[0].parent = &root[0];
  A[0].count = 2;
  A[0].next = AA;
  A[1].title = "menu1-2";
  A[1].parent = &root[0];

  B[0].title = "menu2-1";
  B[0].parent = &root[1];
  B[1].title = "menu2-2";
  B[1].parent = &root[1];
  B[2].title = "menu2-3";
  B[2].parent = &root[1];
  B[2].count = 3;
  B[2].next = BC;

  AA[0].title = "menu1-1-1";
  AA[0].parent = &A[0];
  AA[1].title = "menu1-1-2";
  AA[1].parent = &A[0];

  BC[0].title = "menu2-3-1";
  BC[0].parent = &B[2];
  BC[1].title = "menu2-3-2";
  BC[1].parent = &B[2];
  BC[2].title = "menu2-3-2";
  BC[2].parent = &B[2];
  //요기까지 가계도 만들기


  //초기 LCD에 출력될 메뉴를 선정한다
  //루트노드가 4개 이상이면 4개 출력하고
  //4개보다 작으면 갯수만큼 출력한다
  if(root_count>4){
    lcd.setCursor(0,0);//0번째줄 좌측 모서리
    lcd.print("*"); lcd.print(root[0].title);
    Serial.print("*"); Serial.println(root[0].title);
    for(int i = 1;i<4;i++){
      lcd.setCursor(0,i);
      lcd.print(" "); lcd.print(root[i].title);
      Serial.print(" ");
      Serial.println(root[i].title);
    }
  }else{
    lcd.setCursor(0,0);//0번째줄 좌측 모서리
    lcd.print("*"); lcd.print(root[0].title);
    Serial.print("*"); Serial.println(root[0].title);
    for(int i = 1;i<root_count;i++){
      lcd.setCursor(0,i);
      lcd.print(" "); lcd.print(root[i].title);
      Serial.print(" ");
      Serial.println(root[i].title);
    }
  }

  //초기 작업 디렉토리는 루트이다!
  cwd = root;
}

void loop() {
  // put your main code here, to run repeatedly:
  menu_update(); //update checker!
  delay(1);
}


void menu_update(){
  check_rotary_encoder();
  if(cmd != '='){
    if(cmd == '+'){
      //시계방향(메뉴의 번호가 바뀌는 지점)
      //현재 메뉴의 번호가 막내를 지칭하고 있을때 막내보다 더 높은 번호는 없다
      //형제가 몇명인지는 아빠만 알고있다!
      //크게 루트노드와 일반노드로 나뉘는데 루트노드는 아빠가 없어서 전역으로 갯수가 지정되어있다!
      
      //메뉴의 인덱스를 증가시킨다
      menu_index++;
      if((*cwd).is_root){
        //루트노드이다
        if(menu_index>root_count-1) menu_index = root_count-1;
      }else{
        //루트노드가 아니다
        if(menu_index>(*((*cwd).parent)).count) menu_index = (*((*cwd).parent)).count;
      }
    }else if(cmd == '-'){
      //반시계방향(메뉴의 번호가 바뀌는 지점)
      //하한은 무조건 0
      //메뉴 인덱스가 감소하는 지점은 하한값이 0이면 된다
      menu_index--;
      if(menu_index<0)menu_index=0;
    }else if(cmd == '>'){
      //로터리엔코더 스위치가 눌려진경우
      //cwd = ???;
      if((*((*(cwd)).parent)).count == menu_index && !(*cwd).is_root){
        //아하! 뒤로가기 버튼이 눌려진것이구나!
        Serial.println("뒤로가기버튼이 눌러졌다!!");
        if((*((*cwd).parent)).is_root){
          cwd = root;
        }else{
          //아빠의 아빠한테 가서 자식 주소를 가져온다
          cwd = (*((*((*cwd).parent)).parent)).next;
        }
        menu_index = 0;
      }else{
        //하위메뉴로 들어가는 전략이 여기서 나와야한다
        //현재 선택된 메뉴가 자식이 있냐없냐?
        if((*(cwd+menu_index)).next == NULL){
          //리프노드!
          //케이스 바이 케이스로 뭔가 실행된다(케바케)

          //(*(cwd+menu_index)) : 현재 포커스가 맞춰져있는 노드
          if((*(cwd+menu_index)).type == 1){
            int max_value = (*(cwd+menu_index)).max_value; //밸류
            int min_value = (*(cwd+menu_index)).min_value; //밸류
            int* my_value = (*(cwd+menu_index)).my_value;
            //Serial.println((*(cwd+menu_index)).title);
            //Serial.println(max_value);
            //Serial.println(min_value);
            //Serial.println(my_value);

            //제일첫줄에 타이틀 출력
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print(">");
            lcd.print((*(cwd+menu_index)).title);
            lcd.setCursor(0,1);
            lcd.print("MAX:");
            lcd.print(max_value);
            lcd.setCursor(0,2);
            lcd.print("MIN:");
            lcd.print(min_value);
            lcd.setCursor(0,3);
            lcd.print("SET:");
            lcd.print(*my_value);
            delay(300); //여러번 눌러진것을 무시한다
            cmd = '='; //여러번 눌러진것을 무시한다
            Serial.println("설정을 시작합니다!");
            while(true){
              //일단 무한루프를 돌리고 탈출조건을 만들어준다
              //탈출조건 : 유저가 로터리엔코더의 스위치를 클릭한 경우!
              check_rotary_encoder(); //로터리엔코더의 상태를 체크
              if(cmd != '='){
                //뭔가 로터리 엔코더가 돌아갔다!
                if(cmd == '+'){
                  (*my_value)++;
                  if(*my_value > max_value) *my_value = max_value;

                  lcd.setCursor(0,3);
                  lcd.print("SET:");
                  lcd.print(*my_value);
                  lcd.print("    ");
                }else if(cmd == '-'){
                  (*my_value)--;
                  if(*my_value < min_value) *my_value = min_value;

                  lcd.setCursor(0,3);
                  lcd.print("SET:");
                  lcd.print(*my_value);
                  lcd.print("    ");
                }else if(cmd == '>'){
                  lcd.clear();
                  Serial.println("설정 루프를 탈출합니다!");
                  break;
                }
                
                cmd = '=';
              }
              
            }
            Serial.println("설정을 종료합니다!");
          }else if((*(cwd+menu_index)).type == 2){
            //함수노드
            (*(cwd+menu_index)).CallBackFuncitonPointer();
          }else if((*(cwd+menu_index)).type == 3){
            //밸류노드의 기능을 한다음 함수노드의 기능을 수행한다
            int max_value = (*(cwd+menu_index)).max_value; //밸류
            int min_value = (*(cwd+menu_index)).min_value; //밸류
            int* my_value = (*(cwd+menu_index)).my_value;
            //Serial.println((*(cwd+menu_index)).title);
            //Serial.println(max_value);
            //Serial.println(min_value);
            //Serial.println(my_value);

            //제일첫줄에 타이틀 출력
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print(">");
            lcd.print((*(cwd+menu_index)).title);
            lcd.setCursor(0,1);
            lcd.print("MAX:");
            lcd.print(max_value);
            lcd.setCursor(0,2);
            lcd.print("MIN:");
            lcd.print(min_value);
            lcd.setCursor(0,3);
            lcd.print("SET:");
            lcd.print(*my_value);
            delay(300); //여러번 눌러진것을 무시한다
            cmd = '='; //여러번 눌러진것을 무시한다
            Serial.println("설정을 시작합니다!");
            while(true){
              //일단 무한루프를 돌리고 탈출조건을 만들어준다
              //탈출조건 : 유저가 로터리엔코더의 스위치를 클릭한 경우!
              check_rotary_encoder(); //로터리엔코더의 상태를 체크
              if(cmd != '='){
                //뭔가 로터리 엔코더가 돌아갔다!
                if(cmd == '+'){
                  (*my_value)++;
                  if(*my_value > max_value) *my_value = max_value;

                  lcd.setCursor(0,3);
                  lcd.print("SET:");
                  lcd.print(*my_value);
                  lcd.print("    ");
                }else if(cmd == '-'){
                  (*my_value)--;
                  if(*my_value < min_value) *my_value = min_value;

                  lcd.setCursor(0,3);
                  lcd.print("SET:");
                  lcd.print(*my_value);
                  lcd.print("    ");
                }else if(cmd == '>'){
                  lcd.clear();
                  Serial.println("설정 루프를 탈출합니다!");
                  break;
                }
                
                cmd = '=';
              }
              
            }
            Serial.println("설정을 종료합니다!");
            (*(cwd+menu_index)).CallBackFuncitonPointer();
          }else{
            Serial.println("아직 정의되지 않는 리프노드의 기능이다!");
          }
            
        }else{
          cwd = (*(cwd+menu_index)).next;
          menu_index = 0;
        }
      }
      delay(300);
    }
    
    //2004LCD에 결과를 프린트하는부분
    if((*cwd).is_root){
      //루트일때 메뉴출력
      
      int pageNum = menu_index/lcd_line;

      lcd.clear();
      
      //지금 포커스가 있는 메뉴가 제일 마지막 페이지인가?
      if(lcd_line*(pageNum+1) >= root_count){
        //마지막페이지
        int lcd_num = 0;
        for(int i = lcd_line*pageNum;i<root_count;i++){
          lcd.setCursor(0,lcd_num);//0번째줄 좌측 모서리
          lcd_num++;
          if(menu_index == i){
            Serial.print("*"); //현재 선택한 것이 출력할 것과 일치하는것에 별모양을 붙힌다
            lcd.print("*");
          }
          else{
            Serial.print(" ");
            lcd.print(" ");
          }
          lcd.print((*(cwd+i)).title);
          Serial.println((*(cwd+i)).title); //현재 노드의 타이틀을 출력한다
        }
      }else{
        //무조건 lcd_line개씩 출력
        int lcd_num = 0;
        for(int i = lcd_line*pageNum;i<lcd_line*pageNum+lcd_line;i++){
          lcd.setCursor(0,lcd_num);//0번째줄 좌측 모서리
          lcd_num++;
          if(menu_index == i){
            Serial.print("*"); //현재 선택한 것이 출력할 것과 일치하는것에 별모양을 붙힌다
            lcd.print("*");
          }
          else{
            Serial.print(" ");
            lcd.print(" ");
          }
          Serial.println((*(cwd+i)).title);
          lcd.print((*(cwd+i)).title);
        } 
      }
      
    }else{
      //루트가 아닐때 메뉴출력
      int pageNum = menu_index/lcd_line;
      lcd.clear();
      if(lcd_line*(pageNum+1) >= (*((*cwd).parent)).count+1){
        int lcd_num = 0;
        for(int i = lcd_line*pageNum;i<(*((*cwd).parent)).count+1;i++){
          lcd.setCursor(0,lcd_num);//0번째줄 좌측 모서리
          lcd_num++;
          if(menu_index == i){
            Serial.print("*"); //현재 선택한 것이 출력할 것과 일치하는것에 별모양을 붙힌다
            lcd.print("*");
          }
          else{
            Serial.print(" ");
            lcd.print(" ");
          }
          //여기서 원래 형제수를 다 출력하고 제일 마지막 인덱스에 해당되는
          // i == (*((*cwd).parent)).count 일때 BACK노드가 출력되어야한다
          if(i != (*((*cwd).parent)).count){
            Serial.println((*(cwd+i)).title);
            lcd.print((*(cwd+i)).title);
          }else{
            Serial.println("BACK");
            lcd.print("BACK");
          }
        } 
      }else{
        int lcd_num = 0;
        //여기는 한 페이지 내 이므로 BACK노드를 고려할 필요가 없다!
        for(int i = lcd_line*pageNum;i<lcd_line*pageNum+lcd_line;i++){
          lcd.setCursor(0,lcd_num);//0번째줄 좌측 모서리
          lcd_num++;
          if(menu_index == i){
            Serial.print("*"); //현재 선택한 것이 출력할 것과 일치하는것에 별모양을 붙힌다
            lcd.print("*");
          }
          else{
            Serial.print(" ");
            lcd.print(" ");
          }
          Serial.println((*(cwd+i)).title);
          lcd.print((*(cwd+i)).title);
        } 
      }
    }//메뉴출력부분

    cmd = '=';
  }//가상의 로터리엔코더
}

void check_rotary_encoder(){
  if(digitalRead(NOCK_SW) == LOW){
    //로터리엔코더에 스위치가 풀업방식으로 연결!
    cmd = '>';
  }
  
  bool now_CLK = digitalRead(NOCK_CLK);
  if(pre_CLK == HIGH && now_CLK == LOW){
    //폴링엣지
    bool now_DT = digitalRead(NOCK_DT);
    if(now_CLK != now_DT){
      //시계방향
      cmd = '+';
    }else{
      //반시계방향
      cmd = '-';
    }
  }
  pre_CLK = now_CLK;
}