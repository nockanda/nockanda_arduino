#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include "FS.h"
#include <Arduino.h>
#include <ESP8266HTTPClient.h>
#include <ESP8266httpUpdate.h>

#define FRBTN D3 //팩토리리셋버튼

String my_version = "0.0";//아무의미없는 코드의 상태
String my_code = "123456"; //인증키
String Serial_number = "";
bool is_apmode = true;
#ifndef APSSID
#define APSSID "NOCKANDA"
#define APPSK  "123123123"
#endif

/* Set these to your desired credentials. */
const char *ssid = APSSID;
const char *password = APPSK;

ESP8266WebServer server(80);

/* Just a little test message.  Go to http://192.168.4.1 in a web browser
   connected to this access point to see it.
*/

unsigned long t = 0;

void handleRoot() {
  //유저의 입력페이지
  String html = readFile("/main.html");
  server.send(200, "text/html", html);
}

void handleProcess(){
  //확인페이지(post방식으로 넘어온다)
  //server.args(); //날라온 키-밸류 데이터의 갯수
  //server.argName(i); //키
  //server.arg(i) //밸류
  String html = "<html><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width\">ID="+server.arg(0)+"<BR>PW="+server.arg(1)+"<BR>Serial="+server.arg(2)+"<BR><a href=/reboot>입력완료</a></html>";
  server.send(200, "text/html", html);
  //날라온 데이터 저장하기
  // /id.txt : id  server.arg(0)
  // /pw.txt : pw  server.arg(1)
  // /number.txt : 시리얼번호 server.arg(2)
  writeFile("/id.txt",server.arg(0).c_str());
  writeFile("/pw.txt",server.arg(1).c_str());
  writeFile("/number.txt",server.arg(2).c_str());
  Serial.println("파일기록완료!");
}

void handleReboot(){
  server.send(200, "text/html", "OK");
  //
  ESP.restart();
}

void setup() {
  delay(1000);
  Serial.begin(115200);

  if (!SPIFFS.begin())
  {
    Serial.println("Failed to mount file system");
    return;
  }

  //유저가 D3에 달려있는 버튼을 꾸욱 누르고 있다면
  //id.txt에 있는 내용을 날려버린다
  pinMode(FRBTN,INPUT_PULLUP);
  if(digitalRead(FRBTN) == LOW){
    writeFile("/id.txt","");
  }
  
  
  String id = readFile("/id.txt");
  if(id == ""){
    //AP모드로 동작!
    is_apmode = true;
    Serial.print("Configuring access point...");
    /* You can remove the password parameter if you want the AP to be open. */
    WiFi.softAP(ssid, password);
  
    IPAddress myIP = WiFi.softAPIP();
    Serial.print("AP IP address: ");
    Serial.println(myIP);
    server.on("/", handleRoot);
    server.on("/process", handleProcess);
    server.on("/reboot", handleReboot);
    server.begin();
    Serial.println("HTTP server started");
  }else{
    //STA모드로 동작!
    is_apmode =false;
    //id
    String pw = readFile("/pw.txt");
    Serial_number = readFile("/number.txt");
    WiFi.mode(WIFI_STA);
    WiFi.begin(id, pw);
    Serial.println("");
  
    // Wait for connection
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("인터넷에 연결되었습니다!");
    Serial.println("업데이트 체크를 합니다");
    nockanda_update();
    Serial.println("업데이트 체크를 완료했습니다!");
  }
  
  
}

void loop() {
  if(is_apmode){
    server.handleClient();
  }else{
    Serial.println("현재 버전은"+my_version+"입니다!!");
    delay(1000);
  }
  
}

void writeFile(const char * path, const char * message){
  Serial.printf("Writing file: %s\r\n", path);
  File file = SPIFFS.open(path, "w");
  if(!file){
    Serial.println("failed to open file for writing");
    return;
  } if(file.print(message)){
      Serial.println("file written");
  } else {
    Serial.println("frite failed");
  }
}
String readFile(const char * path){
  Serial.printf("Reading file: %s\r\n", path);
  File file = SPIFFS.open(path, "r");

  if(!file || file.isDirectory()){
    //Serial.println("- failed to open file for reading");
    return "";
  }
    //Serial.println("read from file:");
    String output;
    while(file.available()){
      char c = file.read();
      output += c;
      //Serial.write(c);
      
    }
    return output;
}
void update_started() {
  Serial.println("CALLBACK:  HTTP update process started");
}

void update_finished() {
  Serial.println("CALLBACK:  HTTP update process finished");
}

void update_progress(int cur, int total) {
  Serial.printf("CALLBACK:  HTTP update process at %d of %d bytes...\n", cur, total);
}

void update_error(int err) {
  Serial.printf("CALLBACK:  HTTP update fatal error code %d\n", err);
}

void nockanda_update(){
    WiFiClient client;

    // The line below is optional. It can be used to blink the LED on the board during flashing
    // The LED will be on during download of one buffer of data from the network. The LED will
    // be off during writing that buffer to flash
    // On a good connection the LED should flash regularly. On a bad connection the LED will be
    // on much longer than it will be off. Other pins than LED_BUILTIN may be used. The second
    // value is used to put the LED on. If the LED is on with HIGH, that value should be passed
    ESPhttpUpdate.setLedPin(LED_BUILTIN, LOW);

    // Add optional callback notifiers
    ESPhttpUpdate.onStart(update_started);
    ESPhttpUpdate.onEnd(update_finished);
    ESPhttpUpdate.onProgress(update_progress);
    ESPhttpUpdate.onError(update_error);

    t_httpUpdate_return ret = ESPhttpUpdate.update(client, "http://192.168.0.8:1880/update?code="+my_code+"&serial="+Serial_number,my_version);

    switch (ret) {
      case HTTP_UPDATE_FAILED:
      //404
        Serial.printf("HTTP_UPDATE_FAILD Error (%d): %s\n", ESPhttpUpdate.getLastError(), ESPhttpUpdate.getLastErrorString().c_str());
        break;

      case HTTP_UPDATE_NO_UPDATES:
      //304
        Serial.println("이미 최신버전입니다!");
        break;

      case HTTP_UPDATE_OK:
      //200
        Serial.println("HTTP_UPDATE_OK");
        break;
    }
}