/*
 예제 220-1-1 사물인터넷보드(wemos d1r1)에 버튼 2개와 1602LCD 1개를 연결했다!
 버튼1은 D5에 연결하고 원격으로 릴레이를 on하는 버튼이다!
 버튼2는 D6에 연결하고 원격으로 릴레이를 off하는 버튼이다!
 1602lcd는 i2c모듈이 연결된 모듈이고 SDA를 D4에 SCL을 D3에 연결했다!
 비접촉전류센서(SCT013-030)가 연결된 사물인터넷보드가 MQTT로 publish하는 메시지를 LCD에 출력하고,
 버튼을 이용해서 릴레이가 연결된 사물인터넷 보드를 제어해서 220V전구를 켰다가 껏다가 해보라!
 릴레이제어 topic : nockanda/relay (0을보내면 off, 1을보내면 on)
 비접촉전류센서 topic : nockanda/i(전류),nockanda/w(W), nockanda/wh(Wh)
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);
#define button1 D5
#define button2 D6
// Update these with values suitable for your network.

const char* ssid = "~~~~~";
const char* password = "~~~~~";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String data;
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    data += (char)payload[i];
  }
  Serial.println();
  String topic2 = topic;

  if(topic2 == "nockanda/i"){
    //data
  }else if(topic2 == "nockanda/w"){
    //data
    String line = "W = " + data;
    while(line.length() < 16){
      line += ' ';
    }
    lcd.setCursor(0,0);
    lcd.print(line);
  }else if(topic2 == "nockanda/wh"){
    //data
    String line = "Wh = " + data;
    while(line.length() < 16){
      line += ' ';
    }
    lcd.setCursor(0,1);
    lcd.print(line);
  }
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/wh");
      client.subscribe("nockanda/w");
      client.subscribe("nockanda/i");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  lcd.init();
  lcd.backlight();
  pinMode(button1,INPUT_PULLUP);
  pinMode(button2,INPUT_PULLUP);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if(digitalRead(button1) == LOW){
    //ON버튼이 눌려진것
    client.publish("nockanda/relay", "1");
    delay(100);
  }
  if(digitalRead(button2) == LOW){
    //OFF버튼이 눌려진것
    client.publish("nockanda/relay", "0");
    delay(100);
  }
}