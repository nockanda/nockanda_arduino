/*
 예제 220-2-1 직전예제에 추가해서 유저가 시리얼모니터로 입력한값을 제한값으로 사용해보자!
 누적전력사용량(wh)값이 유저가 입력한값보다 커지면 릴레이를 자동으로 off시켜라!
 만약 유저가 제한값을 입력한다면 1회용으로 릴레이를 자동으로 off시켜라!
 무슨말이냐면 평소에는 그냥 수동으로 동작하다가 유저가 시리얼로 값을 날린 그때만 한번 작동하는 것이다!
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);
#define button1 D5
#define button2 D6
// Update these with values suitable for your network.

const char* ssid = "~~~~~";
const char* password = "~~~~~";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
float value = 0;
bool limit_mode = false;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String data;
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    data += (char)payload[i];
  }
  Serial.println();
  String topic2 = topic;

  if(topic2 == "nockanda/i"){
    //data
  }else if(topic2 == "nockanda/w"){
    //data
    String line = "W = " + data;
    while(line.length() < 16){
      line += ' ';
    }
    lcd.setCursor(0,0);
    lcd.print(line);
  }else if(topic2 == "nockanda/wh"){
    //data
    String line = "Wh = " + data;
    while(line.length() < 16){
      line += ' ';
    }
    lcd.setCursor(0,1);
    lcd.print(line);

    float wh = data.toFloat();
    
    if(limit_mode){
      //리미트모드가 걸려있는 상태
      if(wh > value){
        //전력사용량이 유저가 입력한 값보다 커졌네?
        //릴레이를 off시켜야지~
        client.publish("nockanda/relay", "0");
        limit_mode = false;
      }
    }
  }
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/wh");
      client.subscribe("nockanda/w");
      client.subscribe("nockanda/i");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  lcd.init();
  lcd.backlight();
  pinMode(button1,INPUT_PULLUP);
  pinMode(button2,INPUT_PULLUP);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if(Serial.available()){
    //유저가 뭔가 전송한 패킷이 존재한다면~
    value = Serial.parseFloat();
    limit_mode = true;
  }
  
  if(digitalRead(button1) == LOW){
    //ON버튼이 눌려진것
    client.publish("nockanda/relay", "1");
    delay(100);
  }
  if(digitalRead(button2) == LOW){
    //OFF버튼이 눌려진것
    client.publish("nockanda/relay", "0");
    delay(100);
  }
}