/*
   예제 192-1 사물인터넷보드(wemos d1r1)에 릴레이를 이용해서 220V전구를 제어해보자!
   사물인터넷보드가 웹서버역할을 하도록하고 웹브라우저에서 GET방식으로 넘긴 값을 이용해서
   220V전구를 제어해보자!
*/

#include <ESP8266WiFi.h>

#ifndef STASSID
#define STASSID "~~~" //와이파이 검색했을때 뜨는 이름
#define STAPSK  "~~~~" //패스워드
#endif

#define relay D3

const char* ssid = STASSID;
const char* password = STAPSK;

// Create an instance of the server
// specify the port to listen on as an argument
WiFiServer server(80);

void setup() {
  Serial.begin(115200);
  pinMode(relay,OUTPUT);
  // Connect to WiFi network(그냥 한번 출력해보는거)
  Serial.println();
  Serial.println();
  Serial.print(F("Connecting to "));
  Serial.println(ssid);

  //와이파이 접속
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(F("."));
  }
  Serial.println();
  Serial.println(F("WiFi connected"));

  //-----------------여기까지는 와이파이 연결하는 부분....

  // Start the server
  server.begin();
  Serial.println(F("Server started"));

  // Print the IP address
  Serial.println(WiFi.localIP());
}

void loop() {
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }
  Serial.println(F("new client"));

  client.setTimeout(5000); // default is 1000

  // Read the first line of the request
  String req = client.readStringUntil('\n'); //readline;
  Serial.println(F("request: "));
  Serial.println(req);

  //서버가 클라이언트로 받은 메시지 전문을 출력
  while (client.available()) {
    // byte by byte is not very efficient
    String text = client.readStringUntil('\n');
    Serial.println(text);
  }

  String css;
  String onoff;

  if (req.indexOf(F("/ON")) != -1) {
    //유저가 ON버튼을 눌렀다!
    //릴레이ON
    css = "class='set1'";
    onoff = "켜짐";
    digitalWrite(relay,HIGH);
  } else if (req.indexOf(F("/OFF")) != -1) {
    //유저가 OFF버튼을 눌렀다!
    //릴레이OFF
    onoff = "꺼짐";
    digitalWrite(relay,LOW);
  } else{
    if(digitalRead(relay) == HIGH){
      css = "class='set1'";
      onoff = "켜짐";
    }else{
      onoff = "꺼짐";
    }
  }

  // read/ignore the rest of the request
  // do not client.flush(): it is for output only, see below
  /*while (client.available()) {
    // byte by byte is not very efficient
    //client.read();
  }*/

  // Send the response to the client
  // it is OK for multiple small client.print/write,
  // because nagle algorithm will group them into one single packet
  client.print(F("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n"));
  String response = "<!DOCTYPE html>\
<html>\
<head>\
<meta charset=\"utf-8\">\
<title>녹칸다의 220V전구제어 예제</title>\
<style>\
#btn{\
border: 1px solid blue;\
background-color: rgba(0,0,0,0);\
color: blue;\
padding: 5px;\
border-top-left-radius: 5px;\
border-bottom-left-radius: 5px;\
border-top-right-radius: 5px;\
border-bottom-right-radius: 5px;\
margin-right:-4px;\
height:40px;\
}\
table {\
border-collapse: collapse;\
width:500px;\
}\
table, td, th {\
border: solid 1px #cccccc;\
}\
tr {\
height:40px;\
text-align: center;\
}\
td, th {\
padding: 5px;\
}\
.set1 {\
background-color: red;\
color: white;\
text-decoration: underline;\
font-weight: bold;\
}\
#c_head {\
height:30px;\
background-color: #eeeeee;\
}\
#c_width{\
width: 500px;\
}\
</style>\
</head>\
<body>\
<h1>녹칸다의 220V전구제어 예제</h1>\
<table>\
<tr id=\"c_head\">\
<th>결과</th>\
</tr>\
<tr>\
<td height=100 "+
css
+"><h1>"+
onoff
+"</h1></td>\
</tr>\
<tr>\
<td>\
    <button id=\"btn\" onclick=\"location.href='/ON'\">켬(ON)</button>\
    <button id=\"btn\" onclick=\"location.href='/OFF'\">끔(OFF)</button>\
</td>\
</tr>\
</table>\
</body>\
</html>\
  ";

  client.print(response);
  // The client will actually be *flushed* then disconnected
  // when the function returns and 'client' object is destroyed (out-of-scope)
  // flush = ensure written data are received by the other side
  Serial.println(F("Disconnecting from client"));
}