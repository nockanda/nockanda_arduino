/*
 예제 187-2 앞에 했던 예제에 더해서 솔레노이드 스위치를 이용해보자!
 솔레노이드 스위치는 직접 보드에 연결하기에는 무리이므로 릴레이를 이용하자!
 릴레이를 D6에 연결하고 릴레이를통해서 솔레노이드 스위치를 제어해보자!
 스마트폰에서 MQTT를 이용해서 publish한 메시지를 바탕으로 솔레노이드 스위치를 제어해보자!
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#define doorsensor D5
#define solenoid D6
// Update these with values suitable for your network.

const char* ssid = "~~~~";
const char* password = "~~~~~~";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    //도어락 잠금=릴레이작동
    digitalWrite(solenoid,HIGH);
    char msg2[] = "잠금!";
    client.publish("nockanda/lock2", msg2);
  } else {
    //도어락 잠금해제=릴레이작동안함
    digitalWrite(solenoid,LOW);
    char msg2[] = "해제!";
    client.publish("nockanda/lock2", msg2);
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/lock");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(doorsensor,INPUT_PULLUP);
  pinMode(solenoid,OUTPUT);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 1000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("outNOCK", msg);

    //도어센서의 값을 publish해보자!
    if(digitalRead(doorsensor) == LOW){
      //닫힌상태
      char msg2[] = "닫힘!";
      client.publish("nockanda/door", msg2);
      Serial.println(msg2);
    }else{
      //열린상태
      char msg2[] = "열림!";
      client.publish("nockanda/door", msg2);
      Serial.println(msg2);
    }
    
  }
}