
#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WebSocketsServer.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Hash.h>

#include <SoftwareSerial.h>
#include "CRC16.h"
#include "CRC.h"

#define slaveid 0x01

#define RTU_OK 0
#define RTU_TIMEOUT 1
#define RTU_DATA_ERROR 2
#define RTU_CRC_ERROR 3


CRC16 crc;

#define mode D13 //데이터 입출력핀! //LOW(0):수신모드 HIGH(1):송신모드

byte buff[50];

                   //rx, tx
SoftwareSerial modbus(D3, D4); //모듈tx, rx @아두이노 입장 rx, tx

#define USE_SERIAL Serial

ESP8266WiFiMulti WiFiMulti;

//웹서버의 포트는 기본 포트인 80번을 사용한다!
ESP8266WebServer server(80);
//웹서버와 웹클라이언트가 뒷구멍으로 주고받는 데이터는 웹소켓에서 81번을 쓴다!
WebSocketsServer webSocket = WebSocketsServer(81);

String response = "\
<html>\
<head>\
<meta name=\"viewport\" content=\"width=device-width\">\
<meta charset=\"utf-8\">\
<script>\
  var connection = new WebSocket('ws://'+location.hostname+':81/', ['arduino']);\
  connection.onopen = function () {\
  };\
  connection.onerror = function (error) {\
     console.log('WebSocket Error ', error);\
  };\
  connection.onmessage = function (e) {\
     console.log('Server: ', e.data);\
     document.getElementById('msg').value +=e.data+'\\n';\
     if(e.data[0] == '1'){\
       if(e.data[1] == '0'){\
          document.getElementById('btn1').style.backgroundColor = 'gray';\
          document.getElementById('btn2').style.backgroundColor = 'red';\
       }else if(e.data[1] == '1'){\
          document.getElementById('btn1').style.backgroundColor = 'green';\
          document.getElementById('btn2').style.backgroundColor = 'gray';\
       }\
     }else if(e.data[0] == '2'){\
       if(e.data[1] == '0'){\
          document.getElementById('btn3').style.backgroundColor = 'gray';\
          document.getElementById('btn4').style.backgroundColor = 'red';\
       }else if(e.data[1] == '1'){\
          document.getElementById('btn3').style.backgroundColor = 'green';\
          document.getElementById('btn4').style.backgroundColor = 'gray';\
       }\
     }\
  };\
  function send_msg(){\
     connection.send('녹칸다 포에버!!!');\
  }\
  function set_led(input){\
    connection.send(input);\
  }\
</script>\
</head>\
<body>\
<textarea id=msg cols=20 rows=10></textarea><br>\
<table border=1 width=300 height=300>\
  <tr>\
    <td><input id=btn1 type=button value=1번LED켜기 onClick=\"set_led('0')\"></td>\
    <td><input id=btn2 type=button value=1번LED끄기 onClick=\"set_led('1')\"></td>\
  </tr>\
  <tr>\
    <td><input id=btn3 type=button value=2번LED켜기 onClick=\"set_led('2')\"></td>\
    <td><input id=btn4 type=button value=2번LED끄기 onClick=\"set_led('3')\"></td>\
  </tr>\
</table>\
</body>\
</html>";


//클라이언트에서 서버쪽으로 값이 전송되었을때 뭘할거냐?
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            USE_SERIAL.printf("[%u] Disconnected!\n", num);
            break;
        case WStype_CONNECTED: {
            IPAddress ip = webSocket.remoteIP(num);
            USE_SERIAL.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);

            //num = 소켓번호(클라이언트번호)
            //webSocket.sendTXT(num, "Connected");
        }
            break;
        case WStype_TEXT:
        //메시지 수신부
            USE_SERIAL.printf("[%u] get Text: %s\n", num, payload);
            if(payload[0] == '0'){
              //1번 LED ON
              byte request[] = {0x01,0x05,0x00,0x00,0x00,0x01}; //=> 1번LED ON
              if(nockanda_modbus_rtu(request,6,buff,8) == RTU_OK){
                Serial.print("response = ");
                for(int i = 0;i<8;i++){
                  Serial.print(buff[i],HEX);
                  Serial.print(",");
                }
                Serial.println();
                //buff[4] buff[5]
                webSocket.broadcastTXT("11");
              }
              
            }else if(payload[0] == '1'){
              //1번 LED OFF
              byte request[] = {0x01,0x05,0x00,0x00,0x00,0x00}; //=> 1번LED OFF
              if(nockanda_modbus_rtu(request,6,buff,8) == RTU_OK){
                Serial.print("response = ");
                for(int i = 0;i<8;i++){
                  Serial.print(buff[i],HEX);
                  Serial.print(",");
                }
                Serial.println();
                webSocket.broadcastTXT("10");
              }
            }else if(payload[0] == '2'){
              //2번 LED ON
              byte request[] = {0x01,0x05,0x00,0x00,0x01,0x01}; //=> 2번LED ON
              if(nockanda_modbus_rtu(request,6,buff,8) == RTU_OK){
                Serial.print("response = ");
                for(int i = 0;i<8;i++){
                  Serial.print(buff[i],HEX);
                  Serial.print(",");
                }
                Serial.println();
                webSocket.broadcastTXT("21");
              }
            }else if(payload[0] == '3'){
              //3번 LED OFF
              byte request[] = {0x01,0x05,0x00,0x00,0x01,0x00}; //=> 2번LED OFF
              if(nockanda_modbus_rtu(request,6,buff,8) == RTU_OK){
                Serial.print("response = ");
                for(int i = 0;i<8;i++){
                  Serial.print(buff[i],HEX);
                  Serial.print(",");
                }
                Serial.println();
                webSocket.broadcastTXT("20");
              }
            }
            break;
    }

}

void setup() {
    //USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);

    //USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

    for(uint8_t t = 4; t > 0; t--) {
        USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
        USE_SERIAL.flush();
        delay(1000);
    }

    //자기자신의 IP공유기 ID비밀번호 집어넣는곳!
    WiFiMulti.addAP("popcorn", "11213144");

    while(WiFiMulti.run() != WL_CONNECTED) {
        delay(100);
    }

    //IP공유기로부터 할당받은 IP주소를 여기서 출력한다!
    USE_SERIAL.println("IP address: ");
    USE_SERIAL.println(WiFi.localIP());
  
    //웹소켓 서버를 연다
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);

    //윈도우10, 안드로이드 안됨..의미없는 기능
    if(MDNS.begin("esp8266")) {
        USE_SERIAL.println("MDNS responder started");
    }

    //웹서버의 index.html
    //웹서버가 클라이언트에게 response해주는 부분!

    server.on("/", []() {
        server.send(200, "text/html", response);
    });

    server.begin();

    // Add service to MDNS
    MDNS.addService("http", "tcp", 80);
    MDNS.addService("ws", "tcp", 81);

    modbus.begin(9600); //사용하는 제품마다 숫자가 다름!
    //데이터 입출력핀을 출력모드로 설정한다!
    pinMode(mode,OUTPUT);
    //시작은 수신모드이다!
    recv_mode();
  
    //만약에 버퍼에 뭔가 있으면 클리어한다!
    while(modbus.available()){
      modbus.read();
    }
    Serial.println("녹칸다의 modbus 시작!");
}

unsigned long last_10sec = 0;
unsigned int counter = 0;

void loop() {
    unsigned long t = millis();
    webSocket.loop(); //이거 있어야한다!
    server.handleClient(); //이거도 있어야한다!

    //delay(~~~~) 절때 쓰면 안됨!

    /*
    //10초간격으로 뭔가 하겠다~
    if((t - last_10sec) > 1000) {
      last_10sec = millis();
      String msg = "현재 사물인터넷보드의 시간="+String(millis());
      webSocket.broadcastTXT(msg); //모든클라이언트에게 메시지 전송!
        
    }*/
}

int nockanda_modbus_rtu(byte req[],int req_len,byte res[],int res_len){
  //sht20에게 보내줘야할 데이터이다!
  //byte request[] = {slaveid, 0x04, 0x00, 0x01, 0x00, 0x01};
  int response_length = res_len;

  uint16_t request_crc = crc16(req, req_len, 0x8005, 0xFFFF, 0, true, true);

  //2바이트로 표현된 result값을 1byte씩 쪼개서 2byte로 나눠담는 과정~!
  byte request_crc_high = request_crc >> 8;
  byte request_crc_low = request_crc & 0xFF;


  //테스트 프린트
  Serial.print("request = ");
  for(int i = 0;i<req_len;i++){
    Serial.print(req[i],HEX);
    Serial.print(",");
  }
  Serial.print(request_crc_low,HEX);
  Serial.print(",");
  Serial.print(request_crc_high,HEX);
  Serial.println();
 
  //송신모드로 전환!
  send_mode();
  //request 송신!
  modbus.write(req, req_len);
  modbus.write(request_crc_low);
  modbus.write(request_crc_high);
  //request가 완료됨을 확인할 필요가 있다!
  modbus.flush();
  recv_mode();

  //Serial.println("전송완료!");

  //두목이 쫄병한데 물어봤으면 대답할 여유를 줘야한다!
  //(기존코드)
  //while(!modbus.available());
  //(스트리밍후 개선 코드) 수신할 데이터 길이만큼 기다린다
  unsigned long t = millis();
  bool is_timeout = false;
  while(!(modbus.available()==response_length)){
    if(millis() - t > 1000){
      //while루프 시작후 1초가 경과된 상황!
      is_timeout = true;
      break;
    }
  }

  if(is_timeout){
    //타임아웃 상황이다!
    Serial.println("타임아웃입니다!");
    return RTU_TIMEOUT;
  }
  
  //받아야 한다!
  //byte response[50];
  int len = 0;
  while(modbus.available()){
    res[len] = modbus.read();
    len++;
  }

  //수신완료지점
  if(len != response_length){
    Serial.println("데이터가 잘못 왔다!");
    return RTU_DATA_ERROR;
  }

  //response안에 들어있는 값을 길이 맞는 byte array에 담는 과정!
  byte data[len-2];
  for(int i = 0;i<len-2;i++){
    data[i] = res[i];
  }

  //CRC체크
  uint16_t result = crc16(data, len-2, 0x8005, 0xFFFF, 0, true, true);

  //2바이트로 표현된 result값을 1byte씩 쪼개서 2byte로 나눠담는 과정~!
  byte crc_high = result >> 8;
  byte crc_low = result & 0xFF;

  if(crc_low != res[len-2] || crc_high != res[len-1]){
    //에러의조건
    Serial.println("CRC가 안맞다..!");
    return RTU_CRC_ERROR;
  }

  return RTU_OK;
  
/*
  Serial.print("수신된 CRC=");
  Serial.print(response[len-2],HEX);
  Serial.println(response[len-1],HEX);

  Serial.print("계산된 CRC=");
  Serial.print(crc_low, HEX);
  Serial.println(crc_high, HEX);
*/
/*
  //출력을 해보자!
  for(int i = 0;i<len;i++){
    Serial.print(response[i],HEX);
    Serial.print(",");
  }
  Serial.println();
  */
}

void send_mode(){
  digitalWrite(mode,HIGH);
}
void recv_mode(){
  digitalWrite(mode,LOW);
}