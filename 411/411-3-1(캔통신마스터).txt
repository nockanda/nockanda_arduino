
#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WebSocketsServer.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Hash.h>

#include <SPI.h>
#include <mcp2515.h>

#define slave1 0x0F6
#define slave2 0x036

#define job1 0x00 //생존확인용 job
#define job2 0x01
#define job3 0x02
#define job4 0x03


struct can_frame canMsg2;
MCP2515 mcp2515(D10);

#define USE_SERIAL Serial

ESP8266WiFiMulti WiFiMulti;

//웹서버의 포트는 기본 포트인 80번을 사용한다!
ESP8266WebServer server(80);
//웹서버와 웹클라이언트가 뒷구멍으로 주고받는 데이터는 웹소켓에서 81번을 쓴다!
WebSocketsServer webSocket = WebSocketsServer(81);

String response = "\
<html>\
<head>\
<meta name=\"viewport\" content=\"width=device-width\">\
<meta charset=\"utf-8\">\
<script>\
  var connection = new WebSocket('ws://'+location.hostname+':81/', ['arduino']);\
  connection.onopen = function () {\
  };\
  connection.onerror = function (error) {\
     console.log('WebSocket Error ', error);\
  };\
  connection.onmessage = function (e) {\
     console.log('Server: ', e.data);\
     document.getElementById('msg').value +=e.data+'\\n';\
     if(e.data[0] == '1'){\
       if(e.data[1] == '0'){\
          document.getElementById('btn1').style.backgroundColor = 'gray';\
          document.getElementById('btn2').style.backgroundColor = 'red';\
       }else if(e.data[1] == '1'){\
          document.getElementById('btn1').style.backgroundColor = 'green';\
          document.getElementById('btn2').style.backgroundColor = 'gray';\
       }\
     }else if(e.data[0] == '2'){\
       if(e.data[1] == '0'){\
          document.getElementById('btn3').style.backgroundColor = 'gray';\
          document.getElementById('btn4').style.backgroundColor = 'red';\
       }else if(e.data[1] == '1'){\
          document.getElementById('btn3').style.backgroundColor = 'green';\
          document.getElementById('btn4').style.backgroundColor = 'gray';\
       }\
     }\
  };\
  function send_msg(){\
     connection.send('녹칸다 포에버!!!');\
  }\
  function set_led(input){\
    connection.send(input);\
  }\
</script>\
</head>\
<body>\
<textarea id=msg cols=20 rows=10></textarea><br>\
<table border=1 width=300 height=300>\
  <tr>\
    <td><input id=btn1 type=button value=1번LED켜기 onClick=\"set_led('0')\"></td>\
    <td><input id=btn2 type=button value=1번LED끄기 onClick=\"set_led('1')\"></td>\
  </tr>\
  <tr>\
    <td><input id=btn3 type=button value=2번LED켜기 onClick=\"set_led('2')\"></td>\
    <td><input id=btn4 type=button value=2번LED끄기 onClick=\"set_led('3')\"></td>\
  </tr>\
</table>\
</body>\
</html>";


//클라이언트에서 서버쪽으로 값이 전송되었을때 뭘할거냐?
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            USE_SERIAL.printf("[%u] Disconnected!\n", num);
            break;
        case WStype_CONNECTED: {
            IPAddress ip = webSocket.remoteIP(num);
            USE_SERIAL.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);

            //num = 소켓번호(클라이언트번호)
            //webSocket.sendTXT(num, "Connected");
        }
            break;
        case WStype_TEXT:
        //메시지 수신부
            USE_SERIAL.printf("[%u] get Text: %s\n", num, payload);
            if(payload[0] == '0'){
              //1번 LED ON
              byte data[8] = {job1,0x00,0x00,0x00,0x00,0x00,0x00,0x01}; 
              mcp2515_send(slave1,data);
            
              //Response slave2
              byte recv[8];
              unsigned int id = mcp2515_receive(recv);
              if(id == -1){
                Serial.println("슬레이브1 오프라인!");
              }else{
                //데이터 정상수신
                //프린트
                Serial.print("수신ID=");
                Serial.println(id,HEX);
                for(int i = 0;i<8;i++){
                  Serial.print(recv[i]);
                  Serial.print(",");
                }
                Serial.println();
                webSocket.broadcastTXT("11");
              }
            }else if(payload[0] == '1'){
              //1번 LED OFF
              byte data[8] = {job1,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; 
              mcp2515_send(slave1,data);
            
              //Response slave2
              byte recv[8];
              unsigned int id = mcp2515_receive(recv);
              if(id == -1){
                Serial.println("슬레이브1 오프라인!");
              }else{
                //데이터 정상수신
                //프린트
                Serial.print("수신ID=");
                Serial.println(id,HEX);
                for(int i = 0;i<8;i++){
                  Serial.print(recv[i]);
                  Serial.print(",");
                }
                Serial.println();
                webSocket.broadcastTXT("10");
              }
            }else if(payload[0] == '2'){
              //2번 LED ON
              byte data[8] = {job1,0x00,0x00,0x00,0x00,0x00,0x01,0x01}; 
              mcp2515_send(slave1,data);
            
              //Response slave2
              byte recv[8];
              unsigned int id = mcp2515_receive(recv);
              if(id == -1){
                Serial.println("슬레이브1 오프라인!");
              }else{
                //데이터 정상수신
                //프린트
                Serial.print("수신ID=");
                Serial.println(id,HEX);
                for(int i = 0;i<8;i++){
                  Serial.print(recv[i]);
                  Serial.print(",");
                }
                Serial.println();
                webSocket.broadcastTXT("21");
              }
            }else if(payload[0] == '3'){
              //3번 LED OFF
              byte data[8] = {job1,0x00,0x00,0x00,0x00,0x00,0x01,0x00}; 
              mcp2515_send(slave1,data);
            
              //Response slave2
              byte recv[8];
              unsigned int id = mcp2515_receive(recv);
              if(id == -1){
                Serial.println("슬레이브1 오프라인!");
              }else{
                //데이터 정상수신
                //프린트
                Serial.print("수신ID=");
                Serial.println(id,HEX);
                for(int i = 0;i<8;i++){
                  Serial.print(recv[i]);
                  Serial.print(",");
                }
                Serial.println();
                webSocket.broadcastTXT("20");
              }
            }
            break;
    }

}

void setup() {
    //USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);

    //USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

    for(uint8_t t = 4; t > 0; t--) {
        USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
        USE_SERIAL.flush();
        delay(1000);
    }

    //자기자신의 IP공유기 ID비밀번호 집어넣는곳!
    WiFiMulti.addAP("popcorn", "11213144");

    while(WiFiMulti.run() != WL_CONNECTED) {
        delay(100);
    }

    //IP공유기로부터 할당받은 IP주소를 여기서 출력한다!
    USE_SERIAL.println("IP address: ");
    USE_SERIAL.println(WiFi.localIP());
  
    //웹소켓 서버를 연다
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);

    //윈도우10, 안드로이드 안됨..의미없는 기능
    if(MDNS.begin("esp8266")) {
        USE_SERIAL.println("MDNS responder started");
    }

    //웹서버의 index.html
    //웹서버가 클라이언트에게 response해주는 부분!

    server.on("/", []() {
        server.send(200, "text/html", response);
    });

    server.begin();

    // Add service to MDNS
    MDNS.addService("http", "tcp", 80);
    MDNS.addService("ws", "tcp", 81);

    mcp2515.reset();
    mcp2515.setBitrate(CAN_125KBPS);
    mcp2515.setNormalMode();
}

unsigned long last_10sec = 0;
unsigned int counter = 0;

void loop() {
    unsigned long t = millis();
    webSocket.loop(); //이거 있어야한다!
    server.handleClient(); //이거도 있어야한다!

    //delay(~~~~) 절때 쓰면 안됨!

    /*
    //10초간격으로 뭔가 하겠다~
    if((t - last_10sec) > 1000) {
      last_10sec = millis();
      String msg = "현재 사물인터넷보드의 시간="+String(millis());
      webSocket.broadcastTXT(msg); //모든클라이언트에게 메시지 전송!
        
    }*/
}
void mcp2515_send(unsigned int id, byte data[]){
  struct can_frame canMsg1;
  canMsg1.can_id  = id; //슬레이브1의 ID
  canMsg1.can_dlc = 8;
  for(int i =0;i<8;i++){
    canMsg1.data[i] = data[i];
  }
  mcp2515.sendMessage(&canMsg1);
  Serial.println("[마스터에서 슬레이브로 보낸 메시지]");
  Serial.println(id,HEX);
  for (int i = 0; i<canMsg1.can_dlc; i++)  {  // print the data
      Serial.print(canMsg1.data[i],HEX);
      Serial.print(" ");
  }
  Serial.println();
}
unsigned int mcp2515_receive(byte recv[]){
  struct can_frame canMsg;
  unsigned long t = millis(); //이 타이밍의 시간을 측정
  while(1){
    if(millis() - t > 1000){
      //루프 진입후 1초가 지난 시점
      //Serial.println("슬레이브1 오프라인");
      return -1;
      break;
    }
    //나 슬레이브1의 응답데이터가 있을때까지 무조건 기다릴거야!
    if (mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK) {
      for(int i =0;i<8;i++){
        recv[i] = canMsg.data[i];
      }
      return canMsg.can_id;
      break;
    }
  }
}
