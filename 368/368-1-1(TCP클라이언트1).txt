#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ArduinoJson.h>

//와이파이 공유기의 id비밀번호가 들어가야 인터넷에 접속이 가능하겠죠?
#ifndef STASSID
#define STASSID "popcorn"
#define STAPSK  "11213144"
#endif

union{
  byte b[4]; //4bytes
  float f; //4bytes
}nockanda;

const char* ssid     = STASSID;
const char* password = STAPSK;

//클라이언트가 서버에 연결을 해야하는데.. 서버의 주소가 필요하다!
const char* host = "192.168.0.8";
//서버의 ip주소는 전체적인 주소의 일부분 상세주소인 포트번호가 필요하다!
const uint16_t port = 60000;

ESP8266WiFiMulti WiFiMulti;

String device_id = "#device1";

int data_num = 0;

bool is_busy = false;
int is_cmd_set = 0; //0:아무것도 하지 않음, 1:끄는명령, 2:켜는명령
unsigned long busy_timeout = 0;

//셋업함수는 아두이노가 부팅되면 딱 한번 실행되는부분!
//와이파이 공유기와 연결하는 작업을 진행한다!
void setup() {
  Serial.begin(115200);
  // We start by connecting to a WiFi network
  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP(ssid, password);

  Serial.println();
  Serial.println();
  Serial.print("Wait for WiFi... ");

  while (WiFiMulti.run() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  delay(500);
}


void loop() {
  //서버주소가 ~~인데 ~~에 연결할거다!
  Serial.print("connecting to ");
  Serial.print(host);
  Serial.print(':');
  Serial.println(port);

  // Use WiFiClient class to create TCP connections
  WiFiClient client;

  //클라이언트가 서버에 접속을 시도한다!(5초마다 한다!)
  if (!client.connect(host, port)) {
    Serial.println("connection failed");
    Serial.println("wait 5 sec...");
    delay(5000);
    return;
  }
  //서버와 접속이 성공적으로 진행이된 경우!

  bool is_accepted = false;

  unsigned long dt = millis();//서버하고 소통하는 스레드
  unsigned long dt2 = millis(); //monitor1
  //서버와 클라이언트가 연결이 보장이된 경우에 while루프가 작동하고
  //연결이 끊어지면 while루프가 멈춘다!
  while(client.connected()){
    //여기안은 클라이언트와 서버가 접속중을때 활성화된다!
    //1초마다 서버에게 메시지를 전송한다!
    if(millis() - dt > 1000){
      dt = millis();
      if(!is_accepted){
        //서버하고 인사를 안한상태
        client.println(device_id);
      }else{
        //서버에게 나 접속하고 있어요~ 라는 데이터를 보낸다
        String output;
        StaticJsonDocument<200> doc;

        doc["from"] = device_id;
        doc["to"] = "#server";
        doc["msg"]["Rssi"] = WiFi.RSSI();
        serializeJson(doc, output);
        client.println(output);
        
      }
    }

    //실제로 원하는 메시지를 전송하는 부분
    
    if(millis() - dt2 > 1000){
      dt2 = millis();

      if(data_num == 0 && !is_busy){
        //전력량계에 전압을 요청한다!
        String output;
        StaticJsonDocument<600> doc;
        doc["from"] = device_id;
        doc["to"] = "#device2";
        
        JsonArray msg = doc.createNestedArray("msg");
        JsonObject object1 = msg.createNestedObject();
        object1["Type"] = "mobus";
        object1["Name"] = "response";
        object1["Value"] = "010400000002"; 
        JsonObject object2 = msg.createNestedObject();
        object2["Type"] = "mobus";
        object2["Name"] = "len";
        object2["Value"] = "9"; 
        JsonObject object3 = msg.createNestedObject();
        object3["Type"] = "mobus";
        object3["Name"] = "type";
        object3["Value"] = "VOLT"; 
        
        serializeJson(doc, output);
        client.println(output);
        set_busy();
        data_num++;
      }else if(data_num == 1 && !is_busy){
        //전류값 요청
        String output;
        StaticJsonDocument<600> doc;
        doc["from"] = device_id;
        doc["to"] = "#device2";

        JsonArray msg = doc.createNestedArray("msg");

        JsonObject object1 = msg.createNestedObject();
        object1["Type"] = "mobus";
        object1["Name"] = "response";
        object1["Value"] = "010400060002";
        JsonObject object2 = msg.createNestedObject();
        object2["Type"] = "mobus";
        object2["Name"] = "len";
        object2["Value"] = "9"; 
        JsonObject object3 = msg.createNestedObject();
        object3["Type"] = "mobus";
        object3["Name"] = "type";
        object3["Value"] = "CURRENT";
        
        serializeJson(doc, output);
        client.println(output);
        set_busy();
        data_num++;
      }else if(data_num == 2 && !is_busy){
        String output;
        StaticJsonDocument<600> doc;
        doc["from"] = device_id;
        doc["to"] = "#device2";

        JsonArray msg = doc.createNestedArray("msg");

        JsonObject object1 = msg.createNestedObject();
        object1["Type"] = "mobus";
        object1["Name"] = "response";
        object1["Value"] = "0104000C0002";
        JsonObject object2 = msg.createNestedObject();
        object2["Type"] = "mobus";
        object2["Name"] = "len";
        object2["Value"] = "9"; 
        JsonObject object3 = msg.createNestedObject();
        object3["Type"] = "mobus";
        object3["Name"] = "type";
        object3["Value"] = "POWER";
        
        serializeJson(doc, output);
        client.println(output);
        set_busy();
        data_num++;
      }else if(data_num == 3 && !is_busy){
        String output;
        StaticJsonDocument<300> doc;
        doc["from"] = device_id;
        doc["to"] = "#device2";

       JsonArray msg = doc.createNestedArray("msg");
 
       JsonObject object1 = msg.createNestedObject();
        object1["Type"] = "mobus";
        object1["Name"] = "response";
        object1["Value"] = "010401560002";
        JsonObject object2 = msg.createNestedObject();
        object2["Type"] = "mobus";
        object2["Name"] = "len";
        object2["Value"] = "9"; 
        JsonObject object3 = msg.createNestedObject();
        object3["Type"] = "mobus";
        object3["Name"] = "type";
        object3["Value"] = "ENERGY";
       
        serializeJson(doc, output);
        client.println(output);
        set_busy();
        data_num = 0;
      }
    }

    //is_busy가 일정한 timeout을 벗어나면 강제로 해제한다
    if(is_busy){
      //시간 체크를 한다
      if(millis() - busy_timeout > 2000){
        is_busy = false;
      }
    }

    //유저가 입력한 커맨드를 대기하고 있다가 여기서 처리한다!
    if(is_cmd_set != 0 && !is_busy){
      //뭔가 입력한 커맨드가 있다는 이야기!
      if(is_cmd_set == 1){
        //전구를 끈다
        String output;
        StaticJsonDocument<600> doc;
        doc["from"] = device_id;
        doc["to"] = "#device2";

        JsonArray msg = doc.createNestedArray("msg");

        JsonObject object1 = msg.createNestedObject();
        object1["Type"] = "mobus";
        object1["Name"] = "response";
        object1["Value"] = "020500000000";
        JsonObject object2 = msg.createNestedObject();
        object2["Type"] = "mobus";
        object2["Name"] = "len";
        object2["Value"] = "8"; 
        JsonObject object3 = msg.createNestedObject();
        object3["Type"] = "mobus";
        object3["Name"] = "type";
        object3["Value"] = "LIGHT";
        
        serializeJson(doc, output);
        client.println(output);
        set_busy();
      }else if(is_cmd_set == 2){
        //전구를 켠다
        String output;
        StaticJsonDocument<600> doc;
        doc["from"] = device_id;
        doc["to"] = "#device2";

        JsonArray msg = doc.createNestedArray("msg");

        JsonObject object1 = msg.createNestedObject();
        object1["Type"] = "mobus";
        object1["Name"] = "response";
        object1["Value"] = "02050000FF00";
        JsonObject object2 = msg.createNestedObject();
        object2["Type"] = "mobus";
        object2["Name"] = "len";
        object2["Value"] = "8"; 
        JsonObject object3 = msg.createNestedObject();
        object3["Type"] = "mobus";
        object3["Name"] = "type";
        object3["Value"] = "LIGHT";
        
        serializeJson(doc, output);
        client.println(output);
        set_busy();
      }
      is_cmd_set = 0;
    }

    if(Serial.available()){
      char c = Serial.read();
      if(c == '0'){
        //전구를 끈다
        is_cmd_set= 1;
      }else if(c == '1'){
        //전구를 켠다
        is_cmd_set= 2;
      }
    }
    
    //서버에서 전송한 메시지를 클라이언트도 받아야 한다!
    if(client.available()){
      //서버에서 전송한 메시지가 있다!
      //Serial.println("메시지가 수신되었다");
      String msg = client.readStringUntil('\n');
      //서버에서 OK라는 응답을 하게 된다면~
      if(msg == "#OK"){
        Serial.println("서버하고 명함 주고 받는 절차를 마무리했다!");
        is_accepted = true;
      }else{
        //msg : JSON에서 object로 바꾸어줘야한다!
        StaticJsonDocument<600> doc;

        deserializeJson(doc, msg);
        
        String from = doc["from"]; // "#device2"

        JsonArray msg = doc["msg"];
        String msg_result = msg[0]["Value"]; // "01050000FF00"
        String msg_response = msg[1]["Value"];
        String msg_type = msg[2]["Value"];

        //수신받은 응답을 일단 byte array로 변환하고 본다!
        byte response[msg_response.length()/2];
        for(int i = 0, j =0;i<msg_response.length();i+=2,j++){
          int num1 = 0;
          if(msg_response[i] >= '0' && msg_response[i]<= '9'){
            num1 = msg_response[i] - '0';
          }else if(msg_response[i] >= 'A' && msg_response[i]<= 'F'){
            num1 = msg_response[i] - 'A'+10;
          }else if(msg_response[i] >= 'a' && msg_response[i]<= 'f'){
            num1 = msg_response[i] - 'a'+10;
          }

          int num2 = 0;
          if(msg_response[i+1] >= '0' && msg_response[i+1]<= '9'){
            num2 = msg_response[i+1] - '0';
          }else if(msg_response[i+1] >= 'A' && msg_response[i+1]<= 'F'){
            num2 = msg_response[i+1] - 'A'+10;
          }else if(msg_response[i+1] >= 'a' && msg_response[i+1]<= 'f'){
            num2 = msg_response[i+1] - 'a'+10;
          }

          response[j] = num1*16+num2;
        }

        //메시지가 수신되면 busy를 해제한다
        //문제점:is_busy가 false가 되는 지점은 여기가 유일하다!
        //뭔가 보낸다음 응답을 받을때 is_busy가 해제가된다!
        //내가 뭔가 보냈는데 상대가 응답하지 않는다면 is_busy는 영원히 true이다
        //그러면 항상 busy한걸로 인식되기 때문에 다음번 명령을 보낼 수가 없다!
        is_busy = false;

        if(msg_type == "VOLT"){
          //수신된 데이터의 전압을 계산한다!
          //msg_response : 문자열~!
          //3,4,5,6
          nockanda.b[0] = response[6];
          nockanda.b[1] = response[5];
          nockanda.b[2] = response[4];
          nockanda.b[3] = response[3];

          Serial.print("전압=");
          Serial.print(nockanda.f);
          Serial.println("V");
        }else if(msg_type == "CURRENT"){
          //수신된 데이터의 전압을 계산한다!
          //msg_response : 문자열~!
          //3,4,5,6
          nockanda.b[0] = response[6];
          nockanda.b[1] = response[5];
          nockanda.b[2] = response[4];
          nockanda.b[3] = response[3];

          Serial.print("전류=");
          Serial.print(nockanda.f * 1000);
          Serial.println("mA");
        }else if(msg_type == "POWER"){
          //수신된 데이터의 전압을 계산한다!
          //msg_response : 문자열~!
          //3,4,5,6
          nockanda.b[0] = response[6];
          nockanda.b[1] = response[5];
          nockanda.b[2] = response[4];
          nockanda.b[3] = response[3];

          Serial.print("순간전력=");
          Serial.print(nockanda.f);
          Serial.println("W");
        }else if(msg_type == "ENERGY"){
          //수신된 데이터의 전압을 계산한다!
          //msg_response : 문자열~!
          //3,4,5,6
          nockanda.b[0] = response[6];
          nockanda.b[1] = response[5];
          nockanda.b[2] = response[4];
          nockanda.b[3] = response[3];

          Serial.print("누적전력량=");
          Serial.print(nockanda.f);
          Serial.println("Wh");
        }else if(msg_type == "LIGHT"){
          if(response[4] == 0xFF){
            Serial.println("---전구가 켜졌습니다!!!---");
          }else{
            Serial.println("---전구가 꺼졌습니다...---");
          }
        }

/*
        Serial.print(from);
        Serial.print(",");
        Serial.print(msg_result);
        Serial.print(",");
        Serial.println(msg_response);
*/
      }
    }
  }
  client.stop();

}

void set_busy(){
  busy_timeout = millis();
  is_busy = true;
}
