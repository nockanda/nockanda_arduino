/*
 * ----------------------------------------------------------------------------
 * This is a MFRC522 library example; see https://github.com/miguelbalboa/rfid
 * for further details and other examples.
 * 
 * NOTE: The library file MFRC522.h has a lot of useful info. Please read it.
 * 
 * Released into the public domain.
 * ----------------------------------------------------------------------------
 * Example sketch/program which will try the most used default keys listed in 
 * https://code.google.com/p/mfcuk/wiki/MifareClassicDefaultKeys to dump the
 * block 0 of a MIFARE RFID card using a RFID-RC522 reader.
 * 
 * Typical pin layout used:
 * -----------------------------------------------------------------------------------------
 *             MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino
 *             Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro
 * Signal      Pin          Pin           Pin       Pin        Pin              Pin
 * -----------------------------------------------------------------------------------------
 * RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST
 * SPI SS      SDA(SS)      10            53        D10        10               10
 * SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16
 * SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14
 * SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15
 *
 */
/*
 * 예제62-1 RFID와 mp3모듈을 콜라보하라!
 * RFID는 예제코드에 나와있는대로(상단) 연결하고
 * mp3모듈은 rx와 tx를 D4,D3에 연결하고
 * busy핀을 D3에 연결했다.
 * SD카드에는 적절한 음성파일이 들어있고
 * 블로그에 압축해서 올려놓도록 함
 */
 /* mp3 파일 상태
0001 이것은
0002 입니다
0003 사과
0004 바나나
0005 멜론
0006 기차
0007 단백질파우더
0008 마그네슘
0009 항정살
0010 얌마
0011 좀 가져와줄래
0012 착한 아이구나?
*/
#include <SPI.h>
#include <MFRC522.h>
#include <SoftwareSerial.h>
#include <DFMiniMp3.h>

#define RST_PIN         9           // Configurable, see typical pin layout above
#define SS_PIN          10          // Configurable, see typical pin layout above

String tag1 = " a7 3c bb 7a"; //열쇠고리
String tag2 = " d4 6d a2 2a"; //1
String tag3 = " 4d 94 a0 3d"; //2
String tag4 = " 1c 75 84 3d"; //3
String tag5 = " bf 5f a0 3d"; //4
String tag6 = " 17 83 a0 3d"; //5
String tag7 = " 6b 08 a0 3d"; //6
String tags[] = {tag1,tag2,tag3,tag4,tag5,tag6,tag7};
String obj[] = {"사과0","바나나1","멜론2","기차3","단백질파우더4","마그네슘5","항정살6"};

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.

// Number of known default keys (hard-coded)
// NOTE: Synchronize the NR_KNOWN_KEYS define with the defaultKeys[] array
#define NR_KNOWN_KEYS   8
// Known keys, see: https://code.google.com/p/mfcuk/wiki/MifareClassicDefaultKeys
byte knownKeys[NR_KNOWN_KEYS][MFRC522::MF_KEY_SIZE] =  {
    {0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, // FF FF FF FF FF FF = factory default
    {0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5}, // A0 A1 A2 A3 A4 A5
    {0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5}, // B0 B1 B2 B3 B4 B5
    {0x4d, 0x3a, 0x99, 0xc3, 0x51, 0xdd}, // 4D 3A 99 C3 51 DD
    {0x1a, 0x98, 0x2c, 0x7e, 0x45, 0x9a}, // 1A 98 2C 7E 45 9A
    {0xd3, 0xf7, 0xd3, 0xf7, 0xd3, 0xf7}, // D3 F7 D3 F7 D3 F7
    {0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff}, // AA BB CC DD EE FF
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}  // 00 00 00 00 00 00
};

class Mp3Notify
{
public:
  static void PrintlnSourceAction(DfMp3_PlaySources source, const char* action)
  {
    if (source & DfMp3_PlaySources_Sd) 
    {
        Serial.print("SD Card, ");
    }
    if (source & DfMp3_PlaySources_Usb) 
    {
        Serial.print("USB Disk, ");
    }
    if (source & DfMp3_PlaySources_Flash) 
    {
        Serial.print("Flash, ");
    }
    Serial.println(action);
  }
  static void OnError(uint16_t errorCode)
  {
    // see DfMp3_Error for code meaning
    Serial.println();
    Serial.print("Com Error ");
    Serial.println(errorCode);
  }
  static void OnPlayFinished(DfMp3_PlaySources source, uint16_t track)
  {
    Serial.print("Play finished for #");
    Serial.println(track);  
  }
  static void OnPlaySourceOnline(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "online");
  }
  static void OnPlaySourceInserted(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "inserted");
  }
  static void OnPlaySourceRemoved(DfMp3_PlaySources source)
  {
    PrintlnSourceAction(source, "removed");
  }
};
SoftwareSerial secondarySerial(3, 4); // RX, TX
DFMiniMp3<SoftwareSerial, Mp3Notify> mp3(secondarySerial);

/*
 * Initialize.
 */
void setup() {
    Serial.begin(9600);         // Initialize serial communications with the PC
    while (!Serial);            // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
    SPI.begin(); 
    
    mfrc522.PCD_Init();         // Init MFRC522 card
    Serial.println(F("Try the most used default keys to print block 0 of a MIFARE PICC."));
    randomSeed(analogRead(0));
    mp3.begin();
    uint16_t volume = mp3.getVolume();
    Serial.print("volume ");
    Serial.println(volume);
    mp3.setVolume(24);
}
void waitMilliseconds(uint16_t msWait)
{
  uint32_t start = millis();
  
  while ((millis() - start) < msWait)
  {
    // calling mp3.loop() periodically allows for notifications 
    // to be handled without interrupts
    mp3.loop(); 
    delay(1);
  }
}
/*
 * Helper routine to dump a byte array as hex values to Serial.
 */
String dump_byte_array(byte *buffer, byte bufferSize) {
  String output = "";
    for (byte i = 0; i < bufferSize; i++) {
        //Serial.print(buffer[i] < 0x10 ? " 0" : " ");
        //Serial.print(buffer[i], HEX);
        output += buffer[i] < 0x10 ? " 0" : " ";
        output += String(buffer[i], HEX);
    }
    return output;
}

/*
 * Try using the PICC (the tag/card) with the given key to access block 0.
 * On success, it will show the key details, and dump the block data on Serial.
 *
 * @return true when the given key worked, false otherwise.
 */
bool try_key(MFRC522::MIFARE_Key *key)
{
    bool result = false;
    byte buffer[18];
    byte block = 0;
    MFRC522::StatusCode status;

    // Serial.println(F("Authenticating using key A..."));
    status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, block, key, &(mfrc522.uid));
    if (status != MFRC522::STATUS_OK) {
        // Serial.print(F("PCD_Authenticate() failed: "));
        // Serial.println(mfrc522.GetStatusCodeName(status));
        return false;
    }

    // Read block
    byte byteCount = sizeof(buffer);
    status = mfrc522.MIFARE_Read(block, buffer, &byteCount);
    if (status != MFRC522::STATUS_OK) {
        // Serial.print(F("MIFARE_Read() failed: "));
        // Serial.println(mfrc522.GetStatusCodeName(status));
    }
    else {
        // Successful read
        result = true;
        //Serial.print(F("Success with key:"));
        //dump_byte_array((*key).keyByte, MFRC522::MF_KEY_SIZE);
        //Serial.println();
        // Dump block data
        //Serial.print(F("Block ")); Serial.print(block); Serial.print(F(":"));
        //dump_byte_array(buffer, 16);
        //Serial.println();
    }
    //Serial.println();

    mfrc522.PICC_HaltA();       // Halt PICC
    mfrc522.PCD_StopCrypto1();  // Stop encryption on PCD
    return result;
}
//전체 tags에서 태깅한 태그를 검색하는 함수
//단 등록이 안된 카드를 태깅하는 경우는 없다고 가정함
int search_obj(String input_tag){
  int i=0; 
  for(i = 0;i<7;i++){
    if(tags[i]==input_tag){
      break;
    }
  }
  return i;
}

/*
 * Main loop.
 */
int giveandtake = 0;
int fruit = 0;
void loop() {
    // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
    if(giveandtake == 0){
      //질문을 해야하는 상황
      fruit = random(7); // 0~6
      Serial.print(obj[fruit]);
      Serial.println("를 가지고 오너라!");
      //음성
      mp3.playMp3FolderTrack(10);
      waitMilliseconds(1000); 
      mp3.playMp3FolderTrack(fruit+3);
      waitMilliseconds(1500); 
      mp3.playMp3FolderTrack(11); 
      waitMilliseconds(1000); 
      giveandtake = 1; //대기상태
    }
    
    if ( ! mfrc522.PICC_IsNewCardPresent())
        return;

    // Select one of the cards
    if ( ! mfrc522.PICC_ReadCardSerial())
        return;

    // Show some details of the PICC (that is: the tag/card)
    Serial.print(F("Card UID:"));
    String uid = dump_byte_array(mfrc522.uid.uidByte, mfrc522.uid.size);
    //Serial.println(uid);
    //Serial.println(tag1);
    //Serial.println(ismatch(uid,tag1));
    
    //if(ismatch(uid,tag1)){ Serial.print("tag1");}
    //else if(ismatch(uid,tag2)){ Serial.print("tag2");}
    //else{Serial.print("not found!");};
    //fruit = 0(사과),1(바나나)
    //giveandtake
    //사과를 가져오라고 했는데 사과를 가져온경우 -> 잘했다
    //사과를 가져오라고 했는데 다른것을 가져오면 다른것을 가져왔다고 알려준다.
    int tag_index = search_obj(uid);
    if(tag_index == fruit){
      //잘 가져온경우
      Serial.println("잘가져왔구나!");
      //음성
      mp3.playMp3FolderTrack(12);
      waitMilliseconds(1000); 
      giveandtake = 0;
    }else{
      //잘못가져온경우
      Serial.println("잘못가져왔다!");
      Serial.print(obj[fruit]);
      Serial.print("를 가져오라고 했더니..");
      Serial.print(obj[tag_index]);
      Serial.println("를 가져왔네...");
      mp3.playMp3FolderTrack(1);
      waitMilliseconds(1000); 
      mp3.playMp3FolderTrack(tag_index+3);
      waitMilliseconds(1500); 
      mp3.playMp3FolderTrack(2); 
      waitMilliseconds(1000); 
      giveandtake = 0;
    }
    
    

    
    Serial.println();
    //Serial.print(F("PICC type: "));
    MFRC522::PICC_Type piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);
    //Serial.println(mfrc522.PICC_GetTypeName(piccType));
    
    // Try the known default keys
    MFRC522::MIFARE_Key key;
    for (byte k = 0; k < NR_KNOWN_KEYS; k++) {
        // Copy the known key into the MIFARE_Key structure
        for (byte i = 0; i < MFRC522::MF_KEY_SIZE; i++) {
            key.keyByte[i] = knownKeys[k][i];
        }
        // Try the key
        if (try_key(&key)) {
            // Found and reported on the key and block,
            // no need to try other keys for this PICC
            break;
        }
        
        // http://arduino.stackexchange.com/a/14316
        if ( ! mfrc522.PICC_IsNewCardPresent())
            break;
        if ( ! mfrc522.PICC_ReadCardSerial())
            break;
    }
}