
#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <WebSocketsServer.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Hash.h>
#include "DHT.h"
#include <ArduinoJson.h>

#define DHTPIN D6
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

#define USE_SERIAL Serial

#define btn1 D3
#define btn2 D4
#define mosfet D5

bool auto_mode = false;
int auto_min = 30;
int auto_max = 40;

ESP8266WiFiMulti WiFiMulti;

//웹서버의 포트는 기본 포트인 80번을 사용한다!
ESP8266WebServer server(80);
//웹서버와 웹클라이언트가 뒷구멍으로 주고받는 데이터는 웹소켓에서 81번을 쓴다!
WebSocketsServer webSocket = WebSocketsServer(81);

String response = "\
<html>\
<head>\
<meta name=\"viewport\" content=\"width=device-width\">\
<meta charset=\"utf-8\">\
<script>\
  var connection = new WebSocket('ws://'+location.hostname+':81/', ['arduino']);\
  connection.onopen = function () {\
     connection.send('Connect ' + new Date());\
  };\
  connection.onerror = function (error) {\
     console.log('WebSocket Error ', error);\
  };\
  connection.onmessage = function (e) {\
     console.log('Server: ', e.data);\
     var data = JSON.parse(e.data);\
     var state = document.getElementById('state');\
     var mode = document.getElementById('mode');\
     if(data.state == 0){\
       state.innerText = '멈춤';\
       state.style.backgroundColor = 'red';\
       state.style.color = 'white';\
     }else{\
       state.innerText = '작동중';\
       state.style.backgroundColor = 'green';\
       state.style.color = 'white';\
     }\
     if(data.mode == 0){\
       mode.innerText = '수동';\
       mode.style.color = 'red';\
     }else{\
       mode.innerText = '자동';\
       mode.style.color = 'green';\
     }\
     document.getElementById('humi').innerText = data.humi + \"%\";\
     document.getElementById('temp').innerText = data.temp + \"'C\";\
     document.getElementById('now_min').innerText = data.min;\
     document.getElementById('now_max').innerText = data.max;\
  };\
  function on_msg(){\
     var msg = {\
        type:'cont',\
        sw:1\
     };\
     connection.send(JSON.stringify(msg));\
  }\
  function off_msg(){\
     var msg = {\
        type:'cont',\
        sw:0\
     };\
     connection.send(JSON.stringify(msg));\
  }\
  function auto_set(){\
    var msg = {\
        type:'auto',\
        min:document.getElementById('min').value,\
        max:document.getElementById('max').value\
     };\
     connection.send(JSON.stringify(msg));\
  }\
</script>\
</head>\
<body>\
<table border=1 width=300>\
   <tr><th colspan=2>녹칸다의 IoT가습기 컨트롤러!!</th></tr>\
   <tr><th width=50%>작동상태</th><td id=state>-</td></tr>\
   <tr><th>모드</th><td id=mode>-</td></tr>\
   <tr><th>습도</th><td id=humi>-%</td></tr>\
   <tr><th>온도</th><td id=temp>-'C</td></tr>\
    <tr>\
        <td align=center>\
            <button onclick='on_msg()'>켜기</button>\
        </td>\
         <td align=center>\
            <button onclick='off_msg()'>끄기</button>\
         </td>\
   </tr>\
   <tr><th>하한값</th><th>상한값</th></tr>\
   <tr><td id=now_min>-</td><td id=now_max>-</td></tr>\
   <tr><td><input type=text id=min></td><td><input type=text id=max></td></tr>\
   <tr><td colspan=2 align=center><button onclick='auto_set()'>자동기능 활성화</button></td></tr>\
</table>\
</body>\
</html>";


//클라이언트에서 서버쪽으로 값이 전송되었을때 뭘할거냐?
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            USE_SERIAL.printf("[%u] Disconnected!\n", num);
            break;
        case WStype_CONNECTED: {
            IPAddress ip = webSocket.remoteIP(num);
            USE_SERIAL.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);

            //num = 소켓번호(클라이언트번호)
            //webSocket.sendTXT(num, "Connected");
        }
            break;
        case WStype_TEXT:
        //메시지 수신부
            USE_SERIAL.printf("[%u] get Text: %s\n", num, payload);

            String data = "";
            //하나씩 모아서 큰 문자열을 만드시오!!!
            for(int i = 0;i<length;i++){
              data += (char)payload[i];
            }

            StaticJsonDocument<200> doc;
            deserializeJson(doc, data);
            String type = doc["type"]; // "cont"

            if(type == "cont"){
              int sw = doc["sw"];
              //0이면 끄고, 1이면 켠다!
              digitalWrite(mosfet,sw);

              auto_mode = false;
            }else if(type == "auto"){
              auto_min = doc["min"];
              auto_max = doc["max"];

              auto_mode = true;
            }
            
            

            break;
    }

}

void setup() {
    //USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);
    pinMode(btn1,INPUT_PULLUP);
    pinMode(btn2,INPUT_PULLUP);
    pinMode(mosfet,OUTPUT);
    dht.begin();
    //USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

    for(uint8_t t = 4; t > 0; t--) {
        USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
        USE_SERIAL.flush();
        delay(1000);
    }

    //자기자신의 IP공유기 ID비밀번호 집어넣는곳!
    WiFiMulti.addAP("popcorn", "11213144");

    while(WiFiMulti.run() != WL_CONNECTED) {
        delay(100);
    }

    //IP공유기로부터 할당받은 IP주소를 여기서 출력한다!
    USE_SERIAL.println("IP address: ");
    USE_SERIAL.println(WiFi.localIP());
  
    //웹소켓 서버를 연다
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);

    //윈도우10, 안드로이드 안됨..의미없는 기능
    if(MDNS.begin("esp8266")) {
        USE_SERIAL.println("MDNS responder started");
    }

    //웹서버의 index.html
    //웹서버가 클라이언트에게 response해주는 부분!

    server.on("/", []() {
        server.send(200, "text/html", response);
    });

    server.begin();

    // Add service to MDNS
    MDNS.addService("http", "tcp", 80);
    MDNS.addService("ws", "tcp", 81);
}

unsigned long last_10sec = 0;
unsigned int counter = 0;

void loop() {
    unsigned long t = millis();
    webSocket.loop(); //이거 있어야한다!
    server.handleClient(); //이거도 있어야한다!

    if(digitalRead(btn1) == LOW){
      //풀업방식에서 버튼이 눌려진경우!
      digitalWrite(mosfet,HIGH);
    }
    if(digitalRead(btn2) == LOW){
      //풀업방식에서 버튼이 눌려진경우!
      digitalWrite(mosfet,LOW);
    }

    //delay(~~~~) 절때 쓰면 안됨!

    //10초간격으로 뭔가 하겠다~
    if((t - last_10sec) > 1000) {
      last_10sec = millis();

      float h = dht.readHumidity();
      float t = dht.readTemperature();

      //지금 모드가 오토모드인가?
      if(auto_mode){
        //지금 습도가 최대보다 작고 최소보다 크도록 하시오!
        if(h > auto_max){
          digitalWrite(mosfet,LOW);
        }else if(h < auto_min){
          digitalWrite(mosfet,HIGH);
        }
      }
      
      String msg = "{\"state\":"+String(digitalRead(mosfet))+",\"mode\":"+String(auto_mode)+",\"humi\":"+String(h)+",\"temp\":"+String(t)+",\"min\":"+String(auto_min)+",\"max\":"+String(auto_max)+"}";
      webSocket.broadcastTXT(msg); //모든클라이언트에게 메시지 전송!
        
    }
}

