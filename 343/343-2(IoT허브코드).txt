
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
#include <SPI.h>              // include libraries
#include <LoRa.h>
#include "CRC16.h"
#include "CRC.h"

CRC16 crc;

//920.9Mhz
const long frequency = 9209E5;

// Update these with values suitable for your network.

const char* ssid = "popcorn";
const char* password = "11213144";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

 
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/station/rain");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  //NSS(D10), RST(D9), DIO0(D3)
  LoRa.setPins(D10, D9, D3);
  if (!LoRa.begin(frequency)) {
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }

  Serial.println("LoRa init succeeded.");
  Serial.println();
  Serial.println("LoRa Simple Gateway");
  Serial.println("Only receive messages from nodes");
  Serial.println("Tx: invertIQ enable");
  Serial.println("Rx: invertIQ disable");
  Serial.println();

  LoRa.onReceive(onReceive);
  LoRa.onTxDone(onTxDone);
  LoRa_rxMode();
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  
}

//수신모드
void LoRa_rxMode(){
  LoRa.disableInvertIQ();               // normal mode
  LoRa.receive();                       // set receive mode
}

//송신모드
void LoRa_txMode(){
  LoRa.idle();                          // set standby mode
  LoRa.enableInvertIQ();                // active invert I and Q signals
}

void LoRa_sendMessage(String message) {
  LoRa_txMode();                        // set tx mode
  LoRa.beginPacket();                   // start packet
  LoRa.print(message);                  // add payload
  LoRa.endPacket(true);                 // finish packet and send it
}

void onReceive(int packetSize) {
  
  byte recv[50];

  int recv_count=0;
  while (LoRa.available()) {
    recv[recv_count] = LoRa.read();
    recv_count++;
  }

  Serial.print("recv_count=");
  Serial.println(recv_count);
  for(int i = 0;i<recv_count;i++){
    Serial.print(recv[i],HEX);
    Serial.print(",");
  }
  Serial.println();

  unsigned int recv_crc = recv[12] << 8 | recv[13];

  crc.reset();
  crc.setPolynome(0x1021);
  for(int i = 0;i<12;i++){
    crc.add(recv[i]);
  }
  if(recv_crc == crc.getCRC()){
    //데이터가 정상적으로 수신된 경우!
    //1.내가 게이트웨이인데 목적지가 내가 맞느냐?
    //2.어떤 관측소에서 데이터라 날라왔는데 내가 받아야하는게 맞느냐?
    //[2,3]
    float degree = (recv[2] << 8 | recv[3])/100.0;
    float wind_speed = (recv[4] << 8 | recv[5])/100.0;
    float rain_amount = (recv[6] << 8 | recv[7])/100.0;
    float h = (recv[8] << 8 | recv[9])/100.0;
    float t = (recv[10] << 8 | recv[11])/100.0;

    Serial.print("풍향=");
    Serial.print(degree);
    Serial.print(",풍속=");
    Serial.print(wind_speed);
    Serial.print(",우량=");
    Serial.print(rain_amount);
    Serial.print(",습도=");
    Serial.print(h);
    Serial.print(",온도=");
    Serial.println(t);
    String json = "{\"wind_direct\":"+String(degree)+",\"wind_speed\":"+String(wind_speed)+",\"rain_amout\":"+String(rain_amount)+",\"humi\":"+String(h)+",\"temp\":"+String(t)+"}";

    //웨더스테이션의 id별로 다른 topic으로 publish한다!
    //0xC0
    client.publish("nockanda/station/data", json.c_str());
   
  }else{
    Serial.println("잘못된 데이터를 수신함!");
  }
}

void onTxDone() {
  Serial.println("TxDone");
  LoRa_rxMode();
}

boolean runEvery(unsigned long interval)
{
  static unsigned long previousMillis = 0;
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval)
  {
    previousMillis = currentMillis;
    return true;
  }
  return false;
}
