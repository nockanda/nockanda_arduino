#include <SPI.h>              // include libraries
#include <LoRa.h>
#include "CRC16.h"
#include "CRC.h"

CRC16 crc;

byte station_id = 0xC0;
byte gateway_id = 0xAA;

//풍향센서
float direct[] = {3.84,1.98,2.25,0.41,0.45,0.32,0.90,0.62,1.40,1.19,3.08,2.93,4.62,4.04,4.33,3.43};

//풍속센서
const byte anemo_pin = 2;
volatile int anemo_count = 0;
volatile unsigned long anemo_t = 0;
unsigned long nockanda_time = 0;

//우량센서(측우기)
const byte rain_pin = 3;
volatile int rain_count = 0;
volatile unsigned long rain_time = 0;

//온습도(dht-11)
#include "DHT.h"
#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

//920.9Mhz
const long frequency = 9209E5;

void setup() {
  Serial.begin(9600);                   // initialize serial
   //풍속
  pinMode(anemo_pin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(anemo_pin), anemo_counter, FALLING);
  //우량
  pinMode(rain_pin, INPUT_PULLUP); //rainfall
  attachInterrupt(digitalPinToInterrupt(rain_pin), rain_counter, FALLING);
  //온습도
  dht.begin();
  
  LoRa.setPins(10, 9, 7);
  if (!LoRa.begin(frequency)) {
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }

  Serial.println("LoRa init succeeded.");
  Serial.println();
  Serial.println("LoRa Simple Node");
  Serial.println("Only receive messages from gateways");
  Serial.println("Tx: invertIQ disable");
  Serial.println("Rx: invertIQ enable");
  Serial.println();

  LoRa.onReceive(onReceive);
  LoRa.onTxDone(onTxDone);
  LoRa_rxMode();
}

void loop() {
//아두이노 우노쪽 수신부 구현
  if(Serial.available()){
    //IoT보드에서 우노쪽으로 뭔가~ 전송한경우
    char c = Serial.read(); //1byte 읽는다!
    //iot보드가 MQTT로 강수량을 초기화하는 값을 수신하게되면
    //iot보드쪽에서 우노쪽으로 값이 전달되고 강수량값을 초기화한다!
    rain_count = 0;
  }

  //1000ms에 한번씩 모든 센서의 값을 읽어온다!
  if(millis() - nockanda_time > 1000){
    nockanda_time = millis();

    //풍향센서 부분
    int vane_raw_data = analogRead(A0);
    float vane_volt = 5 * vane_raw_data/1023.0;

    float degree = 0;
    for(int i =0;i<16;i++){
      if(i == 3 || i == 4){
        if(abs(direct[i] - vane_volt) < 0.02){
           degree = i * 22.5;
           //Serial.println(degree);
           break;
        }
      }else{
        if(abs(direct[i] - vane_volt) < 0.05){
           degree = i * 22.5;
           //Serial.println(degree);
           break;
        }
      }
    }

    
    //km/h => m/s*1000/3600
    //풍속센서 
    float wind_speed = anemo_count*2.4*1000/3600;
    anemo_count = 0;

    //우량값
    float rain_amount = rain_count*0.2794;

    //온도와 습도
    float h = dht.readHumidity(); //NAN
    float t = dht.readTemperature(); //NAN

    if(isnan(h)) h = -99;
    if(isnan(t)) t = -99;


    byte data_frame[12];
    data_frame[0] = station_id;
    data_frame[1] = gateway_id;
    data_frame[2] = (int)(degree*100) >> 8;
    data_frame[3] = (int)(degree*100) & 8;
    data_frame[4] = (int)(wind_speed*100) >> 8;
    data_frame[5] = (int)(wind_speed*100) & 8;
    data_frame[6] = (int)(rain_amount*100) >> 8;
    data_frame[7] = (int)(rain_amount*100) & 8;
    data_frame[8] = (int)(h*100) >> 8;
    data_frame[9] = (int)(h*100) & 8;
    data_frame[10] = (int)(t*100) >> 8;
    data_frame[11] = (int)(t*100) & 8;
  
  
    crc.reset();
    crc.setPolynome(0x1021);
  
    
    for(int i = 0;i<12;i++){
      crc.add(data_frame[i]);
      //Serial.println(data_frame[i],HEX);
    }
  
    byte crc_high = crc.getCRC() >> 8;
    byte crc_low = crc.getCRC() & 0xFF;
  
    //Serial.println(crc_high,HEX);
    //Serial.println(crc_low,HEX);
    //CRC
    LoRa_txMode();
    LoRa.beginPacket();
    for(int i = 0;i<12;i++){
       LoRa.write(data_frame[i]);  
    }
    LoRa.write(crc_high);
    LoRa.write(crc_low);
    LoRa.endPacket(true); 
  }
}

void LoRa_rxMode(){
  LoRa.enableInvertIQ();                // active invert I and Q signals
  LoRa.receive();                       // set receive mode
}

void LoRa_txMode(){
  LoRa.idle();                          // set standby mode
  LoRa.disableInvertIQ();               // normal mode
}

void LoRa_sendMessage(String message) {
  LoRa_txMode();                        // set tx mode
  LoRa.beginPacket();                   // start packet
  LoRa.print(message);                  // add payload
  LoRa.endPacket(true);                 // finish packet and send it
}

void onReceive(int packetSize) {
  String message = "";

  while (LoRa.available()) {
    message += (char)LoRa.read();
  }

  Serial.print("Node Receive: ");
  Serial.println(message);
}

void onTxDone() {
  Serial.println("TxDone");
  LoRa_rxMode();
}

boolean runEvery(unsigned long interval)
{
  static unsigned long previousMillis = 0;
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval)
  {
    previousMillis = currentMillis;
    return true;
  }
  return false;
}
void anemo_counter() {
  //1초 = 1000ms  (=66.66m/s)
  if(millis() - anemo_t > 10){
    anemo_t = millis();
    //인터발 간격으로 한번씩 실행이 되는 부분
    anemo_count++;
  }
}

void rain_counter() {
  //채터링 
  if(millis() - rain_time > 10){
    rain_time = millis();
    rain_count++;
  }
}