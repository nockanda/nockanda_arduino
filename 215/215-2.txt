/*
  예제 215-2 직전예제에 LCD모듈(ILI9341)을 연결해서 한글로 결과를 LCD화면에 출력하시오!
 */
#include <ESP8266WiFi.h>
#include "SPI.h"
#include "Adafruit_GFX.h"
#include "Adafruit_ILI9341.h"
#include <SPI.h>
#include <SD.h>

// For the Adafruit shield, these are the default.
#define TFT_DC D9
#define TFT_CS D10

#define FONT16 32
#define FONT24 72
#define FONT36 128
#define FONT40 200

// Use hardware SPI (on Uno, #13, #12, #11) and the above for CS/DC
Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC);
// If using the breakout, change pins as desired
//Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC, TFT_MOSI, TFT_CLK, TFT_RST, TFT_MISO);
File myFile;

#ifndef STASSID
#define STASSID "~~~~~" //와이파이 검색했을때 뜨는 이름
#define STAPSK  "~~~~~" //패스워드
#endif

const char* ssid = STASSID;
const char* password = STAPSK;

const char* host = "know.nifos.go.kr";
const int httpsPort = 80;

String yourkey = "~~~~~~";
String mount_id = "2005";

WiFiClient client;
void setup() {
  Serial.begin(115200);

  tft.begin();
  Serial.print(F("Initializing SD card..."));

  if (!SD.begin(D4)) {
    Serial.println(F("initialization failed!"));
    while (1);
  }
  Serial.println(F("initialization done."));
  tft.setRotation(3);
  tft.fillScreen(ILI9341_BLACK);
  
  Serial.println();
  Serial.print("connecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  
  Serial.print("connecting to ");
  Serial.println(host);

  //클라이언트와 서버와 커넥트
  if (!client.connect(host, httpsPort)) {
    Serial.println("connection failed");
    return;
  }

  String url = "/openapi/mtweather/mountListSearch.do?keyValue="+yourkey+"&version=1.0&obsid="+mount_id;

  //사물인터넷보드에서 RSS서버로 보내는 요청!
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n\r\n");

  //서버로부터 응답이 있을때까지 대기하겠다..
  //언제까지 기다려야하나요..?
  //timeout!
  unsigned long t = millis(); //생존시간
  while(1){
    if(client.available()) break;
    if(millis() - t > 10000) break;
  }


  //응답이 날라오는 부분!
  Serial.println("request sent");

  while(client.available()){
    String data = client.readStringUntil('\n'); //readline();
    if(data.indexOf("<metadata>") == -1) continue;
    //관심영역 확보 OK
    //xml의 각필드를 구분
    //<obsname>산이름</obsname>
    //<tm>관측시간
    //<tm10m>-13.5</tm10m>
    //<hm10m>33.6</hm10m>
    //<wd10m>245.9</wd10m>
    //<wd10mstr>WSW</wd10mstr>
    //<ws10m>1.2</ws10m>
    //<rn>0.0</rn>
    //<cprn>0.0</cprn>
    //<pa>1022.9</pa>
    //<ts>-5.7</ts>
    //<tm2m>-13.6</tm2m>
    //<hm2m>33.8</hm2m>
    //<wd2m>271.7</wd2m>
    //<wd2mstr>W</wd2mstr>
    //<ws2m>0.5</ws2m>
    String tm = data.substring(data.indexOf("<tm>")+4,data.indexOf("</tm>"));
    String mountname = data.substring(data.indexOf("<obsname>")+9,data.indexOf("</obsname>"));
    String tm10m = data.substring(data.indexOf("<tm10m>")+7,data.indexOf("</tm10m>"));
    String hm10m = data.substring(data.indexOf("<hm10m>")+7,data.indexOf("</hm10m>"));
    String wd10m = data.substring(data.indexOf("<wd10m>")+7,data.indexOf("</wd10m>"));
    String wd10mstr = data.substring(data.indexOf("<wd10mstr>")+10,data.indexOf("</wd10mstr>"));
    String ws10m = data.substring(data.indexOf("<ws10m>")+7,data.indexOf("</ws10m>"));
    String rn = data.substring(data.indexOf("<rn>")+4,data.indexOf("</rn>"));
    String cprn = data.substring(data.indexOf("<cprn>")+6,data.indexOf("</cprn>"));
    String pa = data.substring(data.indexOf("<pa>")+4,data.indexOf("</pa>"));
    String ts = data.substring(data.indexOf("<ts>")+4,data.indexOf("</ts>"));
    String tm2m = data.substring(data.indexOf("<tm2m>")+6,data.indexOf("</tm2m>"));
    String hm2m = data.substring(data.indexOf("<hm2m>")+6,data.indexOf("</hm2m>"));
    String wd2m = data.substring(data.indexOf("<wd2m>")+6,data.indexOf("</wd2m>"));
    String wd2mstr = data.substring(data.indexOf("<wd2mstr>")+9,data.indexOf("</wd2mstr>"));
    String ws2m = data.substring(data.indexOf("<ws2m>")+6,data.indexOf("</ws2m>"));
    int y_pos = 0;
    hangul2utf8(0,y_pos,"국립산림과학원 산악기상정보",ILI9341_GREEN,16);
    y_pos+=16;
    Serial.println("관측시간="+tm);
    hangul2utf8(0,y_pos,"관측시간="+tm,ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("산이름="+mountname);
    hangul2utf8(0,y_pos,"산이름="+mountname,ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("10m기온="+tm10m + "'c");
    hangul2utf8(0,y_pos,"10m기온="+tm10m + "'c",ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("10m습도="+hm10m + "%");
    hangul2utf8(0,y_pos,"10m습도="+hm10m + "%",ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("10m풍향="+wd10m);
    Serial.println("10m풍향="+wd10mstr);
    hangul2utf8(0,y_pos,"10m풍향="+wd10mstr,ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("10m풍속="+ws10m + "m/s");
    hangul2utf8(0,y_pos,"10m풍속="+ws10m + "m/s",ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("전도식 강우량="+rn + "mm");
    hangul2utf8(0,y_pos,"전도식 강우량="+rn + "mm",ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("무게식 강우량="+cprn + "mm");
    hangul2utf8(0,y_pos,"무게식 강우량="+cprn + "mm",ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("기압="+pa + "hPa");
    hangul2utf8(0,y_pos,"기압="+pa + "hPa",ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("지면온도="+ts+ "'c");
    hangul2utf8(0,y_pos,"지면온도="+ts+ "'c",ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("2m기온="+tm2m+ "'c");
    hangul2utf8(0,y_pos,"2m기온="+tm2m+ "'c",ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("2m습도="+hm2m+ "%");
    hangul2utf8(0,y_pos,"2m습도="+hm2m+ "%",ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("2m풍향="+wd2m);
    
    Serial.println("2m풍향="+wd2mstr);
    hangul2utf8(0,y_pos,"2m풍향="+wd2mstr,ILI9341_WHITE,16);
    y_pos+=16;
    Serial.println("2m풍속="+ws2m+ "m/s");
    hangul2utf8(0,y_pos,"2m풍속="+ws2m+ "m/s",ILI9341_WHITE,16);
    y_pos+=16;
  }
  Serial.println("DONE");
}

void loop() {
}

void draw_hangul(int x,int y, String utf8code,uint16_t color,int font_size){
  
  int font_array_count = 0;
  String direct;

  if(font_size == 16) {font_array_count=2;direct=F("nock16/");}
  else if(font_size == 24) {font_array_count=3;direct=F("nock24/");}
  else if(font_size == 32) {font_array_count=4;direct=F("nock32/");}
  else if(font_size == 40) {font_array_count=5;direct=F("nock40/");}

  //파일불러오기
  myFile = SD.open(direct+utf8code+F(".txt"));
  String output;
  if (myFile) {
    while (myFile.available()) {
      output += String((char)myFile.read());
    }
    //Serial.println(output);
    myFile.close();
  } else {
    Serial.println("NO FILE");
    return;
  }

  if(x+font_size > tft.width()){
    x=0;
    y+=font_size;
  }
  int count = 1;
  //4개가 1line
  for(int i =0;i<output.length();i+=2){
    //Serial.println();
    //Serial.println(i);
    byte value = shex2hex(output[i], output[i+1]);

    for(int j =0;j<8;j++){
        byte temp = (128>>j);
        if((value & temp) == temp){
          //해당 bit가 1인것!
              tft.drawPixel(x,y,color);
              //Serial.print("1");
          }else{
              //Serial.print("0");
          }
          x++;
    }

   if(count % font_array_count ==0){
    //한라인구분
    //Serial.println();
    if(i == output.length()-2){
      y++;
      y-=font_size;
      
    }else{
      y++;
      x-=font_size;
    }
    //Serial.print("(");
    //Serial.print(i);
    //Serial.print(",");
    //Serial.print(x);
    //Serial.print(",");
    //Serial.print(y);
    //Serial.println(")");
   }
    count++;
  }//for
  tft.setCursor(x, y);
}

void draw_hangul2(int x,int y, byte hexcode[],uint16_t color,int font_size){
  int font_array_count;
  int loop_size = font_size*font_size/8;
  if(font_size == 16) {font_array_count=2;}
  else if(font_size == 24) {font_array_count=3;}
  else if(font_size == 32) {font_array_count=4;}
  else if(font_size == 40) {font_array_count=5;}
  int count = 1;
  //4개가 1line
  for(int i =0;i<loop_size;i++){
    //Serial.println();
    //Serial.println(i);
    byte value = hexcode[i];

    for(int j =0;j<8;j++){
        byte temp = (128>>j);
        if((value & temp) == temp){
          //해당 bit가 1인것!
              tft.drawPixel(x,y,color);
              //Serial.print("1");
          }else{
              //Serial.print("0");
          }
          x++;
    }

   if(count % font_array_count ==0){
    //한라인구분
    //Serial.println();
    if(i == loop_size-2){
      y++;
      y-=font_size;
      
    }else{
      y++;
      x-=font_size;
    }
    //Serial.print("(");
    //Serial.print(i);
    //Serial.print(",");
    //Serial.print(x);
    //Serial.print(",");
    //Serial.print(y);
    //Serial.println(")");
   }
    count++;
  }//for
}

byte shex2hex(char data1, char data2){
//3F
//숫자는 -'0' 하면 숫자로된다
//a~f 는 -'a'+10 하면 숫자로된다
  byte output;

  int a,b;
  if(data1 >= '0' && data1 <= '9'){
   a = data1-'0';
  }else if(data1 >= 'a' && data1 <= 'f'){
   a = data1-'a'+10;
  }else if(data1 >= 'A' && data1 <= 'F'){
   a = data1-'A'+10; 
  }
  if(data2 >= '0' && data2 <= '9'){
   b = data2-'0';
  }else if(data2 >= 'a' && data2 <= 'f'){
   b = data2-'a'+10;
  }else if(data2 >= 'A' && data2 <= 'F'){
   b = data2-'A'+10; 
  }

  return a*16+b;

}

void hangul2utf8(int x,int y, String text,uint16_t color,int fontsize){
  tft.setTextColor(color); 
  if(fontsize == 16) tft.setTextSize(2);
  if(fontsize == 24) tft.setTextSize(3);
  
  tft.setCursor(x, y);
  for(int i = 0;i<text.length();){
    if(text[i] >128){
      //한글
      //Serial.println("한글");
      String output = String(text[i]&0xFF,HEX);
      output += String(text[i+1]&0xFF,HEX);
      output += String(text[i+2]&0xFF,HEX);
      i+=3;
      //Serial.println(output);
      //이전 커서값을 가져와야한다..
      
      draw_hangul(tft.getCursorX(),tft.getCursorY(),output,color,fontsize);

    }else{
      //ascii
      //Serial.println("아스키");
      //Serial.println(text[i]);
       tft.print(text[i]);
      i++;
    }

  }
}

void set_hangul(String hangul,int font_size,byte data[]){
  String output;
  if(hangul[0] >128){
    //한글
    //Serial.println("한글");
    output = String(hangul[0]&0xFF,HEX);
    output += String(hangul[1]&0xFF,HEX);
    output += String(hangul[2]&0xFF,HEX);
  }else{
    //한글이 아닙니다~!
    return;
  }
  String direct;
  if(font_size == 16) {direct=F("nock16/");}
  else if(font_size == 24) {direct=F("nock24/");}
  else if(font_size == 32) {direct=F("nock32/");}
  else if(font_size == 40) {direct=F("nock40/");}
  //Serial.println(hangul);
  //Serial.println(direct+output+".txt");
  myFile = SD.open(direct+output+F(".txt"));

  int count = 0;
  char temp[2];
  if (myFile) {
    while (myFile.available()) {
      //data += String((char)myFile.read());
      myFile.readBytes(temp,2);
      data[count] = shex2hex(temp[0],temp[1]);
      count++;
    }
    //Serial.println(output);
    myFile.close();
  } else {
    Serial.println("NO FILE");
    return;
  }

}
