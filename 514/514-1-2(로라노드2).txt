
#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <WebSocketsServer.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Hash.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>

SoftwareSerial lora(D5,D6);
#define mode D7

#ifndef APSSID
#define APSSID "nockanda lora2"
#define APPSK  "11213144"
#endif

const char *ssid = APSSID;
const char *password = APPSK;

#define USE_SERIAL Serial


//웹서버의 포트는 기본 포트인 80번을 사용한다!
ESP8266WebServer server(80);
//웹서버와 웹클라이언트가 뒷구멍으로 주고받는 데이터는 웹소켓에서 81번을 쓴다!
WebSocketsServer webSocket = WebSocketsServer(81);

byte now_addh = 0;
byte now_addl = 0;
byte now_ch = 0;
byte now_mode = 0;
byte now_txpower = 0;
byte send_buff[4];

String myhtml = "\
<html>\
<head>\
<meta name=\"viewport\" content=\"width=device-width\">\
<meta charset=\"utf-8\">\
<script>\
  var connection = new WebSocket('ws://'+location.hostname+':81/', ['arduino']);\
  connection.onopen = function () {\
  };\
  connection.onerror = function (error) {\
     console.log('WebSocket Error ', error);\
  };\
  connection.onmessage = function (e) {\
     console.log('Server: ', e.data);\
     var mylog = document.getElementById('mylog').value;\
     mylog += e.data + '\\n';\
     document.getElementById('mylog').value = mylog;\
  };\
  function send_setting(){\
     var mydata = {};\
      mydata.type=1;\
      mydata.addh= document.getElementById('addh').value*1;\
      mydata.addl=document.getElementById('addl').value*1;\
      mydata.ch=document.getElementById('ch').value*1;\
      if(document.getElementById('mode1').checked){\
        mydata.mode=1;\
      }else if(document.getElementById('mode2').checked){\
         mydata.mode=2;\
      }\
      if(document.getElementById('tx1').checked){\
        mydata.txpower=1;\
      }else if(document.getElementById('tx2').checked){\
        mydata.txpower=2;\
      }else if(document.getElementById('tx3').checked){\
        mydata.txpower=3;\
      }else if(document.getElementById('tx4').checked){\
        mydata.txpower=4;\
      }\
     connection.send(JSON.stringify(mydata));\
  }\
  function test_msg(){\
    var mylog = document.getElementById('mylog').value;\
    mylog += '테스트메시지전송\\n';\
    document.getElementById('mylog').value = mylog;\
    var mydata = {};\
    mydata.type=0;\
    mydata.addh= document.getElementById('send_addh').value*1;\
    mydata.addl=document.getElementById('send_addl').value*1;\
    mydata.ch=document.getElementById('send_ch').value*1;\
    connection.send(JSON.stringify(mydata));\
  }\
</script>\
</head>\
<body>\
<table border=1 width=500>\
 <tr>\
    <th colspan=2>녹칸다의 로라설정페이지!</th>\
 </tr>\
  <tr>\
    <th>현재상태:</th>\
    <th id=result>-</th>\
 </tr>\
 <tr>\
    <td width=200>주소(ADDH)</td>\
    <td><input type=text id=addh value=%addh%></td>\
 </tr>\
 <tr>\
    <td>주소(ADDL)</td>\
    <td><input type=text id=addl value=%addl%></td>\
 </tr>\
 <tr>\
    <td>채널(CH)</td>\
    <td><input type=text id=ch value=%ch%></td>\
 </tr>\
 <tr>\
    <td>모드</td>\
    <td>\
           <input type=radio id=mode1 name=mymode %mode1%>Fixed Trans.\
           <input type=radio id=mode2 name=mymode %mode2%>Transparent Trans.\
   </td>\
 </tr>\
 <tr>\
    <td>송신파워(Txpower</td>\
    <td>\
       <input type=radio id=tx1 name=mytxpower %power1%>21dBm\
       <input type=radio id=tx2 name=mytxpower %power2%>24dBm\
       <input type=radio id=tx3 name=mytxpower %power3%>27dBm\
       <input type=radio id=tx4 name=mytxpower %power4%>30dBm\
    </td>\
 </tr>\
 <tr>\
    <td colspan=2 align=center><input type=button value='저장하기' onClick='send_setting()'></td>\
 </tr>\
  <tr>\
   <td colspan=2>ADDH:<input type=text size=6 id=send_addh>ADDL:<input type=text size=6 id=send_addl>CH:<input type=text size=6 id=send_ch><input type=button value=전송 onClick='test_msg()'></td>\
 </tr>\
 <tr>\
    <td colspan=2><textarea cols=70 rows=10 id=mylog></textarea></td>\
 </tr>\
</table>\
</body>\
</html>";


//클라이언트에서 서버쪽으로 값이 전송되었을때 뭘할거냐?
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

    switch(type) {
        case WStype_DISCONNECTED:
            USE_SERIAL.printf("[%u] Disconnected!\n", num);
            break;
        case WStype_CONNECTED: {
            IPAddress ip = webSocket.remoteIP(num);
            USE_SERIAL.printf("[%u] Connected from %d.%d.%d.%d url: %s\n", num, ip[0], ip[1], ip[2], ip[3], payload);

            //num = 소켓번호(클라이언트번호)
            //webSocket.sendTXT(num, "Connected");
        }
            break;
        case WStype_TEXT:
        //메시지 수신부
            USE_SERIAL.printf("[%u] get Text: %s\n", num, payload);
            String mydata = "";
            for(int i = 0;i<length;i++){
              mydata += (char)payload[i];
            }
            //mydata -> JSON에서 Object

            

            StaticJsonDocument<128> doc;

            DeserializationError error = deserializeJson(doc, mydata);
            
            if (error) {
              Serial.print(F("deserializeJson() failed: "));
              Serial.println(error.f_str());
              return;
            }
            int mytype = doc["type"];

            if(mytype == 0){
              //테스트 메시지 전송하는 절차
              Serial.println("메시지를 전송해야겠다~!");
              byte your_header[3];
              your_header[0] = doc["addh"]; // 0
              your_header[1] = doc["addl"]; // 2
              your_header[2] = doc["ch"]; // 48
              byte my_header[] = {now_addh,now_addl,now_ch};
              Serial.print("주소=");
              Serial.print(my_header[0]);
              Serial.print(",");
              Serial.print(my_header[1]);
              Serial.print(",");
              Serial.println(my_header[2]);
              lora.write(your_header,3);//받는놈의 주소
              lora.write(my_header,3);//자기자신의 주소
              lora.println("안녕하세요?");
            }else if(mytype == 1){
              webSocket.broadcastTXT("전송완료!");
              now_addh = doc["addh"]; // 0
              now_addl = doc["addl"]; // 2
              now_ch = doc["ch"]; // 48
              int recv_mode = doc["mode"]; // 2
              if(recv_mode == 1){
                //fixed
                now_mode=0b01000011;
              }else if(recv_mode == 2){
                //tran
                now_mode=0b00000011;
              }
              int recv_txpower = doc["txpower"]; // 2
              if(recv_txpower == 1){
                now_txpower = 0b00000011; //21
              }else if(recv_txpower == 2){
                now_txpower = 0b00000010; //24
              }else if(recv_txpower == 3){
                now_txpower = 0b00000001; //27
              }else if(recv_txpower == 4){
                now_txpower = 0b00000000; //30
              }
          
              //로라모듈을 설정모드로 변경해야한다!
              digitalWrite(mode,HIGH); //설정모드!
              delay(100);
              send_buff[0] = 0xC0;
              send_buff[1] = 0x00;
              send_buff[2] = 0x01;
              send_buff[3] = now_addh; //내가 설정할 값
              Serial.print("ADDH값 수정=");
              Serial.println(set_config(send_buff),HEX);
  
              delay(100);
              send_buff[0] = 0xC0;
              send_buff[1] = 0x01;
              send_buff[2] = 0x01;
              send_buff[3] = now_addl; //내가 설정할 값
              Serial.print("ADDL값 수정=");
              Serial.println(set_config(send_buff),HEX);
  
              delay(100);
              send_buff[0] = 0xC0;
              send_buff[1] = 0x04;
              send_buff[2] = 0x01;
              send_buff[3] = now_ch; //내가 설정할 값
              Serial.print("CH값 수정=");
              Serial.print(850.125+ set_config(send_buff));
              Serial.println("Mhz");
  
              delay(100);
              send_buff[0] = 0xC0;
              send_buff[1] = 0x05;
              send_buff[2] = 0x01;
              send_buff[3] = now_mode; //내가 설정할 값
              Serial.print("MODE값 수정=");
              Serial.println(bitRead(set_config(send_buff), 6)?"Fixed Transmission":"Transparent Transmission");
  
              delay(100);
              send_buff[0] = 0xC0;
              send_buff[1] = 0x03;
              send_buff[2] = 0x01;
              send_buff[3] = now_txpower; //내가 설정할 값
              Serial.print("TXPOWER값 수정=");
              now_txpower = set_config(send_buff);
              if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 0){
                Serial.println("30dBm");
              }else if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 1){
                Serial.println("27dBm");
              }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 0){
                Serial.println("24dBm");
              }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 1){
                Serial.println("21dBm");
              }
              
              delay(1000);
              Serial.println("송수신모드로 전환합니다");
              digitalWrite(mode,LOW); //송수신모드!
              delay(100);
  
              //설정이 끝나는 지점!
              webSocket.broadcastTXT("설정완료!");
            }
            break;
    }

}

void setup() {
    //USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);
    lora.begin(9600); //아두이노하고 로라모듈하고의 통신라인!

    pinMode(mode,OUTPUT);

    digitalWrite(mode,HIGH); //설정모드!
    delay(100);
  
    Serial.println("E220-900T30D의 설정값입니다");
  
    Serial.print("ADDH=");
    send_buff[0] = 0xC1;
    send_buff[1] = 0x00;
    send_buff[2] = 0x01;
    now_addh = get_config(send_buff);
    Serial.println(now_addh,HEX);
  
    delay(100);
    Serial.print("ADDL=");
    send_buff[0] = 0xC1;
    send_buff[1] = 0x01;
    send_buff[2] = 0x01;
    now_addl = get_config(send_buff);
    Serial.println(now_addl,HEX);
  
    delay(100);
    Serial.print("CH=");
    send_buff[0] = 0xC1;
    send_buff[1] = 0x04;
    send_buff[2] = 0x01;
    now_ch = get_config(send_buff);
    Serial.print(850.125+ now_ch);
    Serial.println("Mhz");
  
    delay(100);
    Serial.print("mode=");
    send_buff[0] = 0xC1;
    send_buff[1] = 0x05;
    send_buff[2] = 0x01;
    now_mode = get_config(send_buff);
    Serial.println(bitRead(now_mode, 6)?"Fixed Transmission":"Transparent Transmission");
  
    delay(100);
    Serial.print("TXpower=");
    send_buff[0] = 0xC1;
    send_buff[1] = 0x03;
    send_buff[2] = 0x01;
    now_txpower = get_config(send_buff);
  
   
    if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 0){
      Serial.println("30dBm");
    }else if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 1){
      Serial.println("27dBm");
    }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 0){
      Serial.println("24dBm");
    }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 1){
      Serial.println("21dBm");
    }

    delay(1000);
    Serial.println("송수신모드로 전환합니다");
    digitalWrite(mode,LOW); //송수신모드!
    delay(100);

    //USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

    for(uint8_t t = 4; t > 0; t--) {
        USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
        USE_SERIAL.flush();
        delay(1000);
    }

    //나의 보드를 AP모드로 동작시키겠따! //192.168.4.1
    WiFi.softAP(ssid, password);

    IPAddress myIP = WiFi.softAPIP();
    Serial.print("AP IP address: ");
    Serial.println(myIP);
  
    //웹소켓 서버를 연다
    webSocket.begin();
    webSocket.onEvent(webSocketEvent);

    //윈도우10, 안드로이드 안됨..의미없는 기능
    if(MDNS.begin("esp8266")) {
        USE_SERIAL.println("MDNS responder started");
    }

    //웹서버의 index.html
    //웹서버가 클라이언트에게 response해주는 부분!

    server.on("/", []() {
      String response = myhtml;
      //로라정보를 기본으로 입력해서 전송한다!
      response.replace("%addh%",String(now_addh));
      response.replace("%addl%",String(now_addl));
      response.replace("%ch%",String(now_ch));

      if(bitRead(now_mode, 6)){
        //Fixed Transmission
        response.replace("%mode1%","checked");
        response.replace("%mode2%","");
      }else{
        //Transparent Transmission
        response.replace("%mode1%","");
        response.replace("%mode2%","checked");
      }
     
      if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 0){
        response.replace("%power1%","");
        response.replace("%power2%","");
        response.replace("%power3%","");
        response.replace("%power4%","checked");
      }else if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 1){
        response.replace("%power1%","");
        response.replace("%power2%","");
        response.replace("%power3%","checked");
        response.replace("%power4%","");
      }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 0){
        response.replace("%power1%","");
        response.replace("%power2%","checked");
        response.replace("%power3%","");
        response.replace("%power4%","");
      }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 1){
        response.replace("%power1%","checked");
        response.replace("%power2%","");
        response.replace("%power3%","");
        response.replace("%power4%","");
      }
        server.send(200, "text/html", response);
    });

    server.begin();

    // Add service to MDNS
    MDNS.addService("http", "tcp", 80);
    MDNS.addService("ws", "tcp", 81);
}

unsigned long last_10sec = 0;
unsigned int counter = 0;

void loop() {
    unsigned long t = millis();
    webSocket.loop(); //이거 있어야한다!
    server.handleClient(); //이거도 있어야한다!

    if(lora.available()){
      byte recv_header[3];
      lora.readBytes(recv_header,3);
      String data = lora.readStringUntil('\n');
      if(data.indexOf("안녕하세요?") != -1){
        //테스트 메시지이다!
        //recv_header : 보낸놈의 주소
        byte my_header[] = {now_addh,now_addl,now_ch};
        //my_header : 나의 주소
        lora.write(recv_header,3);
        lora.write(my_header,3);
        lora.println("녹칸다입니다!");
      }else if(data.indexOf("녹칸다입니다!") != -1){
        //응답인 상황!
        //스마트폰에 결과를 알려준다!
        webSocket.broadcastTXT("[응답]녹칸다입니다");
      }
    }

    //delay(~~~~) 절때 쓰면 안됨!
/*
    //10초간격으로 뭔가 하겠다~
    if((t - last_10sec) > 1000) {
      last_10sec = millis();
      String msg = "현재 사물인터넷보드의 시간="+String(millis());
      webSocket.broadcastTXT(msg); //모든클라이언트에게 메시지 전송!
        
    }
    */
}

byte get_config(byte input[]){
  byte recv_buff[4];
  lora.write(input,3);
  lora.readBytes(recv_buff,4);

  if(recv_buff[0] == input[0] && recv_buff[1] == input[1] && recv_buff[2] == input[2]){
    //Serial.print("ADDH=");
    //Serial.println(recv_buff[3],HEX);
    return recv_buff[3];
  }else{
    return 0xFF;
  }
}

byte set_config(byte input[]){
  byte recv_buff[4];
  lora.write(input,4);
  lora.readBytes(recv_buff,4);

  if(recv_buff[0] == 0xC1 && recv_buff[1] == input[1] && recv_buff[2] == input[2] && recv_buff[3] == input[3]){
    //응답이 정상적으로온 경우
    return recv_buff[3];
  }else{
    //실패!
    return 0xFF;
  }
}