
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include "Timer.h"  

#define pump1 D6
#define pump2 D7

float pump_flow = 3.64;

Timer t1; //2초마다 한번씩 녹칸다를 출력한다
Timer t2; //3초마다 한번씩 포에버를 출력한다!

//t1이 해야할일을 함수로 구성한다!(리턴이 없는 함수)

bool t1_run = false;
bool t2_run = false;

// Update these with values suitable for your network.

const char* ssid = "nockanda";
const char* password = "11213144";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void job1(){
  Serial.println("펌프1 작동이 종료되었습니다!");
  client.publish("nockanda/somac/end", "1");
  digitalWrite(pump1,LOW);
  t1_run = false;
}

void job2(){
  Serial.println("펌프2 작동이 종료되었습니다!");
  client.publish("nockanda/somac/end", "2");
  digitalWrite(pump2,LOW);
  t2_run = false;
}

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}


//수신된 메시지를 처리하는부분!
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String data = "";
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    data += (char)payload[i];
  }
  Serial.println();

  //data 150,2,8
  run_pump(data); //펌프~~~작동!
}

//다시 접속을 시도하는 함수!
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/2chpump");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  pinMode(pump1,OUTPUT);
  pinMode(pump2,OUTPUT);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  t1.update();
  t2.update();
  /*
  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("outTopic", msg);
  }
  */
}

void run_pump(String data){
  int first_comma = data.indexOf(','); //3
  int second_comma = data.indexOf(',',first_comma+1); //5
  String data1 = data.substring(0,first_comma);
  String data2 = data.substring(first_comma+1,second_comma);
  String data3 = data.substring(second_comma+1,data.length());

  int total = data1.toInt();
  int sample1_ratio = data2.toInt();
  int sample2_ratio = data3.toInt();

  if(total==0 && sample1_ratio == 0 && sample2_ratio == 0){
    Serial.println("모든 펌프를 강제로 멈춥니다!!");
    if(t1_run){
      t1.stop(0);
      digitalWrite(pump1,LOW);
      t1_run = false;
    }
    if(t2_run){
      t2.stop(0);
      digitalWrite(pump2,LOW);
      t2_run = false;
    }
    return;
  }

  float sample1 = total * (sample1_ratio/10.0);
  float sample2 = total * (sample2_ratio/10.0);

  String msg = String(total)+","+String(sample1)+","+String(sample2);

  client.publish("nockanda/somac/start", msg.c_str());

  Serial.println(total);
  Serial.println(sample1_ratio);
  Serial.println(sample2_ratio);
  Serial.println(sample1);
  Serial.println(sample2);
  unsigned long t1_delay = (sample1/pump_flow) * 1000;
  unsigned long t2_delay = (sample2/pump_flow) * 1000; //38,567
  Serial.println(t1_delay);
  Serial.println(t2_delay);
  
  digitalWrite(pump1,HIGH);
  digitalWrite(pump2,HIGH);

  if(!t1_run && !t2_run){
    t1.every(t1_delay,job1,1);
    t1_run = true;
    t2.every(t2_delay,job2,1);
    t2_run = true;
    Serial.println("펌프 작동을 시작합니다!");
  }else{
    Serial.println("이미 펌프가 작동중입니다!");
  }
}
