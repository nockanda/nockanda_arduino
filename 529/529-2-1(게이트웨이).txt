#include <SoftwareSerial.h>
#include <ESP8266WiFi.h>
#include "ThingSpeak.h"

char ssid[] = "nockanda";
char pass[] = "11213144";
int keyIndex = 0;
WiFiClient  client;

unsigned long myChannelNumber = 1845424;
const char * myWriteAPIKey = "1AHUZMLPC6T8C5Z9";

SoftwareSerial lora(D5,D6);

#define mymode D7

#define SET_ADDH 0x00
#define SET_ADDL 0x01
#define SET_CH 0x47
#define SET_MODE 0b01000011//(fixed transmission) //0b00000011(tranparent transmission)
#define SET_Txpower 0b00000011 //21dBm 0b00000000(30dbm)

byte now_addh = 0;
byte now_addl = 0;
byte now_ch = 0;
byte now_mode = 0;
byte now_txpower = 0;

byte send_buff[4];

struct{
  byte id;
  float temp;
  float humi;
}mysensor;

unsigned long t = 0;

//노드 갯수만큼 임시 저장 변수를 만들겠다
float temp_array[2];
float humi_array[2];

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600); //PC하고 아두이노하고의 통신라인!
  lora.begin(9600); //아두이노하고 로라모듈하고의 통신라인!
  pinMode(mymode,OUTPUT);

  WiFi.mode(WIFI_STA); 
  ThingSpeak.begin(client);

  digitalWrite(mymode,HIGH); //설정모드!
  delay(100);

  Serial.println("E220-900T30D의 설정값입니다");

  Serial.print("ADDH=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x00;
  send_buff[2] = 0x01;
  now_addh = get_config(send_buff);
  Serial.println(now_addh,HEX);

  delay(100);
  Serial.print("ADDL=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x01;
  send_buff[2] = 0x01;
  now_addl = get_config(send_buff);
  Serial.println(now_addl,HEX);

  delay(100);
  Serial.print("CH=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x04;
  send_buff[2] = 0x01;
  now_ch = get_config(send_buff);
  Serial.print(850.125+ now_ch);
  Serial.println("Mhz");

  delay(100);
  Serial.print("mode=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x05;
  send_buff[2] = 0x01;
  now_mode = get_config(send_buff);
  Serial.println(bitRead(now_mode, 6)?"Fixed Transmission":"Transparent Transmission");

  delay(100);
  Serial.print("TXpower=");
  send_buff[0] = 0xC1;
  send_buff[1] = 0x03;
  send_buff[2] = 0x01;
  now_txpower = get_config(send_buff);

 
  if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 0){
    Serial.println("30dBm");
  }else if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 1){
    Serial.println("27dBm");
  }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 0){
    Serial.println("24dBm");
  }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 1){
    Serial.println("21dBm");
  }

  //유저가 희망하는(아두이노에 코드로 지정된) 설정값으로 update!
  if(SET_ADDH != now_addh){
    //주소값을 업데이트한다!
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x00;
    send_buff[2] = 0x01;
    send_buff[3] = SET_ADDH; //내가 설정할 값
    Serial.print("ADDH값 수정=");
    Serial.println(set_config(send_buff),HEX);
  }

  if(SET_ADDL != now_addl){
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x01;
    send_buff[2] = 0x01;
    send_buff[3] = SET_ADDL; //내가 설정할 값
    Serial.print("ADDL값 수정=");
    Serial.println(set_config(send_buff),HEX);
  }

  if(SET_CH != now_ch){
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x04;
    send_buff[2] = 0x01;
    send_buff[3] = SET_CH; //내가 설정할 값
    Serial.print("CH값 수정=");
    Serial.print(850.125+ set_config(send_buff));
    Serial.println("Mhz");
  }

  if(SET_MODE != now_mode){
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x05;
    send_buff[2] = 0x01;
    send_buff[3] = SET_MODE; //내가 설정할 값
    Serial.print("MODE값 수정=");
    Serial.println(bitRead(set_config(send_buff), 6)?"Fixed Transmission":"Transparent Transmission");
  }

  if(SET_Txpower != now_txpower){
    delay(100);
    send_buff[0] = 0xC0;
    send_buff[1] = 0x03;
    send_buff[2] = 0x01;
    send_buff[3] = SET_Txpower; //내가 설정할 값
    Serial.print("TXPOWER값 수정=");
    now_txpower = set_config(send_buff);
    if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 0){
      Serial.println("30dBm");
    }else if(bitRead(now_txpower,1) == 0 && bitRead(now_txpower,0) == 1){
      Serial.println("27dBm");
    }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 0){
      Serial.println("24dBm");
    }else if(bitRead(now_txpower,1) == 1 && bitRead(now_txpower,0) == 1){
      Serial.println("21dBm");
    }
  }
  
  delay(1000);
  Serial.println("송수신모드로 전환합니다");
  digitalWrite(mymode,LOW); //송수신모드!
  delay(100);
}

void loop() {
  // put your main code here, to run repeatedly:
  //인터넷 공유기와 접속이 안되어있으면 접속을 하겠다!
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);  // Connect to WPA/WPA2 network. Change this line if using open or WEP network
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
  }

  //LoRa데이터를 수신하면~
  if(lora.available()){
    byte recv[sizeof(mysensor)];
    lora.readBytes(recv,sizeof(recv));

    //9바이트 배열을 9바이트짜리 구조체로 사용하겠다!
    memcpy(&mysensor,recv,sizeof(mysensor));

    Serial.print(mysensor.id);
    Serial.print("\t");
    Serial.print(mysensor.temp);
    Serial.print("\t");
    Serial.println(mysensor.humi);

    //수신된 노드의 id를 가지고 데이터를 임시로 저장해둔다
    if(mysensor.id == 2){
      //노드 1번
      temp_array[0] = mysensor.temp;
      humi_array[0] = mysensor.humi;
    }else if(mysensor.id == 3){
      //노드 2번
      temp_array[1] = mysensor.temp;
      humi_array[1] = mysensor.humi;
    }
  }

  //16초마다 무조건 thingspeak쪽으로 데이터를 업로드한다!
  if(millis() - t > 16000){
    t = millis();
    //데이터베이스 업로드 준비
    ThingSpeak.setField(1, temp_array[0]);
    ThingSpeak.setField(2, humi_array[0]);
    ThingSpeak.setField(3, temp_array[1]);
    ThingSpeak.setField(4, humi_array[1]);

    temp_array[0] = 0;
    humi_array[0] = 0;
    temp_array[1] = 0;
    humi_array[1] = 0;

    int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
    if(x == 200){
      Serial.println("성공적으로 업로드함!");
    }
    else{
      Serial.println("실패했음!. HTTP error code " + String(x));
    }
  }
}

byte get_config(byte input[]){
  byte recv_buff[4];
  lora.write(input,3);
  lora.readBytes(recv_buff,4);

  if(recv_buff[0] == input[0] && recv_buff[1] == input[1] && recv_buff[2] == input[2]){
    //Serial.print("ADDH=");
    //Serial.println(recv_buff[3],HEX);
    return recv_buff[3];
  }else{
    return 0xFF;
  }
}

byte set_config(byte input[]){
  byte recv_buff[4];
  lora.write(input,4);
  lora.readBytes(recv_buff,4);

  if(recv_buff[0] == 0xC1 && recv_buff[1] == input[1] && recv_buff[2] == input[2] && recv_buff[3] == input[3]){
    //응답이 정상적으로온 경우
    return recv_buff[3];
  }else{
    //실패!
    return 0xFF;
  }
}
