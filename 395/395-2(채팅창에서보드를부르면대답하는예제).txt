/*
 * WebSocketClientSocketIO.ino
 *
 *  Created on: 06.06.2016
 *
 */

#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>

#include <ArduinoJson.h>

#include <WebSocketsClient.h>
#include <SocketIOclient.h>

#include <Hash.h>

ESP8266WiFiMulti WiFiMulti;
SocketIOclient socketIO;

//여기 바꿨음!
#define USE_SERIAL Serial

void socketIOEvent(socketIOmessageType_t type, uint8_t * payload, size_t length) {
    switch(type) {
        case sIOtype_DISCONNECT:
            USE_SERIAL.printf("[IOc] Disconnected!\n");
            break;
        case sIOtype_CONNECT:
            USE_SERIAL.printf("[IOc] Connected to url: %s\n", payload);

            // join default namespace (no auto join in Socket.IO V3)
            socketIO.send(sIOtype_CONNECT, "/");
            break;
        case sIOtype_EVENT:
        {
            USE_SERIAL.printf("[IOc] get event: %s\n", payload);
            //사물인터넷보드가 메시지를 수신하는 지점!
            //보드야~ 라고하면 응답한다!
            String msg = (char*)payload; //스트링으로 변환!
            if(msg.indexOf("보드") != -1){
              //보드라는 키워드가 메시지안에 포함관계에 있다!
              //대답하는 메시지를 전송한다!
              DynamicJsonDocument doc(1024);
              JsonArray array = doc.to<JsonArray>();
              array.add("new message");
              array.add("네 말씀하세요!!"); //보드의 닉네임  
              //만들어놓은 구조를 바탕으로 JSON Serialize(직렬화)
              String output;
              serializeJson(doc, output);
              //서버로 전송!
              socketIO.sendEVENT(output);
              //시리얼모니터에 테스트 메시지 출력(전송한 메시지 출력)
              USE_SERIAL.println(output); 
            }
            break;
        }
        case sIOtype_ACK:
            USE_SERIAL.printf("[IOc] get ack: %u\n", length);
            hexdump(payload, length);
            break;
        case sIOtype_ERROR:
            USE_SERIAL.printf("[IOc] get error: %u\n", length);
            hexdump(payload, length);
            break;
        case sIOtype_BINARY_EVENT:
            USE_SERIAL.printf("[IOc] get binary: %u\n", length);
            hexdump(payload, length);
            break;
        case sIOtype_BINARY_ACK:
            USE_SERIAL.printf("[IOc] get binary ack: %u\n", length);
            hexdump(payload, length);
            break;
    }
}

void setup() {
    // USE_SERIAL.begin(921600);
    USE_SERIAL.begin(115200);

    //Serial.setDebugOutput(true);
    USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

      for(uint8_t t = 4; t > 0; t--) {
          USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
          USE_SERIAL.flush();
          delay(1000);
      }

    // disable AP
    if(WiFi.getMode() & WIFI_AP) {
        WiFi.softAPdisconnect(true);
    }

    //자기자신의 와이파이공유기 아이디 비밀번호
    WiFiMulti.addAP("popcorn", "11213144");

    //WiFi.disconnect();
    while(WiFiMulti.run() != WL_CONNECTED) {
        delay(100);
    }

    String ip = WiFi.localIP().toString();
    USE_SERIAL.printf("[SETUP] WiFi Connected %s\n", ip.c_str());

    //노드레드가 돌아가는 서버의 IP주소와 PORT번호만 바꾸면 OK!
    socketIO.begin("192.168.0.8", 1880, "/socket.io/?EIO=4");

    // event handler
    socketIO.onEvent(socketIOEvent);
}

unsigned long messageTimestamp = 0;
void loop() {
    socketIO.loop();
    //유저에게 시리얼 입력을 받는다!
    //0을 입력하면 노드레드 채팅창에 접속한다!
    //1을 입력하면 노드레드 채팅창에서 탈퇴한다!
    //2를 입력하면 녹칸다의 유튜브 채널을 구독해주세요 라는 메시지를 전송한다!
    if(Serial.available()){
      //컴퓨터에서 아두이노쪽으로 뭔가 전송했다!
      char c = Serial.read();
      DynamicJsonDocument doc(1024);
      JsonArray array = doc.to<JsonArray>();

      if(c == '0'){
        //0을입력하면 채팅창에 자신의 존재를 들어내는것이다!
        //이벤트 네임이 add user로 하면 자기자신의 닉네임을 알리는것이다!
        array.add("add user");
        array.add("ESP8266BOARD"); //보드의 닉네임
      }else if(c == '1'){
        array.add("disconnect");
      }else if(c == '2'){
        array.add("new message");
        array.add("녹칸다의 유튜브 채널을 구독해주세요!!"); //보드의 닉네임  
      }
      

      //만들어놓은 구조를 바탕으로 JSON Serialize(직렬화)
      String output;
      serializeJson(doc, output);

      //서버로 전송!
      socketIO.sendEVENT(output);

      //시리얼모니터에 테스트 메시지 출력(전송한 메시지 출력)
      USE_SERIAL.println(output); 
      
    }


}